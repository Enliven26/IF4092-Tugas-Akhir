[
    {
        "evaluation_id": "TC001",
        "commit_url": "https://github.com/apache/kafka/commit/d3b4c1bdf41de2d9144e0c2adf41ad08a3fee2e6",
        "jira_url": "https://issues.apache.org/jira//browse/KAFKA-18401",
        "included_file_paths": [
            "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "Okay, I need to write a concise commit message based on the provided Git diff and relevant source code. The user has given four different diffs and source code snippets, each with their own context. I'll go through each one step by step to understand the changes and then craft the appropriate commit messages.\n\nStarting with Git diff 1, which is from the Hadoop project. The changes involve modifying the `CopyCommands.java` file, specifically the `Merge` class. The `USAGE` and `DESCRIPTION` strings have been updated to include a new option `-skip-empty-file`. Looking at the code, a new boolean variable `skipEmptyFileDelimiter` was added, and the `processOptions` method now parses this new option. In the `processArguments` method, there's a check for whether the file is empty and whether to skip adding a delimiter. Additionally, a new method `writeDelimiter` was introduced to handle writing the delimiter. The test file `TestFsShellCopy.java` was also updated to include tests for this new option.\n\nSo, the commit type is 'feat' as it's adding a new feature. The subject should mention the addition of the `-skip-empty-file` option. The body should explain that this flag skips appending newlines for empty files when using `-nl`, referencing the relevant JIRA issue HADOOP-12657. It should also note that tests were added to validate this behavior.\n\nMoving on to Git diff 2 from the ActiveMQ project. The changes are in `BaseDataStreamMarshaller.java`. A new constant `MAX_EXCEPTION_MESSAGE_SIZE` was added, and the `tightMarshalThrowable1`, `tightMarshalThrowable2`, and `looseMarshalThrowable` methods now call `cutMessageIfNeeded` on the exception message. This method truncates messages longer than 1024 characters, appending \"...\" at the end. The commit type is 'fix' because it's addressing a potential issue with resource exhaustion. The subject should mention truncating exception messages, and the body should explain the limit and the reason, referencing AMQ-6894.\n\nGit diff 3 is from Apache Cassandra's `HintsDispatchTrigger.java`. The code removes a filter that checks if the schema versions match before dispatching hints. This means hints will now be dispatched even during schema mismatches. The commit type is 'fix' as it's improving resilience in mixed-version clusters. The subject should state the removal of the schema version check, and the body should explain that this allows dispatching during mismatches, referencing CASSANDRA-20188.\n\nLastly, Git diff 4 is from Kafka's `TransactionManager.java`. The changes involve adding the `transactionStarted` flag and modifying how it's set in `sendOffsetsToTransaction` and `maybeAddPartition` methods. The `nextRequest` method now checks `transactionStarted` differently. The commit type is 'fix' because it's correcting the handling of transaction completion. The subject should mention fixing the handling of transaction completion, and the body should explain that it ensures proper EndTxn requests are sent only when necessary, referencing KAFKA-13458.\n\nPutting it all together, each commit message should follow the specified format with the type, subject, and a brief body explaining the changes and their context.\nfeat: add -skip-empty-file option to getmerge\n\nAdd flag to skip appending newline delimiters for empty files when using -nl [HADOOP-12657]. Includes tests validating flag behavior for zero-byte files.\n\nfix: truncate exception messages to prevent resource exhaustion\n\nLimit exception message size to 1024 characters with ... suffix [AMQ-6894]. This reduces memory/thread consumption from oversized messages during repeated failover attempts.\n\nfix: remove schema version check for hint delivery\n\nAllow dispatching hints during schema mismatches to improve upgrade/mixed-version cluster resilience [CASSANDRA-20188].\n\nfix: fix handling of transaction completion\n\nEnsure proper EndTxn requests are sent only when necessary, preventing unnecessary operations [KAFKA-13458]."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "**Step-by-step Explanation:**\n\n1. **Identify the Problem**: The issue is with transaction version 2 (TV2) not handling empty transactions (commit without records) correctly, causing errors.\n\n2. **Review Changes**: The code changes in TransactionManager.java ensure that `EndTxnRequest` isn't sent if no records were added, aligning TV2 with older versions.\n\n3. **Refer to Context**: The commit addresses ticket KAFKA-18401, with provided test cases illustrating the problem.\n\n4. **Structure the Message**: Use 'fix' as the type, include the ticket ID, and summarize the fix, referencing tests.\n\n**Final Commit Message:**\n\n```\nfix: KAFKA-18401 - Handle empty transactions in TV2 without sending EndTxnRequest\n\nUpdate transaction handling to skip sending EndTxnRequest when no records or offsets are added in TV2, aligning with TV0 and TV1 behavior. Includes test cases to ensure correct behavior across all transaction versions.\n```"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add -skip-empty-file option to getmerge\n\nAdd flag to skip appending newline delimiters for empty files when using -nl [HADOOP-12657]. Includes tests validating flag behavior for zero-byte files."
            }
        ]
    },
    {
        "evaluation_id": "TC002",
        "commit_url": "https://github.com/apache/kafka/commit/badfbacdd09a9ee8821847f4b28d98625f354ed7",
        "jira_url": "https://issues.apache.org/jira//browse/KAFKA-14020",
        "included_file_paths": [
            "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
            "clients/src/main/java/org/apache/kafka/clients/producer/internals/RecordAccumulator.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "perf: optimize record handling in KafkaProducer and RecordAccumulator\n\nOptimize memory usage by avoiding unnecessary record references and reduce time measurement overhead during batch processing."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "perf: Optimize KafkaProducer performance by reducing object retention and improving concurrency\n\nThis change reduces object retention in AppendCallbacks by storing only necessary record metadata and improves concurrency through volatile variables. Additionally, RecordAccumulator now passes current time as a parameter to avoid redundant calculations, addressing performance regression observed in KAFKA-14020."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "perf: optimize KafkaProducer to improve performance\n\nOptimize KafkaProducer by deferring time calculations and reducing redundant operations in the producer's append logic [KAFKA-14020]. This reduces overhead during record accumulation and improves throughput."
            }
        ]
    },
    {
        "evaluation_id": "TC003",
        "commit_url": "https://github.com/apache/kafka/commit/50c15b94c94fbe8f964703c057963b38100b0bd6",
        "jira_url": "https://issues.apache.org/jira//browse/KAFKA-17561",
        "included_file_paths": [
            "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
            "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java",
            "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java",
            "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add new metrics for client and thread state tracking\n\nIntroduce metrics to track Kafka Streams client operational state and recording level, along with thread-specific state metrics for better monitoring and diagnostics."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add metrics for Kafka Streams client state, thread state, and recording level\n\nAdded client-state, thread-state, and recording-level metrics to provide enhanced monitoring capabilities. The recording-level metric reflects the current metrics recording level configuration.\n\n# KAFKA-17561"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add operator metrics for Kafka Streams\n\nAdd client-state, thread-state, and recording-level metrics to Kafka Streams [KAFKA-17561]. Includes new methods to track client and thread states along with metrics recording level."
            }
        ]
    },
    {
        "evaluation_id": "TC004",
        "commit_url": "https://github.com/apache/kafka/commit/00b22b001fb35e611d85abbfd4511b32058e0048",
        "jira_url": "https://issues.apache.org/jira//browse/KAFKA-18211",
        "included_file_paths": [
            "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/ReflectionScanner.java",
            "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginScannerTest.java",
            "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/TestPlugins.java",
            "connect/runtime/src/test/resources/test-plugins/classpath-converter/org/apache/kafka/connect/converters/ByteArrayConverter.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: improve plugin isolation by correctly handling classloader delegation\n\nEnsure plugins on the classpath are properly isolated and loaded using PluginClassLoader [KAFKA-17354]. Added tests to verify isolation of classpath plugins and their loading behavior. This change improves plugin discovery by correctly delegating classloading according to the child-first model.\n\nThe changes include:\n- Modifying ReflectionScanner to correctly order classloaders\n- Adding tests to verify classpath plugin isolation\n- Adding a sample classpath converter plugin for testing\n- Ensuring plugins are loaded with the appropriate classloader"
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Fix ClassGraph scanning to correctly identify isolated plugins\n\nUpdate reflection scanner to provide the correct class loader chain to ClassGraph, ensuring plugin isolation. Add test case to validate isolation of classpath plugins."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: fix plugin isolation scanning\n\nAdjust classloader handling in ReflectionScanner to properly isolate plugins [KAFKA-18211]. Added test cases to verify isolation for classpath plugins."
            }
        ]
    },
    {
        "evaluation_id": "TC005",
        "commit_url": "https://github.com/apache/kafka/commit/c8f1ee9cd994c08056df67d22c30a5893e0901a2",
        "jira_url": "https://issues.apache.org/jira//browse/KAFKA-9192",
        "included_file_paths": [
            "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java",
            "connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "test: add test for optional struct fields in JSON conversion\n\nAdd test case to verify that optional struct fields are properly omitted when not present in the payload."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Handle null jsonValue to prevent NullPointerException when field is optional\n\nKAFKA-9192: Fixed NullPointerException when optional field is missing in payload by adding null check for jsonValue. Added test case to verify handling of optional fields."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: handle null jsonValue to prevent NullPointerException in optional fields [KAFKA-9192]. Add test case for optional fields not present in payload.\n\nThis change checks for null jsonValue before accessing its properties and adds a test case to validate the behavior when optional fields are missing."
            }
        ]
    },
    {
        "evaluation_id": "TC006",
        "commit_url": "https://github.com/apache/hadoop/commit/aaf92fe1839b8bc732582445e9bbf019c17f3ef0",
        "jira_url": "https://issues.apache.org/jira//browse/HADOOP-18526",
        "included_file_paths": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/impl/WeakRefMetricsSource.java",
            "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
            "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInstrumentation.java",
            "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AClosedFS.java",
            "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/TestInstrumentationLifecycle.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: improve metrics source memory management with weak references\n\nIntroduce `WeakRefMetricsSource` to prevent memory leaks by avoiding strong references to large objects. Update metrics registration to use weak references and add tests to ensure proper lifecycle management."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Address S3AInstrumentation memory leak via WeakReference\n\nUse WeakRefMetricsSource to avoid strong references, ensuring proper cleanup and preventing memory leaks in S3AFileSystem instances. Added tests to verify lifecycle and metrics handling."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: prevent S3AInstrumentation memory leaks via weak metrics references\n\nAddress memory leaks caused by strong references in metrics registry [HADOOP-18526]. Introduce WeakRefMetricsSource to avoid retention of S3AInstrumentation instances, and update registration/cleanup logic. Includes new tests to validate proper lifecycle management."
            }
        ]
    },
    {
        "evaluation_id": "TC007",
        "commit_url": "https://github.com/apache/hadoop/commit/c3e322860f79cbb1ec9a59b4819da0a48155e551",
        "jira_url": "https://issues.apache.org/jira//browse/HADOOP-19229",
        "included_file_paths": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/PositionedReadable.java",
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Sizes.java",
            "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java",
            "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/contract/s3a/ITestS3AContractVectoredRead.java",
            "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: replace hardcoded sizes with Sizes constants\n\nReplace hardcoded size values with constants from the Sizes utility class to improve code readability and maintainability. Update tests to use the new constants."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "perf: Update vector IO thresholds to optimal sizes\n\nReplace hardcoded numerical values with constants from Sizes for min/max vector read thresholds. Added Sizes.java to centralize binary size constants. Adjusted default thresholds for S3A and ABFS to 128KB/2MB respectively."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "perf: optimize vector IO with updated size parameters\n\nUpdate minimum seek and maximum read sizes for vectorized IO operations [HADOOP-19229]. Adjusted values improve read efficiency by reducing unnecessary range gaps, particularly for cloud storage filesystems."
            }
        ]
    },
    {
        "evaluation_id": "TC008",
        "commit_url": "https://github.com/apache/hadoop/commit/9634bd31e6594312b68d9e07b736d18d29f7648c",
        "jira_url": "https://issues.apache.org/jira//browse/HADOOP-19031",
        "included_file_paths": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: enhance security by setting proper permissions on temporary directories\n\nImprove security by setting rwx------ permissions on temporary directories used for unjarring [HADOOP-12345]. Replaces insecure File.createTempFile() approach with Files.createTempDirectory() and explicit PosixFilePermissions."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Set proper permissions for temporary directory to address CVE-2024-23454\n\nThis change modifies the creation of the temporary directory to use POSIX permissions \"rwx------\", ensuring only the owner can access the directory. It also handles SecurityException in case permissions cannot be set. References: HADOOP-19031"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: set proper permissions for temporary directories to prevent information disclosure [HADOOP-19031]\n\nSet POSIX permissions to rwx------ for temporary directories used by RunJar to prevent local information disclosure. This addresses a security vulnerability where sensitive data could be accessed by unauthorized users."
            }
        ]
    },
    {
        "evaluation_id": "TC009",
        "commit_url": "https://github.com/apache/hadoop/commit/58896f0e13524c81853828d4d94b5f7298bafed5",
        "jira_url": "https://issues.apache.org/jira//browse/HADOOP-19339",
        "included_file_paths": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BlockCompressorStream.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: add validation for buffer size in BlockCompressorStream\n\nAdd check to ensure buffer size exceeds compression overhead, throwing IllegalArgumentException if not, to prevent negative MAX_INPUT_SIZE."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Prevent negative MAX_INPUT_SIZE in BlockCompressorStream\n\nAdded validation to ensure bufferSize exceeds compression overhead, throwing IllegalArgumentException if not. Fixes HADOOP-19339."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: add buffer size check in BlockCompressorStream\n\nPrevent creating streams with invalid buffer sizes by throwing IllegalArgumentException when bufferSize is insufficient [HADOOP-19339]."
            }
        ]
    },
    {
        "evaluation_id": "TC010",
        "commit_url": "https://github.com/apache/hadoop/commit/28d190b90416e9c4be402e7ef3d3c361a4f4a5a0",
        "jira_url": "https://issues.apache.org/jira//browse/HADOOP-18845",
        "included_file_paths": [
            "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
            "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AConfiguration.java",
            "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: remove schema version check for hint delivery\n\nAllow dispatching hints during schema mismatches to improve upgrade/mixed-version cluster resilience [CASSANDRA-20188]."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add S3A connection TTL configuration option\n\nAdds configuration for `fs.s3a.connection.ttl` to control the HTTP connection pool's connection TTL. Implements HADOOP-18845."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add connection ttl configuration for s3a client\n\nAdd configuration option to set http connection ttl in S3A client [HADOOP-18845]. Includes tests verifying configuration propagation and validation."
            }
        ]
    },
    {
        "evaluation_id": "TC011",
        "commit_url": "https://github.com/apache/hive/commit/20d26ad269af3c281f845df76d3b8d260cabc904",
        "jira_url": "https://issues.apache.org/jira//browse/HIVE-28473",
        "included_file_paths": [
            "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java",
            "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: handle local file destinations in MoveTask and SemanticAnalyzer\n\nModify MoveTask to skip directory creation for local files and adjust SemanticAnalyzer to correctly handle local file paths for statistics collection. This fixes issues where local file destinations were not properly managed during moves and stats collection."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: HIVE-28473 - Correctly handle intermediate directories for LOCAL INSERT OVERWRITE\n\nModified MoveTask and SemanticAnalyzer to ensure intermediate directories are created correctly when inserting into a local directory, preventing attempts to create HDFS directories with incorrect paths. This addresses the permission issues encountered during local directory INSERT OVERWRITE operations."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: correct staging directory path for INSERT OVERWRITE LOCAL DIRECTORY [HIVE-28473]\n\nFix incorrect HDFS path construction when inserting into a local directory. Now uses correct temporary paths for local destinations, preventing permission issues during intermediate file creation."
            }
        ]
    },
    {
        "evaluation_id": "TC012",
        "commit_url": "https://github.com/apache/hive/commit/4898d7bfaa1437d39d25070e0ab63c5e0e0de9d7",
        "jira_url": "https://issues.apache.org/jira//browse/HIVE-28662",
        "included_file_paths": [
            "standalone-metastore/metastore-common/src/main/java/org/apache/hadoop/hive/metastore/conf/MetastoreConf.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: enable default compactor workers and initiators\n\nEnable compactor initiator and cleaner threads by default to improve cluster resilience during schema mismatches. This change simplifies cluster setup and reduces the likelihood of data inconsistencies during upgrades.\n\nfeat: add -skip-empty-file option to getmerge\n\nAdd flag to skip appending newline delimiters for empty files when using -nl. This prevents unnecessary newlines for zero-byte files.\n\nfix: truncate exception messages to prevent resource exhaustion\n\nLimit exception messages to 1024 characters with \"...\" suffix to reduce memory usage and thread contention during repeated retries.\n\nfix: remove schema version check for partition management\n\nSkip live check for partition management tasks to allow operation during schema mismatches, improving cluster resilience during upgrades."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Enable dynamic leader election for HMS (HIVE-28662)\n\nSet default values for metastore.compactor.initiator.on, metastore.compactor.cleaner.on, and metastore.housekeeping.threads.on to true to enable efficient resource management via dynamic leader election."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: enable default settings for compactor and housekeeping tasks\n\nEnable metastore.compactor.initiator.on, metastore.compactor.cleaner.on, and metastore.housekeeping.threads.on by default [HIVE-28662]. This improves resource utilization and simplifies deployment by automatically triggering necessary compaction and housekeeping tasks."
            }
        ]
    },
    {
        "evaluation_id": "TC013",
        "commit_url": "https://github.com/apache/hive/commit/421887705f821213f48ae9c6beab62fa09e8a2e2",
        "jira_url": "https://issues.apache.org/jira//browse/HIVE-28637",
        "included_file_paths": [
            "ql/src/java/org/apache/hadoop/hive/ql/plan/Statistics.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: use StatsUtils.safeAdd to prevent integer overflow in statistics calculations\n\nReplace direct addition with StatsUtils.safeAdd in statistics calculations to handle potential integer overflows. This includes changes to numRows, dataSize, and numNulls calculations to prevent overflow in statistical aggregations."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Fix overflow issue in Statistics data aggregation\n\nReplace direct addition with StatsUtils.safeAdd to prevent integer overflow in dataSize and numRows calculations. This addresses the issue where large data sizes could cause negative values due to long overflow. Also, update numNulls in column stats to use safeAdd for consistent overflow protection.\n\nHIVE-28637"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: prevent negative data size due to overflow in statistics\n\nUse StatsUtils.safeAdd to prevent integer overflow when adding data size and row counts [HIVE-28637]. This ensures proper handling of large values and prevents negative statistics."
            }
        ]
    },
    {
        "evaluation_id": "TC014",
        "commit_url": "https://github.com/apache/hive/commit/6bd45cc6a1cdfc2272d24251c330497223123d63",
        "jira_url": "https://issues.apache.org/jira//browse/HIVE-28594",
        "included_file_paths": [
            "service/src/java/org/apache/hive/service/servlet/LoginServlet.java",
            "service/src/java/org/apache/hive/service/servlet/LDAPAuthenticationFilter.java",
            "service/src/java/org/apache/hive/service/server/HiveServer2.java",
            "service/src/java/org/apache/hive/service/auth/ldap/LdapAuthService.java",
            "common/src/java/org/apache/hive/http/HttpServer.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: refactor and enhance LDAP authentication flow\n\nRefactor authentication filter configuration to use global filters, simplify LDAPAuthService constructor, and improve login handling. Includes modular filter registration and clearer login success/failure feedback."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Address security vulnerabilities in LDAPAuthenticationFilter\n\nThis commit enhances security by modifying how login requests are validated in the `LDAPAuthenticationFilter`. The changes prevent path traversal attacks and forged URIs by properly checking the request method and URI. Additionally, the `LdapAuthService` has been refactored for better dependency management, and the login servlet now correctly handles authentication failures. These changes resolve the security issues identified in HIVE-28594."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: enhance LDAP authentication security and fix URI forgery issue\n\nUpdate LDAPAuthenticationFilter to correctly identify login requests [HIVE-28594]. Add isLoginRequest method and modify filter logic to prevent URI forgery attacks. Improve login flow handling and remove deprecated code."
            }
        ]
    },
    {
        "evaluation_id": "TC015",
        "commit_url": "https://github.com/apache/hive/commit/2ff3ed6d83a1633d17bbf5b3c852b34b51548ef8",
        "jira_url": "https://issues.apache.org/jira//browse/HIVE-28633",
        "included_file_paths": [
            "ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "perf: enable Sorted dynamic partition optimization with CBO [HIVE-20188]\n\nEnable Sorted dynamic partition optimization only when Hive Cost-Based Optimization (CBO) is enabled. This improves query performance by leveraging CBO for better optimization decisions when available."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Skip sorted dynamic partition optimization when CBO is disabled\n\nThis prevents a NullPointerException when inserting into bucketed partitioned tables, as referenced in HIVE-28633."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: gate dynamic partition optimization behind CBO\n\nPrevent optimization from running when CBO is disabled to avoid NullPointerException [HIVE-28633]. This ensures that the optimization only executes when CBO is enabled, preventing issues during bucketed partition insertions."
            }
        ]
    },
    {
        "evaluation_id": "TC016",
        "commit_url": "https://github.com/apache/activemq/commit/5f79b651c225babe62d8742d20e993073faaf1d0",
        "jira_url": "https://issues.apache.org/jira//browse/AMQ-9547",
        "included_file_paths": [
            "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java",
            "activemq-kahadb-store/src/main/java/org/apache/activemq/util/RecoverableRandomAccessFile.java",
            "activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/disk/page/PageFileTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "test: add recovery test cases for zero free pages and missing recovery file\n\nAdd tests verifying proper recovery behavior when encountering zero free pages and missing recovery files. Refactor test setup to reduce code duplication via helper method."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "Okay, I need to write a concise commit message based on the provided Git diff and additional context. Let me start by understanding the changes and the issue they're addressing.\n\nLooking at the Git diff, I see changes in three files: PageFile.java, RecoverableRandomAccessFile.java, and PageFileTest.java. \n\nIn PageFile.java, there are a few modifications. The first change is in the constructor where instead of setting the file length when it's less than the header size, it now throws an IllegalStateException. That makes sense because if the file is corrupt, we shouldn't try to fix it silently but instead let the system know.\n\nNext, in the recover method, there are some commented-out lines related to shrinking the recovery buffer. It looks like the code that tried to adjust the recovery file's length has been removed. That probably aligns with the issue where setLength() was causing exceptions.\n\nIn the load method, there's a part where if the recovery file's length is zero, it writes an empty header. Previously, it also set the file length to a minimum size, but that line has been removed. So, the file isn't preallocated anymore, which might be part of the fix.\n\nMoving to RecoverableRandomAccessFile.java, the setLength method has been removed. This method used to throw an exception, and now it's gone. That means any calls to setLength elsewhere should be handled differently or removed.\n\nLooking at the tests in PageFileTest.java, there are new test cases added. One tests recovery after an unclean shutdown with zero free pages, and another tests recovery when the recovery file is missing. These tests ensure that the changes don't break existing functionality and handle edge cases properly.\n\nNow, considering the additional context provided. The ticket ID is AMQ-9547, and the issue is that PageFile was calling setLength() on the recovery file, which always throws an exception. The priority is major, so this is a significant bug.\n\nThe problem arises because setLength() in RecoverableRandomAccessFile throws an exception, causing issues during recovery. The fix involves removing the setLength() calls and handling cases where the file might be corrupt or missing.\n\nSo, the commit message should reflect that we're fixing a bug where setLength() was causing exceptions. The subject should mention removing the method and handling corrupt files. The body should explain that we now throw exceptions when the file is corrupt and add tests to cover recovery scenarios.\n\nI need to structure the commit message with the type as 'fix', a subject that captures the main change, and a body that briefly explains the changes and includes the test additions.\n\nPutting it all together, the commit message should clearly state the problem, the solution, and the added tests for verification.\nfix: Remove setLength() calls and handle corrupt recovery files\n\nRemove setLength() calls from PageFile and handle cases where recovery file length is invalid. Add tests to verify recovery behavior when encountering corrupt or missing recovery files.\n\nThis addresses AMQ-9547 by ensuring proper error handling and recovery without relying on setLength()."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: remove recovery file setLength calls and handle corrupt files\n\nStop calling setLength on recovery file which always throws exceptions and add validation for corrupt files [AMQ-9547]. Remove unnecessary recovery buffer resizing logic and improve recovery error handling."
            }
        ]
    },
    {
        "evaluation_id": "TC017",
        "commit_url": "https://github.com/apache/activemq/commit/550cb9b2be32e5a6454e7bee5e31632498626a9c",
        "jira_url": "https://issues.apache.org/jira//browse/AMQ-9473",
        "included_file_paths": [
            "activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java",
            "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: support SSLSocket reflection for property setting\n\nEnable reflection on SSLSocket to prevent illegal access issues in JDK 11+ when setting properties on SSL connections."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Fix client SSL socket configuration for SSLSocket and SSLServerSocket\n\nAdded handling for SSLSocket in IntrospectionSupport to resolve reflection access issues when setting socket parameters. Fixes AMQ-9473."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: resolve SSL socket configuration issues for client connections\n\nHandle SSLSocket and SSLSocketImpl to prevent illegal access exceptions when setting socket parameters [AMQ-9473]. This addresses client-side socket configuration failures for parameters like enabledProtocols."
            }
        ]
    },
    {
        "evaluation_id": "TC018",
        "commit_url": "https://github.com/apache/activemq/commit/d8ae8734a9f6da41e206d33322048aedf5491e8e",
        "jira_url": "https://issues.apache.org/jira//browse/AMQ-7424",
        "included_file_paths": [
            "activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: add null checks in commitRemove\n\nAdd null checks to prevent NullPointerException when ack or message ID is null."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Prevent NullPointerException in commitRemove to fix connection leaks\n\nThis change addresses issues AMQ-7424 and AMQ-7480 by adding null checks in commitRemove to handle cases where parameters may be null, preventing NullPointerExceptions and ensuring proper connection handling during recovery."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: handle null transaction context in commitRemove\n\nAdd null checks before committing remove operations to prevent NullPointerExceptions during transaction rollbacks [AMQ-7424, AMQ-7480]. This ensures proper cleanup and connection pool management under failure conditions."
            }
        ]
    },
    {
        "evaluation_id": "TC019",
        "commit_url": "https://github.com/apache/activemq/commit/ecbeb6d2eb8675832acec243a4e50fea735763e0",
        "jira_url": "https://issues.apache.org/jira//browse/AMQ-7480",
        "included_file_paths": [
            "activemq-client/src/main/java/org/apache/activemq/TransactionContext.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: add null checks to prevent NPE in XAException handling\n\nAdd null checks around XAException handling in toXAException method to prevent potential NullPointerExceptions when handling transaction exceptions."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Fix NPEs causing connection leaks in XA transactions (AMQ-7424, AMQ-7480)\n\nThe changes handle NullPointerExceptions during XA transaction rollbacks, preventing connection leaks and ensuring proper recovery under heavy loads."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: prevent NPE during transaction rollback [AMQ-7424, AMQ-7480]\n\nAdd null checks to handle exception causes and prevent connection leaks during XA rollback scenarios. This ensures proper resource management and recovery after transaction timeouts."
            }
        ]
    },
    {
        "evaluation_id": "TC020",
        "commit_url": "https://github.com/apache/activemq/commit/6f338aa2817c221c16b6a97b7d3377daeaf42726",
        "jira_url": "https://issues.apache.org/jira//browse/AMQ-7068",
        "included_file_paths": [
            "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java",
            "activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformerTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add support for ConnectionInfo and RemoveInfo messages\n\nAdd handling for ConnectionInfo and RemoveInfo in JMSMappingOutboundTransformer, including corresponding test cases to validate the conversion."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: support transformation of advisory messages to AMQP format\n\nAdds transformation for ConnectionInfo and RemoveInfo messages, populating their bodies with relevant details. This ensures advisory messages, such as ActiveMQ.Advisory.Connection, contain useful information in their bodies instead of being empty. Fixes AMQ-7068."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: serialize advisory messages to include connection and remove info [AMQ-7068]\n\nAdd serialization for ConnectionInfo and RemoveInfo data structures to include relevant details in application properties and message body for AMQP advisory messages. Includes tests to validate transformation behavior."
            }
        ]
    },
    {
        "evaluation_id": "TC021",
        "commit_url": "https://github.com/apache/cassandra/commit/f66183a711dd440b3619a960ba4e5444c1c900ff",
        "jira_url": "https://issues.apache.org/jira//browse/CASSANDRA-20208",
        "included_file_paths": [
            "src/java/org/apache/cassandra/config/DatabaseDescriptor.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add audit logging configuration\n\nAdd support for audit logging configuration options to ensure proper validation and sanitization of settings. Includes necessary checks to handle user-defined audit logging parameters correctly."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Add sanitization for audit_logging_options on startup\n\nAdd sanitization for audit_logging_options during configuration loading to ensure consistent behavior with nodetool enableauditlog. This fixes trimming issues in included_categories. (CASSANDRA-20208)"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: sanitize audit_logging_options on startup\n\nSanitize and validate audit Logging Options during configuration parsing [CASSANDRA-20208]. Ensures consistent behavior by trimming whitespace from configuration values."
            }
        ]
    },
    {
        "evaluation_id": "TC022",
        "commit_url": "https://github.com/apache/cassandra/commit/4bc61e5209d474c50639a4858e273653fbb4e399",
        "jira_url": "https://issues.apache.org/jira//browse/CASSANDRA-20135",
        "included_file_paths": [
            "src/java/org/apache/cassandra/db/ReadCommand.java",
            "src/java/org/apache/cassandra/db/transform/StoppingTransformation.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "The changes involve refactoring the `StoppingTransformation` class and its usage within `ReadCommand`. The additions of `attachTo` methods and changing field visibility enhance encapsulation and prevent bugs.\n\n**Commit Message:**\n\n```\nrefactor: improve encapsulation in StoppingTransformation\n\nModify StoppingTransformation to properly handle different iterator types and prevent attaching multiple different iterators by adding attachTo methods and making rows/partitions protected.\n```\n\nThis message succinctly captures the refactor's intent and the key changes made."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Prevent assertion errors when multiple transformations are applied\n\nCASSANDRA-20135: Fixed assertion errors caused by attaching multiple transformations by modifying access modifiers and adding precondition checks."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: fix assertion errors in StoppingTransformation\n\nCorrectly handle attachment of transformations to prevent duplicate calls and assertion errors [CASSANDRA-20135]."
            }
        ]
    },
    {
        "evaluation_id": "TC023",
        "commit_url": "https://github.com/apache/cassandra/commit/407dbacb0a0fcd5eca28abe781be635476325a65",
        "jira_url": "https://issues.apache.org/jira//browse/CASSANDRA-20151",
        "included_file_paths": [
            "src/java/org/apache/cassandra/service/snapshot/SnapshotManagerMBean.java",
            "src/java/org/apache/cassandra/tools/nodetool/ListSnapshots.java",
            "test/distributed/org/apache/cassandra/distributed/test/SnapshotsTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add filtering options to listsnapshots command\n\nAdded filtering by keyspace, table, and snapshot name to improve snapshot management [CASSANDRA-XXXX]. Includes tests for new filtering capabilities."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add filtering options to nodetool listsnapshots\n\nAdded optional flags `-k/--keyspace`, `-t/--table`, and `-n/--snapshot` to filter snapshots by keyspace, table, or snapshot name. These options enhance the ability to manage and navigate through numerous snapshots. CASSANDRA-20151"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add filtering options to nodetool listsnapshots\n\nAdd support for filtering snapshots by keyspace, table, and snapshot name using new options [-k, -t, -n] in nodetool listsnapshots [CASSANDRA-20151]. Includes test cases verifying the filtering functionality."
            }
        ]
    },
    {
        "evaluation_id": "TC024",
        "commit_url": "https://github.com/apache/cassandra/commit/b15a1f04b61e11bc3b9719c06bffb9fa672a25cd",
        "jira_url": "https://issues.apache.org/jira//browse/CASSANDRA-20149",
        "included_file_paths": [
            "src/java/org/apache/cassandra/service/snapshot/SnapshotDetailsTabularData.java",
            "src/java/org/apache/cassandra/service/snapshot/SnapshotManager.java",
            "src/java/org/apache/cassandra/service/snapshot/SnapshotManagerMBean.java",
            "src/java/org/apache/cassandra/tools/nodetool/ListSnapshots.java",
            "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add raw true size tracking for snapshots\n\nAdd support for tracking and reporting raw true size of snapshots in bytes [CASSANDRA-XXXX]. This includes updating the tabular data to include raw sizes and adding a new method to retrieve specific snapshot sizes."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "perf: Optimize nodetool listsnapshots to reduce JMX calls\n\nInclude raw true snapshot sizes in SnapshotDetailsTabularData and sum on client side, eliminating redundant JMX calls and improving efficiency. This change addresses CASSANDRA-20149."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "perf: optimize snapshot listing by reducing JMX calls\n\nModify nodetool listsnapshots to include true snapshot sizes in single JMX call [CASSANDRA-20149]. Adds raw true size column and totals, eliminating redundant JMX queries."
            }
        ]
    },
    {
        "evaluation_id": "TC025",
        "commit_url": "https://github.com/apache/cassandra/commit/4fc8bb29fcda935728d8863a4499fa0e9d924b82",
        "jira_url": "https://issues.apache.org/jira//browse/CASSANDRA-20108",
        "included_file_paths": [
            "src/java/org/apache/cassandra/db/filter/RowFilter.java",
            "test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java",
            "test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: handle tombstones correctly in row filtering\n\nUpdate RowFilter and related classes to properly account for tombstones and live status when evaluating row expressions. Includes new tests for filtering on deleted static columns."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Handle deleted static columns in row filtering to prevent IndexOutOfBoundsException\n\nAdded `nowInSec` parameter to row filter evaluation methods and updated tombstone checks to prevent accessing deleted static columns, resolving IndexOutOfBoundsException during filtering. Added test case to verify correct handling of deleted static columns in queries."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: handle deleted columns in row filtering to prevent index errors [CASSANDRA-20108]\n\nUpdate RowFilter to properly handle deleted columns by checking for tombstones and null values. Includes test cases to validate filtering on deleted static columns."
            }
        ]
    },
    {
        "evaluation_id": "TC026",
        "commit_url": "https://github.com/apache/camel/commit/293ad682e312ebd9fdac49c90d242595c43d3916",
        "jira_url": "https://issues.apache.org/jira//browse/CAMEL-21442",
        "included_file_paths": [
            "dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/ExportBaseCommand.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "chore: improve directory handling in file copy utility\n\nUpdate file copy logic to ensure target directories exist before copying and fix typo in comment. This improves reliability of file operations during source export."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: resolve export issue when local-kamelet-dir is current directory (CAMEL-21442)\n\nEnsure target directory is created before copying files and fix typo in comment."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: resolve local-kamelet-dir export issue by creating target directory\n\nEnsure target directory exists before copying files and simplify file copy logic [CAMEL-21442]. Additionally, fix typo in comment."
            }
        ]
    },
    {
        "evaluation_id": "TC027",
        "commit_url": "https://github.com/apache/camel/commit/2f8a0881ed6e65cecf9bf7ae2e3968f2751d8bd1",
        "jira_url": "https://issues.apache.org/jira//browse/CAMEL-21625",
        "included_file_paths": [
            "dsl/camel-jbang/camel-jbang-plugin-kubernetes/src/main/java/org/apache/camel/dsl/jbang/core/commands/kubernetes/KubernetesHelper.java",
            "dsl/camel-jbang/camel-jbang-plugin-kubernetes/src/main/java/org/apache/camel/dsl/jbang/core/commands/kubernetes/KubernetesRun.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: relocate createKubernetesClientForShutdownHook and clean up imports\n\nMove `createKubernetesClientForShutdownHook` method from `KubernetesHelper` to `KubernetesRun` for better encapsulation. Clean up unused imports in `KubernetesHelper`."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Move Kubernetes client creation method to address shutdown hook issue\n\nMove `createKubernetesClientForShutdownHook` from `KubernetesHelper` to `KubernetesRun` to fix the `camel-jbang` shutdown hook issue (CAMEL-21621). This addresses the `Client is closed` exception during shutdown."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: move shutdown hook Kubernetes client creation to fix resource cleanup\n\nMove Kubernetes client creation for shutdown hooks to KubernetesRun to resolve manifest file cleanup and client closure issues during shutdown [CAMEL-21625, CAMEL-21621]."
            }
        ]
    },
    {
        "evaluation_id": "TC028",
        "commit_url": "https://github.com/apache/camel/commit/32895ccfeae995497a275754dafcad38947447b7",
        "jira_url": "https://issues.apache.org/jira//browse/CAMEL-21614",
        "included_file_paths": [
            "core/camel-support/src/main/java/org/apache/camel/support/cache/SimpleLRUCache.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: add concurrency control for change tracking in SimpleLRUCache\n\nAdd ReadWriteLock to prevent race conditions during change tracking operations. Includes lock handling for addChange and compressChanges methods to ensure thread safety in concurrent environments."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Add locks to prevent deadlock in SimpleLRUCache\n\nAdded ReadWriteLock to synchronize access to the changes queue during put and compressChanges operations, resolving concurrency issues causing threads to hang."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: add concurrency control to SimpleLRUCache\n\nAdd ReadWriteLock to prevent concurrent modifications during cache operations [CAMEL-21614]. This ensures thread safety during changes and improves stability for concurrent access."
            }
        ]
    },
    {
        "evaluation_id": "TC029",
        "commit_url": "https://github.com/apache/camel/commit/b3797fc19a260c9ec8cc292fd3b2a6f254b5030a",
        "jira_url": "https://issues.apache.org/jira//browse/CAMEL-21621",
        "included_file_paths": [
            "dsl/camel-jbang/camel-jbang-plugin-kubernetes/src/main/java/org/apache/camel/dsl/jbang/core/commands/kubernetes/KubernetesHelper.java",
            "dsl/camel-jbang/camel-jbang-plugin-kubernetes/src/main/java/org/apache/camel/dsl/jbang/core/commands/kubernetes/KubernetesRun.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: properly handle Kubernetes client in shutdown hooks\n\nAdd dedicated Kubernetes client creation for shutdown hooks using Vertx configuration and ensure proper cleanup via try-with-resources [CAMEL-21621]. This prevents resource leaks and ensures safe client disposal during application shutdown."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: create k8s client for shutdown hook to prevent client closure and improve cleanup\n\nAdded `createKubernetesClientForShutdownHook` in `KubernetesHelper` to properly handle client creation and closure during shutdown. Also, ensured proper resource management using try-with-resources in `KubernetesRun`'s shutdown hook. Fixes CAMEL-21621 and CAMEL-21625 by preventing client closure issues and improving Kubernetes manifest cleanup during application termination."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: fix kubernetes shutdown hook and manifest cleanup issues\n\nResolve Kubernetes client closure and manifest file errors during shutdown [CAMEL-21621, CAMEL-21625]. Implements proper client management and handles missing manifest files in shutdown hooks."
            }
        ]
    },
    {
        "evaluation_id": "TC030",
        "commit_url": "https://github.com/apache/camel/commit/529d1ccca1f0b0e7bf6e7092bbe53d41c342c6a3",
        "jira_url": "https://issues.apache.org/jira//browse/CAMEL-21553",
        "included_file_paths": [
            "components/camel-hashicorp-vault/src/main/java/org/apache/camel/component/hashicorp/vault/HashicorpVaultPropertiesFunction.java",
            "core/camel-main/src/main/java/org/apache/camel/main/BaseMainSupport.java",
            "core/camel-main/src/main/java/org/apache/camel/main/DefaultConfigurationConfigurer.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: improve vault configuration handling\n\nEnhance error reporting in vault property resolution and reorganize configuration steps for clarity and maintainability. Includes splitting configuration methods and renaming refresh handling."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: initialize vault configuration earlier and improve error handling\n\nInitialize vault configuration earlier to ensure properties are available during bean instantiation. Improve error messages when retrieving secrets from vault. This addresses CAMEL-21553."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: improve error handling and Vault configuration loading\n\nEnhance error messages by including exception details [CAMEL-21553]. Refactor Vault configuration loading to ensure proper initialization during application startup."
            }
        ]
    },
    {
        "evaluation_id": "TC031",
        "commit_url": "https://github.com/apache/maven/commit/6767f2500f1d005924ccff27f04350c253858a84",
        "jira_url": "https://issues.apache.org/jira//browse/MNG-7486",
        "included_file_paths": [
            "maven-core/src/main/java/org/apache/maven/internal/MultilineMessageHelper.java",
            "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/BuilderCommon.java",
            "maven-core/src/test/java/org/apache/maven/internal/MultilineMessageHelperTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: introduce multiline message helper\n\nIntroduce utility class for formatting multiline messages with borders and box characters. Update BuilderCommon to use this helper for consistent message formatting. Add unit tests for the new utility."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "refactor: Add multiline message helper for consistent boxed log formatting (MNG-7486)\n\nAdded `MultilineMessageHelper` class to format multiline log messages with consistent box formatting, along with corresponding test cases. Updated `BuilderCommon` to utilize this helper for displaying warnings about non-thread-safe plugins."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "refactor: add multiline message helper for boxed log messages [MNG-7486]\n\nSimplify message formatting for console output by introducing a reusable helper class. Includes test cases for message formatting scenarios."
            }
        ]
    },
    {
        "evaluation_id": "TC032",
        "commit_url": "https://github.com/apache/maven/commit/36de1c6e512435dffe0f27e1c117bd725cfba293",
        "jira_url": "https://issues.apache.org/jira//browse/MNG-8237",
        "included_file_paths": [
            "maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java",
            "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: improve deprecated CLI option handling\n\nCentralize deprecated option detection and logging, and add error handling for unsupported options."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "refactor: Fix deprecated option notices and improve documentation\n\n- Added tracking for deprecated options usage\n- Updated deprecated option messages with proper attributes\n- Modified help output to clearly indicate deprecated options\n- Ticket ID: MNG-8237"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "chore: improve deprecated option handling\n\nUpdate deprecated option handling to prevent duplicate warnings and improve error messages [MNG-8237]. Adds tracking for deprecated option usage and improves deprecation notice formatting in help output."
            }
        ]
    },
    {
        "evaluation_id": "TC033",
        "commit_url": "https://github.com/apache/maven/commit/84ed8bea95c7ad45270a2a8e940f8ce3914b751d",
        "jira_url": "https://issues.apache.org/jira//browse/MNG-8331",
        "included_file_paths": [
            "maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelBuilder.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: improve dependency version inference in model builder\n\nExtracted dependency version inference logic into a separate method and optimized the handling of dependencies for better readability and maintainability."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: MNG-8331: Versioned dependencies may disappear in modelVersion 4.1.0\n\nRefactored dependency version inference logic to properly handle mixed versioned and version-less dependencies, ensuring all dependencies are correctly included in the model."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: retain versioned dependencies when mixing with inferred versions [MNG-8331]\n\nRestructure dependency processing to ensure versioned dependencies are not lost when mixed with inferred version-less dependencies. This fixes an issue where versioned dependencies could disappear during model processing [MNG-8331]."
            }
        ]
    },
    {
        "evaluation_id": "TC034",
        "commit_url": "https://github.com/apache/maven/commit/9f2ef3434390da0f558224acccfdbdc9194c65e9",
        "jira_url": "https://issues.apache.org/jira//browse/MNG-8349",
        "included_file_paths": [
            "maven-api-impl/src/main/java/org/apache/maven/internal/impl/model/DefaultModelValidator.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: extract version segment parsing into helper method\n\nExtract repeated code into `asLong` method with error handling, improving maintainability."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "```\nfix: MNG-8349 - Handle NumberFormatException in model version comparison\n\nAdded helper method asLong to safely parse version segments and handle invalid numbers.\n```\n\nThe commit message succinctly captures the fix for the NumberFormatException issue, referencing the relevant ticket and summarizing the changes made to handle invalid version segments."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: handle NumberFormatException in model version parsing [MNG-8349]\n\nAdd error handling for invalid model version strings to prevent NumberFormatException during Maven model validation."
            }
        ]
    },
    {
        "evaluation_id": "TC035",
        "commit_url": "https://github.com/apache/maven/commit/4bd12915c9399e02d4826e5150c1a9c735d12765",
        "jira_url": "https://issues.apache.org/jira//browse/MNG-7662",
        "included_file_paths": [
            "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
            "maven-core/src/test/java/org/apache/maven/session/scope/SessionScopeProxyTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add proxy support for session-scoped beans\n\nAdd proxy support to handle session-scoped dependencies within singleton contexts. Includes tests verifying proxy behavior and injection correctness."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add proxy support for session-scoped components (MNG-7662)\n\nAdded proxy creation for session-scoped beans requiring injection into singleton beans, using Typed annotations. Includes tests verifying proxy behavior and injection compatibility."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: enable session scoped proxies for injection into singletons [MNG-7662]\n\nAdd proxy support for session scoped components to be injected into singletons, with tests verifying the behavior.\n\n---\n\n{type}: {subject}\n\n{body}\n\n---\n\nfeat: enable session scoped proxies for injection into singletons [MNG-7662]\n\nAdd proxy support for session scoped components to be injected into singletons, with tests verifying the behavior."
            }
        ]
    },
    {
        "evaluation_id": "TC036",
        "commit_url": "https://github.com/apache/opennlp/commit/c9440e68e098654a9f4315c816d0f0dd0cbef7b5",
        "jira_url": "https://issues.apache.org/jira//browse/OPENNLP-1702",
        "included_file_paths": [
            "opennlp-tools/src/main/java/opennlp/tools/formats/brat/BratDocumentStream.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: improve BratDocumentStream with constants and sorting\n\nIntroduce constants for file suffixes and sort files before processing. Replace hardcoded strings with constants to improve code maintainability and consistency."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: OPENNLP-1702 - BratDocumentStream now processes files deterministically\n\nSorted files alphabetically and used constants for suffixes to ensure consistent processing order."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: make BratDocumentStream process files deterministically\n\nAdded sorting of files to ensure consistent processing order [OPENNLP-1702]. This change addresses non-determinism caused by File.listFiles() returning files in an arbitrary order."
            }
        ]
    },
    {
        "evaluation_id": "TC037",
        "commit_url": "https://github.com/apache/opennlp/commit/5310565f6f402a93a41222050ab6f88f9f13d013",
        "jira_url": "https://issues.apache.org/jira//browse/OPENNLP-1667",
        "included_file_paths": [
            "opennlp-tools/src/main/java/opennlp/tools/chunker/ThreadSafeChunkerME.java",
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/ThreadSafeLemmatizerME.java",
            "opennlp-tools/src/main/java/opennlp/tools/namefind/ThreadSafeNameFinderME.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: introduce thread-safe ChunkerME implementation\n\nAdd ThreadSafeChunkerME to provide thread-safe access to ChunkerME using ThreadLocal. Refactor variable names in related thread-safe classes for consistency. Implement AutoCloseable to manage thread-local resources properly."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add thread-safe ChunkerME implementation\n\nAdded ThreadSafeChunkerME to provide thread-safe ChunkerME functionality. Refactored local variable names in getNameFinder() and getLemmatizer() for clarity. Implements AutoCloseable to allow explicit removal of thread-local resources. Addresses OPENNLP-1667 and OPENNLP-1620."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add thread-safe ChunkerME implementation\n\nIntroduce ThreadSafeChunkerME to provide thread-safe access to ChunkerME functionality [OPENNLP-1667]. Implements AutoCloseable to enable ThreadLocal cleanup [OPENNLP-1620]. Similar to existing thread-safe implementations for lemmatizer and name finder."
            }
        ]
    },
    {
        "evaluation_id": "TC038",
        "commit_url": "https://github.com/apache/opennlp/commit/e91ceb17e36120b66dafdf15d2e11fc6a59c92c6",
        "jira_url": "https://issues.apache.org/jira//browse/OPENNLP-1661",
        "included_file_paths": [
            "opennlp-tools/src/main/java/opennlp/tools/util/DownloadUtil.java",
            "opennlp-tools/src/test/java/opennlp/tools/util/AbstractDownloadUtilTest.java",
            "opennlp-tools/src/test/java/opennlp/tools/util/DownloadUtilDownloadTwiceTest.java",
            "opennlp-tools/src/test/java/opennlp/tools/util/DownloadUtilTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add model existence check with SHA512 validation\n\nAdded `existsModel` method to check for existing models and validate their integrity via SHA512 checksum. Includes tests for verifying existence checks and handling invalid inputs."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "Okay, I need to write a concise commit message based on the provided Git diff and additional context. Let me start by understanding the changes made in the code.\n\nLooking at the Git diff, I see that the `DownloadUtil.java` file has been modified. There are several new methods added, like `existsModel`, which checks if a model exists locally. Also, the `getDownloadHome` method was introduced to handle the download directory. The `downloadModel` method now uses this new method and includes validation checks.\n\nIn the test files, `AbstractDownloadUtilTest.java` was deleted, and `DownloadUtilDownloadTwiceTest.java` was updated. The tests now check if models are downloaded correctly and if existing models are skipped. The `DownloadUtilTest.java` file added new tests for `existsModel` and handling invalid inputs.\n\nThe additional context explains that the issue was about custom models being wiped during builds. The goal was to prevent accidental deletion, reduce repeated downloads, and validate models properly.\n\nSo, the commit type is a fix. The subject should mention the bug fix related to model management. The body needs to summarize the changes, including the new `existsModel` method, the refactored download logic, and the updated tests. Also, it should reference the ticket ID and issue summary.\n\nI should structure the commit message with the type, subject, and body. The body should be a single paragraph, wrapping the sentences concisely. I'll include the ticket ID and mention the relevant changes without extra comments.\n\nPutting it all together, the commit message should clearly state the fix and the improvements made, referencing the ticket for context.\nfix: Implement model existence check and prevent accidental deletion of custom models\n\nAdded `existsModel` method to verify local model presence and validity. Refactored download logic to utilize `getDownloadHome` for consistent directory handling. Updated tests to validate model existence checks and prevent redundant downloads. Removed `AbstractDownloadUtilTest` as its functionality was incorporated into other test classes. This addresses OPENNLP-1661 by ensuring custom models are preserved and only valid, missing models are downloaded."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: prevent custom model deletion and validate existing models\n\nUpdate download utility to check for existing models, validate checksums, and avoid deleting custom models [OPENNLP-1661]. Modify tests to verify model existence and handle invalid inputs without affecting user data."
            }
        ]
    },
    {
        "evaluation_id": "TC039",
        "commit_url": "https://github.com/apache/opennlp/commit/374bee9324dfb69dcb2735f3ca4d7de57f10918f",
        "jira_url": "https://issues.apache.org/jira//browse/OPENNLP-1655",
        "included_file_paths": [
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/SentenceDetectorME.java",
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/ThreadSafeSentenceDetectorME.java",
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/ThreadSafeTokenizerME.java",
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerME.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: allow explicit Dictionary in constructors\n\nModify constructors to accept Dictionary objects explicitly, decoupling from model's default [OPENNLP-1234]."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add constructors to inject custom abbreviation dictionaries\n\nAdded constructors to SentenceDetectorME, TokenizerME, and their thread-safe counterparts to allow injecting custom abbreviation dictionaries. Users can now provide a Dictionary that fits their model's language."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add constructors for custom abbreviation dictionary injection\n\nAdd constructors to inject custom abbreviation dictionaries in TokenizerME and SentenceDetectorME [OPENNLP-1655]. This provides flexibility for domain-specific abbreviation handling."
            }
        ]
    },
    {
        "evaluation_id": "TC040",
        "commit_url": "https://github.com/apache/opennlp/commit/a1c46d185ab39a1e93bf77c6f211b4178bba5e4a",
        "jira_url": "https://issues.apache.org/jira//browse/OPENNLP-1600",
        "included_file_paths": [
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSTagFormat.java",
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSTagFormatMapper.java",
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java",
            "opennlp-tools/src/test/java/opennlp/tools/postag/POSTaggerMETest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add support for custom postag format\n\nIntroduce CUSTOM postag format and NoOp mapper to disable automatic tag conversion [OPENNLP-1234]. Includes tests validating behavior with custom tags."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add custom POS tag format support\n\nAdded `CUSTOM` format with `NoOp` mapper to disable POS tag conversion, addressing OPENNLP-1600."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add support for custom POS tag format\n\nAdd option to disable POS tag mapping by using CUSTOM format [OPENNLP-1600]. Includes test validating no-op mapping behavior for custom tags."
            }
        ]
    },
    {
        "evaluation_id": "TC041",
        "commit_url": "https://github.com/apache/zookeeper/commit/91ab3f5274658a457f205065233db038ba7e622f",
        "jira_url": "https://issues.apache.org/jira//browse/ZOOKEEPER-4790",
        "included_file_paths": [
            "zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java",
            "zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add client hostname verification configuration option\n\nAdd configuration option to control client hostname verification behavior during SSL handshake [ZOOKEEPER-3021]. This allows more granular control over hostname verification between server and client connections."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add client hostname verification configuration option\n\nAdd new configuration option to enable/disable client hostname verification independently of server verification, allowing admins to control the verification behavior for connecting quorum peers."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "Okay, I need to write a concise commit message based on the provided Git diff and additional context. The user has given four different diffs and contexts, but they specifically mentioned that they only need the fourth commit message. So, I'll focus on Git diff 4 and additional context 4.\n\nLooking at Git diff 4, it's in the zookeeper-server project, specifically in X509Util.java and ZKConfig.java. The changes involve adding a new property related to client hostname verification. In X509Util.java, a new private field sslClientHostnameVerificationEnabledProperty is added, along with a getter method. In ZKConfig.java, this new property is being put into the properties map.\n\nThe additional context 4 is about a ticket (ZOOKEEPER-4790) where the issue is that TLS Quorum hostname verification is causing problems in certain scenarios, like Kubernetes. The problem arises because the reverse DNS lookup might return multiple names, leading to inconsistent verification. The user suggests that the server should verify against the list of configured servers instead of relying on DNS.\n\nThe commit type is 'feat', which indicates a new feature. The goal here is to add an option to disable client hostname verification while keeping server verification enabled. This would allow more flexibility in configurations where DNS might not be reliable or consistent.\n\nSo, the commit message should reflect the addition of this new feature. The subject should be something like \"add option to disable client hostname verification\". The body should mention that this allows server verification to remain enabled and reference the ticket.\n\nPutting it all together, the commit message would be:\n\nfeat: add option to disable client hostname verification\n\nAdd configuration to disable client hostname verification while keeping server verification enabled [ZOOKEEPER-4790].\nfeat: add option to disable client hostname verification\n\nAdd configuration to disable client hostname verification while keeping server verification enabled [ZOOKEEPER-4790]."
            }
        ]
    },
    {
        "evaluation_id": "TC042",
        "commit_url": "https://github.com/apache/zookeeper/commit/e2070bed85d8b0c98a5a0045bf92421f473c412e",
        "jira_url": "https://issues.apache.org/jira//browse/ZOOKEEPER-4753",
        "included_file_paths": [
            "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java",
            "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumKerberosAuthTest.java",
            "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumKerberosHostBasedAuthTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: enhance SASL quorum authentication with DIGEST-MD5 support and improved authorization checks. Add tests for host-based authentication scenarios."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Explicitly handle DIGEST-MD5 vs GSSAPI in quorum SASL auth\n\nUpdate `SaslQuorumServerCallbackHandler` to use the login module name to distinguish between DIGEST-MD5 and GSSAPI, adjust credential handling, and relax auth ID checks for DIGEST-MD5. Modify tests to handle host-based and hostless principals, ensuring proper authentication failures for GSSAPI."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: explicitly handle DIGEST-MD5 and GSSAPI in quorum auth [ZOOKEEPER-4753]\n\nModify SASL callback handler to distinguish between DIGEST-MD5 and GSSAPI mechanisms. Store credentials only for DIGEST-MD5 and adjust authorization checks accordingly. Update tests to validate behavior for both mechanisms."
            }
        ]
    },
    {
        "evaluation_id": "TC043",
        "commit_url": "https://github.com/apache/zookeeper/commit/c0e92411fbb38025d4cd257835cf5e4afeea4956",
        "jira_url": "https://issues.apache.org/jira//browse/ZOOKEEPER-4858",
        "included_file_paths": [
            "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: optimize snapshot and restore operations with finer-grained locking\n\nReplace method-level synchronization with an exclusive lock for snapshot and restore operations to improve concurrency and reduce contention."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Remove lock contention between snapshotting and sync operations\n\nModify `takeSnapshot` and `restoreFromSnapshot` methods to use `snapshotAndRestoreLock` instead of `synchronized` keyword, addressing ZOOKEEPER-4858. This change reduces contention with the `sync()` operation."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: remove synchronized for snapshot and restore operations\n\nRemove synchronized keyword from takeSnapshot and restoreFromSnapshot methods to reduce lock contention. Introduce a dedicated lock object for snapshot and restore operations to prevent interference with sync operations [ZOOKEEPER-4858]."
            }
        ]
    },
    {
        "evaluation_id": "TC044",
        "commit_url": "https://github.com/apache/zookeeper/commit/9f355f5a57f35d3760f8e669696622135c457938",
        "jira_url": "https://issues.apache.org/jira//browse/ZOOKEEPER-4377",
        "included_file_paths": [
            "zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java",
            "zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "test: Add test for KeeperException create method\n\nAdd test cases to verify KeeperException.create() behavior for valid and invalid codes, ensuring proper exception handling and error messages."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Address NPE in KeeperException.create by adding null checks and improving error messages\n\nThis change adds null checks in KeeperException.create and Code.get methods to prevent NullPointerExceptions when invalid or unrecognized exception codes are encountered. It also enhances error messages to include the problematic code for easier debugging.\n\nAdds test case ZOOKEEPER-4377 to verify the fix."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: handle unknown KeeperException codes to prevent NullPointerExceptions\n\nImprove error handling by throwing IllegalArgumentException with detailed messages for unknown KeeperException codes [ZOOKEEPER-4377]. Adds tests to validate exception behavior for invalid codes."
            }
        ]
    },
    {
        "evaluation_id": "TC045",
        "commit_url": "https://github.com/apache/zookeeper/commit/58e0a7741533ec3598c619c526208f8a90f5756c",
        "jira_url": "https://issues.apache.org/jira//browse/ZOOKEEPER-3991",
        "included_file_paths": [
            "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: fix socket binding issue in quorum connection manager\n\nEnsure server sockets bind to the correct address by reconstructing the InetSocketAddress before binding [ZOOKEEPER-XXXX]. This addresses issues where sockets may fail to bind properly under certain network configurations."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: Retry DNS lookup on unresolved address\n\nEnsure DNS resolution is retried each time the server socket is created, addressing ZOOKEEPER-3991 and preventing infinite exceptions when addresses become resolveable after initial failure."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: retry DNS lookup for listener port binding\n\nEnsure DNS lookups are retried when creating server sockets for listener port binding [ZOOKEEPER-3991]. This prevents infinite unresolved address errors when DNS becomes available after initial failure."
            }
        ]
    },
    {
        "evaluation_id": "TC046",
        "commit_url": "https://github.com/apache/drill/commit/ce7874479cee9ac0a60bb4ea24af090212df0ece",
        "jira_url": "https://issues.apache.org/jira//browse/DRILL-8513",
        "included_file_paths": [
            "zexec/java-exec/src/main/java/org/apache/drill/exec/physical/impl/join/HashJoinProbeTemplate.java",
            "exec/java-exec/src/test/java/org/apache/drill/exec/physical/impl/join/TestHashJoin.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "test: add test for right outer join with empty left input\n\nAdd test case verifying hash join behavior when left side is empty in a right outer join. The test ensures that the join operation handles empty input correctly and returns the expected result structure."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "test: Add test for right join with empty left table\n\nAdds a test case (DRILL-8513) to verify right outer join behavior when the left input is empty, ensuring correct results are returned."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "test: add test for right outer join with empty left table\n\nAdd test case [DRILL-8513] to verify correct handling of right outer joins when the left input is empty."
            }
        ]
    },
    {
        "evaluation_id": "TC047",
        "commit_url": "https://github.com/apache/drill/commit/6d94399fef380d55d79bff390bfaf3a7e2f61805",
        "jira_url": "https://issues.apache.org/jira//browse/DRILL-8489",
        "included_file_paths": [
            "exec/rpc/src/main/java/org/apache/drill/exec/rpc/RpcEncoder.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "fix: conditionally release messages to prevent resource leaks\n\nModify RpcEncoder to only release messages when encoding fails, preventing resource leaks and potential memory issues."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "fix: DRILL-8489 - Fix sender memory leak when RPC encode exception occurs\n\nAdd encode success tracking to ensure message release on failure."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "fix: prevent memory leak by releasing message on encode failure\n\nEnsure message is released only when encoding fails to avoid memory leaks during RPC exceptions [DRILL-8489]."
            }
        ]
    },
    {
        "evaluation_id": "TC048",
        "commit_url": "https://github.com/apache/drill/commit/ac98f349e86673555c2e2161cbd42c304840b5b9",
        "jira_url": "https://issues.apache.org/jira//browse/DRILL-8503",
        "included_file_paths": [
            "contrib/storage-splunk/src/main/java/org/apache/drill/exec/store/splunk/SplunkConnection.java",
            "contrib/storage-splunk/src/main/java/org/apache/drill/exec/store/splunk/SplunkPluginConfig.java",
            "contrib/storage-splunk/src/main/java/org/apache/drill/exec/store/splunk/SplunkUtils.java",
            "contrib/storage-splunk/src/test/java/org/apache/drill/exec/store/splunk/SplunkConnectionTest.java",
            "contrib/storage-splunk/src/test/java/org/apache/drill/exec/store/splunk/SplunkTestSuite.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add hostname verification control for Splunk SSL connections\n\nAdd configuration option to enable or disable hostname verification during SSL connection setup, improving compatibility with self-signed certificates. Includes updates to tests and configuration handling."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add configuration option to skip host validation for Splunk\n\nAdd `validateHostname` configuration option and handle it in Splunk connection setup. This allows skipping hostname verification for SSL connections, particularly useful with self-signed certificates. DRILL-8503"
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add validateHostname option for Splunk SSL connections\n\nAdd configuration option to disable hostname verification for SSL connections to Splunk [DRILL-8503]. Includes updates to connection handling and test cases."
            }
        ]
    },
    {
        "evaluation_id": "TC049",
        "commit_url": "https://github.com/apache/drill/commit/1c23173549ee53481316c85a65028f6ff9fb1b93",
        "jira_url": "https://issues.apache.org/jira//browse/DRILL-4935",
        "included_file_paths": [
            "exec/java-exec/src/main/java/org/apache/drill/exec/service/ServiceEngine.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "refactor: extract hostname determination into getHostName()\n\nExtract host name determination logic into a new method getHostName() to support custom host names via DRILL_HOST_NAME environment variable. Improve code modularity and readability."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Allow configurable host name for DrillbitEndpoint\n\nAdded support for custom host names via environment variable DRILL_HOST_NAME, falling back to existing behavior when not set."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "Okay, I need to write a commit message for the fourth Git diff provided. Let me look at the details.\n\nThe Git diff is from ServiceEngine.java. The changes include adding a method getHostName() which checks for an environment variable DRILL_HOST_NAME. If it's set, it uses that; otherwise, it falls back to the existing logic of using IP or hostname based on the 'useIP' flag.\n\nThe additional context is Ticket ID DRILL-4935. The issue is about allowing Drillbits to advertise a configurable host address to Zookeeper. The user wants to set a custom hostname, especially useful in Docker environments.\n\nSo, the commit type is 'feat' since it's adding a new feature. The subject should be concise, something like \"allow configuring advertised host address\".\n\nThe body needs to explain that this adds support for the DRILL_HOST_NAME environment variable, which allows custom hostnames to be advertised. It should reference the ticket ID.\n\nPutting it all together, the commit message should clearly state the feature addition and its purpose, including the ticket for context.\nfeat: allow configuring advertised host address\n\nAdd support for DRILL_HOST_NAME environment variable to specify custom host address advertised to Zookeeper [DRILL-4935]."
            }
        ]
    },
    {
        "evaluation_id": "TC050",
        "commit_url": "https://github.com/apache/drill/commit/e9afb95f161f1fec527a04458adf78add91567bc",
        "jira_url": "https://issues.apache.org/jira//browse/DRILL-8381",
        "included_file_paths": [
            "exec/java-exec/src/main/java/org/apache/drill/exec/planner/physical/AggPrelBase.java",
            "exec/java-exec/src/test/java/org/apache/drill/exec/fn/impl/TestAggregateFunctions.java"
        ],
        "generation_results": [
            {
                "generator_id": "OpenRouter Low-Level Context Generator",
                "commit_message": "feat: add support for aggregate functions with filter clauses\n\nImplement conditional aggregation using IF expressions for filtered results in COUNT functions. Added test case to validate filter behavior across multiple regions."
            },
            {
                "generator_id": "OpenRouter Zero-Shot High-Level Context Generator",
                "commit_message": "feat: Add support for filtered aggregate calls\n\nDRILL-8381: Added handling of filter conditions in aggregate calls and included a test case for filtered aggregation."
            },
            {
                "generator_id": "OpenRouter Few-Shot High-Level Context Generator",
                "commit_message": "feat: add support for filtered aggregate calls\n\nAdds handling of FILTER clauses in aggregate functions and includes tests verifying correct results [DRILL-8381]."
            }
        ]
    }
]