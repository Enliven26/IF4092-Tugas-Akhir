[
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": " class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\n class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "User Authentication and Management\n\nIntroduction to User Management\nThis section outlines the functionalities related to user authentication and management within the application. It includes user registration, login processes, and management of user roles and permissions.\n\n1. User Registration\nUsers should be able to create an account by providing necessary information such as email, username, and password. The application must validate the input and ensure that the email is unique.\n\n2. User Login\nUsers can log in using their registered credentials. The application will authenticate the user and maintain a session for subsequent requests.\n\n3. Role Management\nThe system should support different user roles, allowing administrators to assign permissions based on roles. This will facilitate controlled access to various features of the application.\n\nData Handling and Storage\n\nOverview of Data Management\nThis section describes how the application handles data storage and retrieval, ensuring that user-generated content is managed efficiently and securely.\n\n1. Image Uploads\nUsers can upload images, which are stored securely in the application. The system must handle various formats and ensure that uploaded files are scanned for security risks.\n\n2. Data Retention Policy\nThe application will implement a data retention policy where old or unused images are periodically cleaned up to optimize storage use. This process will run automatically at specified intervals.\n\n3. Backup and Recovery\nRegular backups of user data and uploaded content should be implemented to prevent data loss. The application must have a recovery process in place to restore data in case of failure.\n\nApplication Configuration and Features\n\nConfiguration Overview\nThis section details the configuration aspects of the application, ensuring that the system is scalable and maintainable while providing necessary features.\n\n1. Scheduling Tasks\nThe application will support scheduling of background tasks. This allows for automated processes, such as cleaning up old images or performing regular maintenance tasks.\n\n2. Application Properties\nConfiguration settings will be managed through application properties, allowing for customization of features such as storage paths, scheduling intervals, and security settings.\n\n3. Integration with External Services\nThe application may integrate with external services for functionalities such as image storage or user authentication. Proper configuration will ensure seamless interaction with these services.",
        "commit_message": "fix: Uploaded images are not deleted periodically TG-353"
    },
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": " class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\n class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "User Interface\n\nThe application features a settings interface that allows users to manage their account preferences. The layout is structured to provide easy navigation and accessibility to various options. Key elements include:\n\n1. Profile Picture\n   - Users can view and update their profile picture, with a circular transformation applied for aesthetic purposes.\n\n2. Version Information\n   - The current version of the application is displayed prominently, formatted for user clarity.\n\n3. Navigation Options\n   - The interface includes rows for accessing account details, editing the profile, and managing notifications, among other options.\n\nUser Actions\n\nThe settings screen allows users to perform several actions with minimal effort. Significant actions include:\n\n1. Logout\n   - Users can initiate a logout process, which prompts a confirmation dialog to ensure the action is intentional.\n\n2. Activity Transitions\n   - Tapping on various rows navigates users to corresponding activities, such as account settings, help sections, or newsletter preferences.\n\n3. Rate Us\n   - Users have the option to rate the application directly from the settings, enhancing user engagement and feedback.\n\nNotifications and Feedback\n\nThe application ensures that users receive timely feedback on their actions through various notification mechanisms. Important aspects include:\n\n1. Confirmation Prompts\n   - Users are prompted to confirm critical actions like logout, enhancing security and preventing accidental logouts.\n\n2. Real-Time Updates\n   - The interface responds in real-time to user interactions, such as displaying updated usernames and handling logout confirmations efficiently.\n\n3. Debugging Features\n   - In debug mode, additional options become visible, allowing developers to test and ensure the functionality of user interactions.",
        "commit_message": "Removing privacy from root Settings menu (#456)"
    },
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": " class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\n class InAppNotificationActivity : BRActivity(){\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "In-App Notification Management\n\nThe application provides users with in-app notifications to enhance user engagement and inform them about important updates or actions. These notifications are designed to be unobtrusive while ensuring that users are made aware of relevant information.\n\nUser Interaction with Notifications\n\n1. Dismissing Notifications  \n   Users can dismiss notifications by interacting with them directly. The system captures this action and updates the notification status accordingly, marking it as read. This ensures that users are not repeatedly notified about the same information.\n\n2. Event Tracking  \n   Each dismissal of a notification triggers an event that is recorded for analysis. This allows the application to track user interactions with notifications, providing insights into user behavior and preferences.\n\nNotification Display\n\nThe notifications are displayed prominently within the application interface, ensuring they are easily noticeable. The design prioritizes clarity and accessibility, allowing users to quickly understand the purpose of each notification.\n\nUser Experience Considerations\n\n1. Timing of Notifications  \n   Notifications are timed to appear at moments that are relevant to the user\u2019s current activity within the application. This timing helps to provide context and enhances the overall user experience.\n\n2. Visual Design  \n   The visual design of notifications adheres to the application\u2019s overall aesthetic, ensuring consistency and a cohesive user experience. Notifications are designed to be visually appealing while not distracting from the primary tasks of the user.\n\n3. User Control  \n   Users have the ability to manage their notification preferences, allowing them to customize which types of notifications they receive. This empowers users and helps to reduce notification fatigue.",
        "commit_message": "DROID-1355: Add analytics for in-app messages."
    }
]