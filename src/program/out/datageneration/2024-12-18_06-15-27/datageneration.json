[
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": "app/src/main/java/com/breadwallet/repository/MessagesRepository.kt (Before)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/repository/MessagesRepository.kt (After)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (Before)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (After)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            val notificationId = viewModel.notification.id\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId, EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "User Authentication\n\nOverview\nThis section outlines the requirements for user authentication within the application, ensuring secure access and management of user accounts.\n\n1. User Registration\n   - Users must be able to create an account using their email address and a secure password.\n   - A confirmation email should be sent to the user upon registration, requiring email verification.\n\n2. Login Process\n   - Users should have the ability to log in using their registered email and password.\n   - The system must support password recovery through a secure process that involves email verification.\n\nScheduled Image Management\n\nOverview\nThis section details the functionality for managing uploaded images, focusing on the automatic cleanup of older images from the system.\n\n1. Image Upload\n   - Users should be able to upload images through a user-friendly interface.\n   - The application must store uploaded images securely and link them to user accounts.\n\n2. Automatic Cleanup\n   - The system should automatically delete images that are older than two hours to free up storage space.\n   - A scheduled task will handle this cleanup process at regular intervals.\n\nWeb Configuration Settings\n\nOverview\nThis section describes the configuration settings necessary for the web application, including scheduling capabilities and other essential parameters.\n\n1. Scheduling Support\n   - The application must include support for scheduled tasks to manage background processes.\n   - Configuration settings should allow for the adjustment of scheduling intervals as needed.\n\n2. Property Management\n   - The application should utilize a properties management system to handle configuration settings dynamically.\n   - Users must be able to modify certain parameters without requiring a restart of the application.",
        "commit_message": "fix: Uploaded images are not deleted periodically TG-353"
    },
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": "app/src/main/java/com/breadwallet/repository/MessagesRepository.kt (Before)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/repository/MessagesRepository.kt (After)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (Before)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (After)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            val notificationId = viewModel.notification.id\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId, EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "User Interface\n\nThe SettingsActivity provides a user interface for managing user settings within the application. Upon entering the settings, users can view their profile information, including their avatar and username. The layout is designed to be straightforward and user-friendly, ensuring that all options are easily accessible.\n\nProfile Management\n\n1. Avatar Display\n   Users can see their avatar image prominently displayed, which can be updated through the profile section.\n\n2. Username\n   The current username of the user is shown, providing a quick reference for users to verify their identity.\n\n3. Edit Profile\n   Users can navigate to the Edit Profile section to make changes to their profile information.\n\nAccount Options\n\n1. Logout Functionality\n   A logout option is readily available, allowing users to exit their accounts swiftly and securely.\n\n2. Notifications\n   Users can access notification settings to customize their preferences regarding alerts and updates from the application.\n\n3. Help Section\n   A dedicated help section is provided to assist users with any questions or issues they may encounter while using the application.",
        "commit_message": "Removing privacy from root Settings menu (#456)"
    },
    {
        "diff": "diff --git a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\nindex 470821ebe..03de4e4bb 100644\n--- a/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n+++ b/app/src/main/java/com/breadwallet/repository/MessagesRepository.kt\n@@ -28,6 +28,7 @@ import android.content.Context\n import android.util.Log\n import com.breadwallet.model.InAppMessage\n import com.breadwallet.tools.manager.BRSharedPrefs\n+import com.breadwallet.tools.util.EventUtils\n import com.platform.network.InAppMessagesClient\n \n /**\n@@ -56,6 +57,8 @@ object MessagesRepository {\n         // for notifications.\n         val inAppMessage = inAppMessages[0]\n         Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n         return inAppMessage\n     }\n \ndiff --git a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\nindex 66f470850..9c5294ff5 100644\n--- a/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n+++ b/app/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt\n@@ -49,6 +49,8 @@ class InAppNotificationActivity : BRActivity() {\n         private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n \n         fun start(context: Context, notification: InAppMessage) {\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n             val intent = Intent(context, InAppNotificationActivity::class.java).apply {\n                 putExtra(EXT_NOTIFICATION, notification)\n             }\n@@ -70,6 +72,10 @@ class InAppNotificationActivity : BRActivity() {\n         notification_btn.setOnClickListener {\n             viewModel.markAsRead()\n             val actionUrl = viewModel.notification.actionButtonUrl\n+            val notificationId = viewModel.notification.id\n+            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON,\n+                    mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId,\n+                            EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n             if (!actionUrl.isNullOrEmpty()) {\n                 if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                     AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n@@ -89,6 +95,8 @@ class InAppNotificationActivity : BRActivity() {\n     override fun onBackPressed() {\n         super.onBackPressed()\n         viewModel.markAsRead()\n+        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED,\n+                mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n     }\n \n }\n\\ No newline at end of file\n",
        "source_code": "app/src/main/java/com/breadwallet/repository/MessagesRepository.kt (Before)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/repository/MessagesRepository.kt (After)\n object MessagesRepository : {\n    fun getInAppNotification(context: Context): InAppMessage? {\n        Log.d(TAG, \"getInAppNotification: Looking for new in app notifications\")\n        val readMessages = BRSharedPrefs.getReadInAppNotificationIds(context)\n        val inAppMessages = InAppMessagesClient.fetchMessages(context, InAppMessage.Type.IN_APP_NOTIFICATION).filterNot { readMessages.contains(it.messageId) }\n        if (inAppMessages.isEmpty()) {\n            Log.d(TAG, \"getInAppNotification: There are no new notifications\")\n            return null\n        }\n        val inAppMessage = inAppMessages[0]\n        Log.d(TAG, \"getInAppNotification: ${inAppMessage.title}\")\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_RECEIVED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to inAppMessage.id))\n        return inAppMessage\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (Before)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n    }\n}\napp/src/main/java/com/breadwallet/ui/notification/InAppNotificationActivity.kt (After)\n class InAppNotificationActivity : BRActivity(){\n    companion object {\n        private val TAG: String = InAppNotificationActivity::class.java.simpleName\n\n        private const val EXT_NOTIFICATION = \"com.breadwallet.ui.notification.EXT_NOTIFICATION\"\n\n        fun start(context: Context, notification: InAppMessage) {\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_APPEARED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notification.id))\n            val intent = Intent(context, InAppNotificationActivity::class.java).apply { putExtra(EXT_NOTIFICATION, notification) }\n            context.startActivity(intent)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_in_app_notification)\n        close_button.setOnClickListener { onBackPressed() }\n        notification_btn.setOnClickListener {\n            viewModel.markAsRead()\n            val actionUrl = viewModel.notification.actionButtonUrl\n            val notificationId = viewModel.notification.id\n            EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_CTA_BUTTON, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to notificationId, EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_CTA_URL to actionUrl))\n            if (!actionUrl.isNullOrEmpty()) {\n                if (AppEntryPointHandler.isDeepLinkPlatformUrl(actionUrl)) {\n                    AppEntryPointHandler.processPlatformDeepLinkingUrl(this, actionUrl)\n                } else {\n                    startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(actionUrl)))\n                }\n            }\n            finish()\n        }\n        notification_title.text = viewModel.notification.title\n        notification_body.text = viewModel.notification.body\n        notification_btn.text = viewModel.notification.actionButtonText\n        Picasso.get().load(viewModel.notification.imageUrl).into(notification_image)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        viewModel.markAsRead()\n        EventUtils.pushEvent(EventUtils.EVENT_IN_APP_NOTIFICATION_DISMISSED, mapOf(EventUtils.EVENT_ATTRIBUTE_NOTIFICATION_ID to viewModel.notification.id))\n    }\n}",
        "high_level_context": "User Notifications\n\nThe application aims to enhance user engagement by providing in-app notifications that deliver timely information and prompts to users. Notifications can be related to updates, actions required from the user, or other relevant messages that enhance the user experience.\n\n1. In-App Notification Retrieval\n   The system will retrieve notifications that have not been marked as read by the user. Notifications are fetched from a remote source and filtered based on their read status. If new notifications are available, the system will log the details for tracking purposes and prepare the notifications for display.\n\n2. User Interaction with Notifications\n   Upon receiving an in-app notification, users can interact with the notification through designated buttons. This interaction includes marking notifications as read and potentially navigating to relevant content or actions through deep links or web URLs. \n\nNotification Display and Management\n\nThe application provides a dedicated interface for displaying in-app notifications. This interface is designed to ensure users can easily view and act on notifications while maintaining a seamless experience.\n\n1. Notification Activity\n   The notification activity is responsible for showing the details of each notification, including the title, body, and any associated actions. Users have the option to dismiss notifications or take action directly from this screen.\n\n2. Event Tracking\n   The application tracks key events related to user interactions with notifications. These events include when a notification is displayed, when an action button is pressed, and when a notification is dismissed. This tracking helps to analyze user behavior and optimize future notifications.\n\nEvent Handling and User Feedback\n\nThe system incorporates event handling to respond to user actions related to notifications, ensuring that actions are recorded and appropriate feedback is provided to users.\n\n1. Event Logging\n   Each significant user interaction with notifications is logged to provide insights into user engagement. This includes logging when notifications are received, interacted with, and dismissed.\n\n2. User Feedback Mechanism\n   Feedback mechanisms are integrated into the notification flow, allowing the application to respond to user actions effectively. This includes visual cues for successfully marked notifications and appropriate redirection based on the user's actions.",
        "commit_message": "DROID-1355: Add analytics for in-app messages."
    }
]