[
    "diff --git a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\n@@ -8,6 +8,7 @@ import ru.surfstudio.android.core.app.ActiveActivityHolder\nimport ru.surfstudio.android.core.app.StringsProvider\nimport ru.surfstudio.android.core.ui.navigation.activity.navigator.GlobalNavigator\nimport ru.surfstudio.android.dagger.scope.PerApplication\n+import ru.surfstudio.android.notification.PushHandler\nimport ru.surfstudio.android.notification.interactor.push.storage.FcmStorage\nimport ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\nimport ru.surfstudio.android.shared.pref.NO_BACKUP_SHARED_PREF\n@@ -20,6 +21,7 @@ import ru.surfstudio.standard.app_injector.network.OkHttpModule\nimport ru.surfstudio.standard.app_injector.network.cache.CacheModule\nimport ru.surfstudio.standard.app_injector.ui.notification.FcmModule\nimport ru.surfstudio.standard.app_injector.ui.notification.MessagingService\n+import ru.surfstudio.standard.app_injector.ui.notification.NotificationModule\nimport ru.surfstudio.standard.i_initialization.InitializeAppInteractor\nimport ru.surfstudio.standard.i_session.SessionChangedInteractor\nimport javax.inject.Named\n@@ -35,7 +37,8 @@ import javax.inject.Named\nNetworkModule::class,\nOkHttpModule::class,\nCacheModule::class,\n- FcmModule::class])\n+ FcmModule::class,\n+ NotificationModule::class])\ninterface AppComponent {\nfun initializeAppInteractor(): InitializeAppInteractor\nfun context(): Context\n@@ -46,6 +49,7 @@ interface AppComponent {\nfun stringsProvider(): StringsProvider\nfun globalNavigator(): GlobalNavigator\nfun fcmStorage(): FcmStorage\n+ fun pushHandler(): PushHandler\nfun inject(to: MessagingService)\n@Named(NO_BACKUP_SHARED_PREF) fun sharedPreferences(): SharedPreferences\n\n\ndiff --git a/None b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/FirebaseServiceComponent.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/FirebaseServiceComponent.kt\n+package ru.surfstudio.standard.app_injector.ui.notification\n+\n+\n+import dagger.Component\n+import ru.surfstudio.android.notification.interactor.push.storage.FcmStorage\n+import ru.surfstudio.standard.app_injector.AppComponent\n+import javax.inject.Scope\n+\n+@PerService\n+@Component(dependencies = [AppComponent::class])\n+interface FirebaseServiceComponent {\n+\n+ fun fcmStorage(): FcmStorage\n+\n+ fun inject(s: MessagingService)\n+}\n+\n+@Scope\n+@Retention(AnnotationRetention.RUNTIME)\n+annotation class PerService\n\\ No newline at end of file\n\n\ndiff --git a/None b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/NotificationModule.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/NotificationModule.kt\n+package ru.surfstudio.standard.app_injector.ui.notification\n+\n+import dagger.Module\n+import dagger.Provides\n+import ru.surfstudio.android.core.app.ActiveActivityHolder\n+import ru.surfstudio.android.dagger.scope.PerApplication\n+import ru.surfstudio.android.notification.PushHandler\n+import ru.surfstudio.android.notification.impl.DefaultPushHandler\n+import ru.surfstudio.android.notification.interactor.push.PushInteractor\n+import ru.surfstudio.android.notification.ui.notification.AbstractPushHandleStrategyFactory\n+\n+@Module\n+class NotificationModule {\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushInteractor() = PushInteractor()\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushHandleStrategyFactory(): AbstractPushHandleStrategyFactory =\n+ PushHandleStrategyFactory\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushHandler(\n+ activeActivityHolder: ActiveActivityHolder,\n+ pushHandleStrategyFactory: AbstractPushHandleStrategyFactory,\n+ pushInteractor: PushInteractor\n+ ): PushHandler =\n+ DefaultPushHandler(\n+ activeActivityHolder,\n+ pushHandleStrategyFactory,\n+ pushInteractor\n+ )\n+\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\nindex 0000000..0000000 100644\n--- a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\n+++ b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\npackage ru.surfstudio.android.animations.sample\nimport android.os.Bundle\n+import android.os.Handler\n+import android.util.Log\nimport android.view.Gravity\n+import android.view.ViewGroup\n+import android.widget.FrameLayout\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport com.google.android.material.snackbar.Snackbar\n+import com.jakewharton.scalpel.ScalpelFrameLayout\nimport kotlinx.android.synthetic.main.activity_main.*\nimport ru.surfstudio.android.animations.anim.*\nimport ru.surfstudio.android.animations.behaviors.BottomButtonBehavior\n@@ -15,6 +20,23 @@ class MainActivity : AppCompatActivity() {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n+ Handler().postDelayed({\n+ val scalpel = ScalpelFrameLayout(this)\n+ val content = this.findViewById<ViewGroup>(android.R.id.content)\n+ val childViews = (0..content.childCount - 1)\n+ .map { content.getChildAt(it) }\n+ .toList()\n+ Log.d(\"AAA\", childViews.toString())\n+ content.removeAllViews()\n+ content.addView(scalpel,\n+ FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,\n+ FrameLayout.LayoutParams.MATCH_PARENT))\n+ childViews.forEach { scalpel.addView(it) }\n+ scalpel.isLayerInteractionEnabled = true\n+ }, 1000)\n+\n+\n+\nval params = bottom_btn.layoutParams as CoordinatorLayout.LayoutParams\nparams.behavior = BottomButtonBehavior()\n\n",
    "diff --git a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\nindex 0000000..0000000 100644\n--- a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\n+++ b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\npackage ru.surfstudio.android.animations.sample\n+import android.app.Activity\n+import android.app.Application\n+import android.hardware.SensorManager\nimport android.os.Bundle\nimport android.os.Handler\nimport android.util.Log\n@@ -9,10 +12,12 @@ import android.widget.FrameLayout\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport com.google.android.material.snackbar.Snackbar\n-import com.jakewharton.scalpel.ScalpelFrameLayout\nimport kotlinx.android.synthetic.main.activity_main.*\nimport ru.surfstudio.android.animations.anim.*\nimport ru.surfstudio.android.animations.behaviors.BottomButtonBehavior\n+import ru.surfstudio.android.core.app.DefaultActivityLifecycleCallbacks\n+import ru.surfstudio.android.sample.dagger.app.DefaultApp\n+import java.util.logging.Logger\nclass MainActivity : AppCompatActivity() {\n@@ -20,7 +25,9 @@ class MainActivity : AppCompatActivity() {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n- Handler().postDelayed({\n+ val scalpelEnabled = false\n+\n+ val shakeDetector = ShakeDetector {\nval scalpel = ScalpelFrameLayout(this)\nval content = this.findViewById<ViewGroup>(android.R.id.content)\nval childViews = (0..content.childCount - 1)\n@@ -33,10 +40,29 @@ class MainActivity : AppCompatActivity() {\nFrameLayout.LayoutParams.MATCH_PARENT))\nchildViews.forEach { scalpel.addView(it) }\nscalpel.isLayerInteractionEnabled = true\n+ //scalpel.setDrawIds(true)\n+ ru.surfstudio.android.logger.Logger.d(\"AAA\", \"Shake\")\n+ }\n+ val app = (this.applicationContext as DefaultApp)\n+ app.registerActivityLifecycleCallbacks(object : DefaultActivityLifecycleCallbacks() {\n+ override fun onActivityResumed(activity: Activity) {\n+ shakeDetector.start(app.getSystemService(SENSOR_SERVICE) as SensorManager)\n+ shakeDetector.setSensitivity(ShakeDetector.SENSITIVITY_LIGHT)\n+ }\n+\n+ override fun onActivityPaused(activity: Activity) {\n+ shakeDetector.stop()\n+\n+ }\n+ })\n+\n+ Handler().postDelayed({\n+\n}, 1000)\n+\nval params = bottom_btn.layoutParams as CoordinatorLayout.LayoutParams\nparams.behavior = BottomButtonBehavior()\n\n\ndiff --git a/None b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelManager.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelManager.kt\n+package ru.surfstudio.android.animations.sample\n+\n+import android.app.Activity\n+import android.app.Application\n+import android.hardware.SensorManager\n+import android.util.Log\n+import android.view.ViewGroup\n+import android.widget.FrameLayout\n+import androidx.appcompat.app.AppCompatActivity\n+import io.reactivex.subjects.PublishSubject\n+import ru.surfstudio.android.core.app.DefaultActivityLifecycleCallbacks\n+import java.util.concurrent.TimeUnit\n+\n+class ScalpelManager {\n+ val shakeDetectedSubject = PublishSubject.create<Long>()\n+ var currentActivity : Activity? = null\n+\n+ lateinit var shakeDetector : ShakeDetector\n+\n+ fun init(app: Application){\n+\n+ initShakeDetector()\n+ listenActivityLifecycle(app)\n+ listenShake()\n+ }\n+\n+ private fun initShakeDetector() {\n+ shakeDetector = ShakeDetector {\n+ shakeDetectedSubject.onNext(System.currentTimeMillis())\n+ val scalpel = ScalpelFrameLayout(this)\n+ val content = this.findViewById<ViewGroup>(android.R.id.content)\n+ val childViews = (0..content.childCount - 1)\n+ .map { content.getChildAt(it) }\n+ .toList()\n+ Log.d(\"AAA\", childViews.toString())\n+ content.removeAllViews()\n+ content.addView(scalpel,\n+ FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,\n+ FrameLayout.LayoutParams.MATCH_PARENT))\n+ childViews.forEach { scalpel.addView(it) }\n+ scalpel.isLayerInteractionEnabled = true\n+ //scalpel.setDrawIds(true)\n+ ru.surfstudio.android.logger.Logger.d(\"AAA\", \"Shake\")\n+ }\n+ shakeDetector.setSensitivity(ShakeDetector.SENSITIVITY_MEDIUM)\n+ }\n+\n+ private fun listenShake() {\n+ shakeDetectedSubject.buffer(1000, TimeUnit.MILLISECONDS)\n+ .subscribe {\n+ if (it.size >= 3) {\n+ toggleScalpel()\n+ }\n+ }\n+ }\n+\n+ private fun toggleScalpel() {\n+\n+\n+ }\n+\n+ private fun listenActivityLifecycle(app: Application) {\n+ app.registerActivityLifecycleCallbacks(object : DefaultActivityLifecycleCallbacks() {\n+ override fun onActivityResumed(activity: Activity) {\n+ currentActivity = activity\n+ shakeDetector.start(app.getSystemService(AppCompatActivity.SENSOR_SERVICE) as SensorManager)\n+ }\n+\n+ override fun onActivityPaused(activity: Activity) {\n+ currentActivity = null\n+ shakeDetector.stop()\n+\n+ }\n+ })\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelWidget.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelWidget.kt\n+package ru.surfstudio.android.animations.sample\n+\n+import android.content.Context\n+import android.widget.FrameLayout\n+\n+class ScalpelWidget(val context: Context) : FrameLayout(context) {\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelManager.kt b/None\nindex 0000000..0000000 100644\n--- a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelManager.kt\n+++ b/None\n-package ru.surfstudio.android.animations.sample\n-\n-import android.app.Activity\n-import android.app.Application\n-import android.hardware.SensorManager\n-import android.util.Log\n-import android.view.ViewGroup\n-import android.widget.FrameLayout\n-import androidx.appcompat.app.AppCompatActivity\n-import io.reactivex.subjects.PublishSubject\n-import ru.surfstudio.android.core.app.DefaultActivityLifecycleCallbacks\n-import java.util.concurrent.TimeUnit\n-\n-class ScalpelManager {\n- val shakeDetectedSubject = PublishSubject.create<Long>()\n- var currentActivity : Activity? = null\n-\n- lateinit var shakeDetector : ShakeDetector\n-\n- fun init(app: Application){\n-\n- initShakeDetector()\n- listenActivityLifecycle(app)\n- listenShake()\n- }\n-\n- private fun initShakeDetector() {\n- shakeDetector = ShakeDetector {\n- shakeDetectedSubject.onNext(System.currentTimeMillis())\n- val scalpel = ScalpelFrameLayout(this)\n- val content = this.findViewById<ViewGroup>(android.R.id.content)\n- val childViews = (0..content.childCount - 1)\n- .map { content.getChildAt(it) }\n- .toList()\n- Log.d(\"AAA\", childViews.toString())\n- content.removeAllViews()\n- content.addView(scalpel,\n- FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,\n- FrameLayout.LayoutParams.MATCH_PARENT))\n- childViews.forEach { scalpel.addView(it) }\n- scalpel.isLayerInteractionEnabled = true\n- //scalpel.setDrawIds(true)\n- ru.surfstudio.android.logger.Logger.d(\"AAA\", \"Shake\")\n- }\n- shakeDetector.setSensitivity(ShakeDetector.SENSITIVITY_MEDIUM)\n- }\n-\n- private fun listenShake() {\n- shakeDetectedSubject.buffer(1000, TimeUnit.MILLISECONDS)\n- .subscribe {\n- if (it.size >= 3) {\n- toggleScalpel()\n- }\n- }\n- }\n-\n- private fun toggleScalpel() {\n-\n-\n- }\n-\n- private fun listenActivityLifecycle(app: Application) {\n- app.registerActivityLifecycleCallbacks(object : DefaultActivityLifecycleCallbacks() {\n- override fun onActivityResumed(activity: Activity) {\n- currentActivity = activity\n- shakeDetector.start(app.getSystemService(AppCompatActivity.SENSOR_SERVICE) as SensorManager)\n- }\n-\n- override fun onActivityPaused(activity: Activity) {\n- currentActivity = null\n- shakeDetector.stop()\n-\n- }\n- })\n- }\n-}\n\\ No newline at end of file\n\n",
    "diff --git a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\nindex 0000000..0000000 100644\n--- a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\n+++ b/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/MainActivity.kt\npackage ru.surfstudio.android.animations.sample\n-import android.app.Activity\n-import android.app.Application\n-import android.hardware.SensorManager\nimport android.os.Bundle\n-import android.os.Handler\n-import android.util.Log\nimport android.view.Gravity\n-import android.view.ViewGroup\n-import android.widget.FrameLayout\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport com.google.android.material.snackbar.Snackbar\nimport kotlinx.android.synthetic.main.activity_main.*\nimport ru.surfstudio.android.animations.anim.*\nimport ru.surfstudio.android.animations.behaviors.BottomButtonBehavior\n-import ru.surfstudio.android.core.app.DefaultActivityLifecycleCallbacks\n-import ru.surfstudio.android.sample.dagger.app.DefaultApp\n-import java.util.logging.Logger\nclass MainActivity : AppCompatActivity() {\n@@ -25,44 +15,6 @@ class MainActivity : AppCompatActivity() {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n- val scalpelEnabled = false\n-\n- val shakeDetector = ShakeDetector {\n- val scalpel = ScalpelFrameLayout(this)\n- val content = this.findViewById<ViewGroup>(android.R.id.content)\n- val childViews = (0..content.childCount - 1)\n- .map { content.getChildAt(it) }\n- .toList()\n- Log.d(\"AAA\", childViews.toString())\n- content.removeAllViews()\n- content.addView(scalpel,\n- FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,\n- FrameLayout.LayoutParams.MATCH_PARENT))\n- childViews.forEach { scalpel.addView(it) }\n- scalpel.isLayerInteractionEnabled = true\n- //scalpel.setDrawIds(true)\n- ru.surfstudio.android.logger.Logger.d(\"AAA\", \"Shake\")\n- }\n- val app = (this.applicationContext as DefaultApp)\n- app.registerActivityLifecycleCallbacks(object : DefaultActivityLifecycleCallbacks() {\n- override fun onActivityResumed(activity: Activity) {\n- shakeDetector.start(app.getSystemService(SENSOR_SERVICE) as SensorManager)\n- shakeDetector.setSensitivity(ShakeDetector.SENSITIVITY_LIGHT)\n- }\n-\n- override fun onActivityPaused(activity: Activity) {\n- shakeDetector.stop()\n-\n- }\n- })\n-\n- Handler().postDelayed({\n-\n- }, 1000)\n-\n-\n-\n-\nval params = bottom_btn.layoutParams as CoordinatorLayout.LayoutParams\nparams.behavior = BottomButtonBehavior()\n\n\ndiff --git a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelWidget.kt b/None\nindex 0000000..0000000 100644\n--- a/animations-sample/src/main/java/ru/surfstudio/android/animations/sample/ScalpelWidget.kt\n+++ b/None\n-package ru.surfstudio.android.animations.sample\n-\n-import android.content.Context\n-import android.widget.FrameLayout\n-\n-class ScalpelWidget(val context: Context) : FrameLayout(context) {\n-}\n\\ No newline at end of file\n\n",
    "diff --git a/None b/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt\n+package ru.surfstudio.standard.util\n+\n+import org.junit.Test\n+import org.junit.runners.model.FrameworkMethod\n+import org.junit.runners.model.Statement\n+import org.robolectric.RobolectricTestRunner\n+import java.lang.RuntimeException\n+\n+class ApiTestRunner(testClass: Class<*>?) : RobolectricTestRunner(testClass) {\n+\n+ companion object {\n+ private const val CHECK_API_TESTS_CONSOLE_PARAMETER = \"check_api\" // -Dcheck_api\n+ private const val WAIT_API_TESTS_CONSOLE_PARAMETER = \"wait_api\" // -Dwait_api\n+ }\n+\n+ private var runCheckApiTests: Boolean = false\n+ private var runWaitApiTest: Boolean = false\n+\n+\n+ override fun methodBlock(method: FrameworkMethod): Statement {\n+ val defaultInvoker = super.methodBlock(method)\n+ return object : Statement() {\n+ override fun evaluate() {\n+ if (isMethodWithAnnotation(method, WaitApiTest::class.java)) {\n+ var failed = false\n+ try {\n+ defaultInvoker.evaluate()\n+ } catch (e: Throwable) {\n+ System.err.println(\"Error occurred, when test with annotation @WaitApiTest is executing. It's normal.\")\n+ e.printStackTrace()\n+ failed = true\n+ }\n+ if (!failed) {\n+ throw WaitApiTestPassExceprtion()\n+ }\n+ } else {\n+ defaultInvoker.evaluate()\n+ }\n+ }\n+ }\n+ }\n+\n+ override fun computeTestMethods(): MutableList<FrameworkMethod> {\n+ extractInputParameters()\n+ checkStandardTestMethods()\n+ val methods = mutableListOf<FrameworkMethod>()\n+ if (runCheckApiTests) {\n+ methods.addAll(testClass.getAnnotatedMethods(CheckApiTest::class.java))\n+ }\n+ if (runWaitApiTest) {\n+ methods.addAll(testClass.getAnnotatedMethods(WaitApiTest::class.java))\n+ }\n+ checkMethodsContainsStandardTestAnnotation(methods)\n+ return methods\n+ }\n+\n+ private fun checkMethodsContainsStandardTestAnnotation(methods: MutableList<FrameworkMethod>) {\n+ val badMethods = methods.asSequence().filter { !isMethodWithAnnotation(it, Test::class.java) }.toList()\n+ if (badMethods.isNotEmpty()) {\n+ val badMethodsStr = badMethods.asSequence().map { it.name }.reduce { left, right -> \"$left, $right\" }\n+ throw RuntimeException(\"Api test methods must have @test annotation. Wrong methods: $badMethodsStr\")\n+ }\n+\n+ }\n+\n+ private fun extractInputParameters() {\n+ runCheckApiTests = System.getProperty(CHECK_API_TESTS_CONSOLE_PARAMETER) != null\n+ runWaitApiTest = System.getProperty(WAIT_API_TESTS_CONSOLE_PARAMETER) != null\n+ if (!runCheckApiTests && !runWaitApiTest) {\n+ //run all when not configured via parameter\n+ runCheckApiTests = true\n+ runWaitApiTest = true\n+ }\n+ }\n+\n+ private fun checkStandardTestMethods() {\n+ val methods = testClass.getAnnotatedMethods(Test::class.java)\n+ methods.forEach {\n+ if (!isMethodWithAnnotation(it, WaitApiTest::class.java) &&\n+ !isMethodWithAnnotation(it, CheckApiTest::class.java)) {\n+ throw RuntimeException(\"Api Test class cannot contains test method without \" +\n+ \"@WaitApiTest and @CheckApiTest annotations, wrong method: \" + it.name)\n+ }\n+ }\n+ }\n+\n+ private fun isMethodWithAnnotation(method: FrameworkMethod, annotationClass: Class<out Annotation>) =\n+ method.method.declaredAnnotations.map { it.annotationClass.java }.toList().contains(annotationClass)\n+\n+\n+}\n\\ No newline at end of file\n\n\ndiff --git a/template/app-injector/src/test/java/ru/surfstudio/standard/util/BaseNetworkDaggerTest.kt b/template/app-injector/src/test/java/ru/surfstudio/standard/util/BaseNetworkDaggerTest.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/test/java/ru/surfstudio/standard/util/BaseNetworkDaggerTest.kt\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/BaseNetworkDaggerTest.kt\n@@ -19,9 +19,6 @@ import ru.surfstudio.android.logger.logging_strategies.impl.test.TestLoggingStra\nimport ru.surfstudio.standard.app_injector.App\nimport ru.surfstudio.standard.app_injector.AppModule\n-@RunWith(RobolectricTestRunner::class)\n-@Config(application = App::class,\n- sdk = [Build.VERSION_CODES.O_MR1])\nabstract class BaseNetworkDaggerTest {\ncompanion object {\n\n\ndiff --git a/None b/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt\n+package ru.surfstudio.standard.util\n+\n+import android.os.Build\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.robolectric.annotation.Config\n+import ru.surfstudio.standard.app_injector.App\n+\n+@RunWith(ApiTestRunner::class)\n+@Config(application = App::class,\n+ sdk = [Build.VERSION_CODES.O_MR1])\n+class SampleApiTest : BaseNetworkDaggerTest() {\n+\n+ override fun inject(networkComponent: TestNetworkAppComponent) {\n+ networkComponent.inject(this)\n+ }\n+\n+ @Test\n+ @CheckApiTest\n+ fun testOne() {\n+ System.out.println(\"one\")\n+\n+ val i = 0\n+ }\n+\n+ @Test\n+ @WaitApiTest\n+ fun waitTestOne() {\n+ System.out.println(\"wait one\")\n+ throw RuntimeException(\"Test fail 11111\")\n+ }\n+\n+ @Test\n+ @WaitApiTest\n+ fun waitTes3() {\n+ System.out.println(\"3\")\n+ //throw RuntimeException(\"Test fail 11111\")\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/template/app-injector/src/test/java/ru/surfstudio/standard/util/TestNetworkAppComponent.kt b/template/app-injector/src/test/java/ru/surfstudio/standard/util/TestNetworkAppComponent.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/test/java/ru/surfstudio/standard/util/TestNetworkAppComponent.kt\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/TestNetworkAppComponent.kt\n@@ -17,4 +17,5 @@ import ru.surfstudio.standard.app_injector.network.cache.CacheModule\nCacheModule::class])\ninterface TestNetworkAppComponent {\nfun inject(test: BaseNetworkDaggerTest)\n+ fun inject(test: SampleApiTest)\n}\n\\ No newline at end of file\n\n\ndiff --git a/None b/template/app-injector/src/test/java/ru/surfstudio/standard/util/WaitApiTestPassExceprtion.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/WaitApiTestPassExceprtion.kt\n+package ru.surfstudio.standard.util\n+\n+import java.lang.RuntimeException\n+\n+class WaitApiTestPassExceprtion : RuntimeException(\n+ \"Test with annotation @WaitApiTest is finished without exception. \" +\n+ \"If api method is working now, change annotation to @CheckApiTest\")\n\\ No newline at end of file\n\n",
    "diff --git a/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt b/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/ApiTestRunner.kt\n@@ -14,7 +14,7 @@ class ApiTestRunner(testClass: Class<*>?) : RobolectricTestRunner(testClass) {\n}\nprivate var runCheckApiTests: Boolean = false\n- private var runWaitApiTest: Boolean = false\n+ private var runWaitApiTests: Boolean = false\noverride fun methodBlock(method: FrameworkMethod): Statement {\n@@ -26,7 +26,7 @@ class ApiTestRunner(testClass: Class<*>?) : RobolectricTestRunner(testClass) {\ntry {\ndefaultInvoker.evaluate()\n} catch (e: Throwable) {\n- System.err.println(\"Error occurred, when test with annotation @WaitApiTest is executing. It's normal.\")\n+ System.err.println(\"Error occurred when test with annotation @WaitApiTest is executing. It's normal.\")\ne.printStackTrace()\nfailed = true\n}\n@@ -42,15 +42,19 @@ class ApiTestRunner(testClass: Class<*>?) : RobolectricTestRunner(testClass) {\noverride fun computeTestMethods(): MutableList<FrameworkMethod> {\nextractInputParameters()\n- checkStandardTestMethods()\nval methods = mutableListOf<FrameworkMethod>()\nif (runCheckApiTests) {\n- methods.addAll(testClass.getAnnotatedMethods(CheckApiTest::class.java))\n+ methods.addAll(testClass.getAnnotatedMethods(Test::class.java)\n+ .asSequence()\n+ .filter { !isMethodWithAnnotation(it, WaitApiTest::class.java) }\n+ .toList())\n}\n- if (runWaitApiTest) {\n- methods.addAll(testClass.getAnnotatedMethods(WaitApiTest::class.java))\n+ if (runWaitApiTests) {\n+ val waitApiMethods = testClass.getAnnotatedMethods(WaitApiTest::class.java)\n+ checkMethodsContainsStandardTestAnnotation(waitApiMethods)\n+ methods.addAll(waitApiMethods)\n}\n- checkMethodsContainsStandardTestAnnotation(methods)\n+\nreturn methods\n}\n@@ -58,29 +62,18 @@ class ApiTestRunner(testClass: Class<*>?) : RobolectricTestRunner(testClass) {\nval badMethods = methods.asSequence().filter { !isMethodWithAnnotation(it, Test::class.java) }.toList()\nif (badMethods.isNotEmpty()) {\nval badMethodsStr = badMethods.asSequence().map { it.name }.reduce { left, right -> \"$left, $right\" }\n- throw RuntimeException(\"Api test methods must have @test annotation. Wrong methods: $badMethodsStr\")\n+ throw RuntimeException(\"Api test methods must have @Test annotation. Wrong methods: $badMethodsStr\")\n}\n}\nprivate fun extractInputParameters() {\nrunCheckApiTests = System.getProperty(CHECK_API_TESTS_CONSOLE_PARAMETER) != null\n- runWaitApiTest = System.getProperty(WAIT_API_TESTS_CONSOLE_PARAMETER) != null\n- if (!runCheckApiTests && !runWaitApiTest) {\n+ runWaitApiTests = System.getProperty(WAIT_API_TESTS_CONSOLE_PARAMETER) != null\n+ if (!runCheckApiTests && !runWaitApiTests) {\n//run all when not configured via parameter\nrunCheckApiTests = true\n- runWaitApiTest = true\n- }\n- }\n-\n- private fun checkStandardTestMethods() {\n- val methods = testClass.getAnnotatedMethods(Test::class.java)\n- methods.forEach {\n- if (!isMethodWithAnnotation(it, WaitApiTest::class.java) &&\n- !isMethodWithAnnotation(it, CheckApiTest::class.java)) {\n- throw RuntimeException(\"Api Test class cannot contains test method without \" +\n- \"@WaitApiTest and @CheckApiTest annotations, wrong method: \" + it.name)\n- }\n+ runWaitApiTests = true\n}\n}\n\n\ndiff --git a/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt b/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt\n+++ b/template/app-injector/src/test/java/ru/surfstudio/standard/util/SampleApiTest.kt\n@@ -16,7 +16,6 @@ class SampleApiTest : BaseNetworkDaggerTest() {\n}\n@Test\n- @CheckApiTest\nfun testOne() {\nSystem.out.println(\"one\")\n\n",
    "diff --git a/shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt b/shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\nindex 0000000..0000000 100644\n--- a/shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n+++ b/shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n@@ -103,6 +103,10 @@ object SettingsUtil {\nreturn sp.getLong(key, EMPTY_LONG_SETTING)\n}\n+ fun getLong(sp: SharedPreferences, key: String, defaultValue: Long): Long {\n+ return sp.getLong(key, defaultValue)\n+ }\n+\nfun putBoolean(sp: SharedPreferences, key: String, value: Boolean) {\nval editor = sp.edit()\neditor.putBoolean(key, value)\n\n\ndiff --git a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/common_widgets/TitleSubtitleSwitch.kt b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/common_widgets/TitleSubtitleSwitch.kt\nindex 0000000..0000000 100644\n--- a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/common_widgets/TitleSubtitleSwitch.kt\n+++ b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/common_widgets/TitleSubtitleSwitch.kt\n@@ -58,10 +58,10 @@ class TitleSubtitleSwitch(context: Context, attrs: AttributeSet) : ConstraintLay\ntypedArray.recycle()\n}\n- fun setOnCheckedChangeListener(listener: ((CompoundButton, Boolean) -> Unit)) {\n- value_switch.setOnCheckedChangeListener { buttonView, isChecked ->\n- onCheckedChangeListener.onCheckedChanged(buttonView, isChecked)\n- listener(buttonView, isChecked)\n+ fun setOnCheckedChangeListener(listener: (CompoundButton, Boolean) -> Unit) {\n+ value_switch.setOnClickListener {\n+ onCheckedChangeListener.onCheckedChanged(value_switch, value_switch.isChecked)\n+ listener(value_switch, isChecked)\n}\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/server_settings/ServerSettingsDebugActivityView.kt b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/server_settings/ServerSettingsDebugActivityView.kt\nindex 0000000..0000000 100644\n--- a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/server_settings/ServerSettingsDebugActivityView.kt\n+++ b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/server_settings/ServerSettingsDebugActivityView.kt\npackage ru.surfstudio.standard.f_debug.server_settings\n+import android.os.Bundle\n+import android.os.PersistableBundle\n+import com.jakewharton.rxbinding2.widget.RxProgressBar\n+import com.jakewharton.rxbinding2.widget.RxSeekBar\nimport kotlinx.android.synthetic.main.activity_server_settings_debug.*\nimport ru.surfstudio.android.core.mvp.activity.BaseRenderableActivityView\nimport ru.surfstudio.android.template.f_debug.R\n@@ -26,15 +30,22 @@ class ServerSettingsDebugActivityView : BaseRenderableActivityView<ServerSetting\noverride fun renderInternal(sm: ServerSettingsDebugScreenModel) {\nserver_settings_chuck_switch.setChecked(sm.isChuckEnabled)\nserver_settings_test_server_switch.setChecked(sm.isTestServerEnabled)\n- addCheckedChangeListener()\n+ server_settings_request_delay_tv.text = getString(R.string.server_settings_request_delay_text, sm.requestDelaySeconds)\n+ server_settings_request_delay_seek_bar.progress = sm.requestDelayCoefficient\n}\n- private fun addCheckedChangeListener() {\n- server_settings_chuck_switch.setOnCheckedChangeListener { _, _ ->\n- presenter.setChuckEnabled(server_settings_chuck_switch.isChecked())\n+ override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?, viewRecreated: Boolean) {\n+ super.onCreate(savedInstanceState, persistentState, viewRecreated)\n+ initListeners()\n+ }\n+\n+ private fun initListeners() {\n+ server_settings_chuck_switch.setOnCheckedChangeListener { _, isEnabled ->\n+ presenter.setChuckEnabled(isEnabled)\n}\nserver_settings_test_server_switch.setOnCheckedChangeListener { _, isEnabled ->\npresenter.setTestServerEnabled(isEnabled)\n}\n+ presenter.requestDelayCoefficientChanges(RxSeekBar.userChanges(server_settings_request_delay_seek_bar).skipInitialValue())\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/storage/DebugServerSettingsStorage.kt b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/storage/DebugServerSettingsStorage.kt\nindex 0000000..0000000 100644\n--- a/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/storage/DebugServerSettingsStorage.kt\n+++ b/template/f-debug/src/main/java/ru/surfstudio/standard/f_debug/storage/DebugServerSettingsStorage.kt\n@@ -8,6 +8,7 @@ import javax.inject.Inject\nimport javax.inject.Named\nprivate const val IS_CHUCK_ENABLED_KEY = \"IS_CHUCK_ENABLED_KEY\"\nprivate const val IS_TEST_SERVER_ENABLED = \"IS_TEST_SERVER_ENABLED\"\n+private const val REQUEST_DELAY = \"REQUEST_DELAY\"\n@PerApplication\nclass DebugServerSettingsStorage @Inject constructor(\n@Named(NO_BACKUP_SHARED_PREF) private val noBackupSharedPref: SharedPreferences\n@@ -20,4 +21,8 @@ class DebugServerSettingsStorage @Inject constructor(\nvar isTestServerEnabled: Boolean\nget() = SettingsUtil.getBoolean(noBackupSharedPref, IS_TEST_SERVER_ENABLED, true)\nset(value) = SettingsUtil.putBoolean(noBackupSharedPref, IS_TEST_SERVER_ENABLED, value)\n+\n+ var requestDelay: Long\n+ get() = SettingsUtil.getLong(noBackupSharedPref, REQUEST_DELAY, 0L)\n+ set(value) = SettingsUtil.putLong(noBackupSharedPref, REQUEST_DELAY, value)\n}\n\\ No newline at end of file\n\n",
    "diff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureRoute.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.activity.route.cross_feature\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+import ru.surfstudio.android.logger.Logger\n+\n+/**\n+ * Cross-feature navigation activity route between two activities in different independent\n+ * Gradle-projects.\n+ *\n+ * @see [ActivityRoute]\n+ * @see [CrossFeatureRoute]\n+ */\n+abstract class ActivityCrossFeatureRoute :\n+ ActivityRoute(),\n+ CrossFeatureRoute {\n+\n+ override fun prepareIntent(context: Context): Intent? {\n+ try {\n+ return Intent(context, Class.forName(targetClassPath()))\n+ } catch (e: ClassNotFoundException) {\n+ Logger.e(\"Activity with the following classpath was not found in the current \" +\n+ \"project: ${targetClassPath()}\")\n+ }\n+ return null\n+ }\n+\n+ override fun prepareBundle(): Bundle? {\n+ return null\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithParamsAndResultRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithParamsAndResultRoute.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.activity.route.cross_feature\n+\n+import android.content.Intent\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+import java.io.Serializable\n+\n+/**\n+ * Cross-feature navigation activity route with support of activity result delivering and parameters.\n+ *\n+ * Designed for navigation between two activities in different independent Gradle-projects.\n+\n+ * @param T result type (should be [Serializable])\n+ *\n+ * @see [ActivityRoute]\n+ * @see [CrossFeatureRoute]\n+ * @see [ActivityCrossFeatureRoute]\n+ */\n+abstract class ActivityCrossFeatureWithParamsAndResultRoute<T : Serializable> :\n+ ActivityCrossFeatureWithResultRoute<T> {\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"unused\")\n+ constructor(intent: Intent) {\n+ //empty\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithParamsRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithParamsRoute.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.activity.route.cross_feature\n+\n+import android.content.Intent\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+\n+/**\n+ * Cross-feature navigation activity route with parameters.\n+ *\n+ * Designed for navigation between two activities in different independent Gradle-projects.\n+ *\n+ * @see [ActivityRoute]\n+ * @see [CrossFeatureRoute]\n+ * @see [ActivityCrossFeatureRoute]\n+ */\n+abstract class ActivityCrossFeatureWithParamsRoute : ActivityCrossFeatureRoute {\n+\n+ @Suppress(\"unused\", \"ConvertSecondaryConstructorToPrimary\")\n+ constructor(intent: Intent) {\n+ //empty\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithResultRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/ActivityCrossFeatureWithResultRoute.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.activity.route.cross_feature\n+\n+import android.content.Intent\n+import ru.surfstudio.android.core.ui.event.result.SupportOnActivityResultRoute\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+import java.io.Serializable\n+\n+/**\n+ * Cross-feature navigation activity route with support of activity result delivering.\n+ *\n+ * Designed for navigation between two activities in different independent Gradle-projects.\n+\n+ * @param T result type (should be [Serializable])\n+ *\n+ * @see [ActivityRoute]\n+ * @see [CrossFeatureRoute]\n+ * @see [ActivityCrossFeatureRoute]\n+ */\n+abstract class ActivityCrossFeatureWithResultRoute<T : Serializable> :\n+ ActivityCrossFeatureRoute(),\n+ SupportOnActivityResultRoute<T> {\n+\n+ override fun prepareResultIntent(resultData: T): Intent {\n+ val i = Intent()\n+ i.putExtra(SupportOnActivityResultRoute.EXTRA_RESULT, resultData)\n+ return i\n+ }\n+\n+ override fun parseResultIntent(resultIntent: Intent): T {\n+ return resultIntent.getSerializableExtra(SupportOnActivityResultRoute.EXTRA_RESULT) as T\n+ }\n+\n+ override fun getRequestCode(): Int {\n+ return Math.abs(this.javaClass.canonicalName!!.hashCode() % MAX_REQUEST_CODE)\n+ }\n+\n+}\n+\n+private const val MAX_REQUEST_CODE = 32768\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/CrossFeatureRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/activity/route/cross_feature/CrossFeatureRoute.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.activity.route.cross_feature\n+\n+/**\n+ * Interface for cross-feature navigation route.\n+ *\n+ * Should be used for routing between two activities from different independent Gradle-projects.\n+ *\n+ * For using it just override [targetClassPath] method and return full classpath of the target\n+ * feature starting point (e.g. activity).\n+ */\n+interface CrossFeatureRoute {\n+\n+ /**\n+ * @return target starting point full classpath (e.g. \"com.name.app.feature.ActivityName\")\n+ */\n+ fun targetClassPath(): String\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/shared-pref-sample/src/main/java/ru/surfstudio/android/shared/pref/sample/ui/screen/main/MainActivityRoute.kt b/shared-pref-sample/src/main/java/ru/surfstudio/android/shared/pref/sample/ui/screen/main/MainActivityRoute.kt\nindex 0000000..0000000 100644\n--- a/shared-pref-sample/src/main/java/ru/surfstudio/android/shared/pref/sample/ui/screen/main/MainActivityRoute.kt\n+++ b/shared-pref-sample/src/main/java/ru/surfstudio/android/shared/pref/sample/ui/screen/main/MainActivityRoute.kt\n@@ -2,6 +2,7 @@ package ru.surfstudio.android.shared.pref.sample.ui.screen.main\nimport android.content.Context\nimport android.content.Intent\n+import android.os.Bundle\nimport ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n/**\n\n",
    "diff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\n@@ -36,10 +36,10 @@ class MainPresenter @Inject constructor(\noverride fun onFirstLoad() {\nsuper.onFirstLoad()\n- pm.incAction.bindTo(pm.counterState) { 100 }\n- pm.decAction.bindTo(pm.counterState) { 20 }\n+ pm.incAction.getObservable().map { 100 } bindTo pm.counterState\n+ pm.decAction.getObservable().map { 20 } bindTo pm.counterState\n+ pm.doubleTextAction.getObservable().map { pm.textEditState.let { it.value + it.value } } bindTo pm.textEditState\npm.textEditState bindTo pm.sampleCommand\n- pm.doubleTextAction.bindTo(pm.textEditState) { pm.textEditState.let { it.value + it.value } }\npm.checkboxSampleActivityOpen bindTo { activityNavigator.start(CheckboxActivityRoute()) }\npm.cycledSampleActivityOpen bindTo { activityNavigator.start(CycledActivityRoute()) }\n\n\ndiff --git a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\n+++ b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\npackage ru.surfstudio.android.core.mvp.rx.domain\n+import io.reactivex.Completable\n+import io.reactivex.Maybe\nimport io.reactivex.Observable\nimport io.reactivex.Single\nimport io.reactivex.disposables.Disposable\n@@ -38,6 +40,7 @@ interface Related<S : RelationEntity> {\nfun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>): Disposable\n+\nfun <T> Relation<T, *, S>.getObservable() =\nthis.getObservable(relationEntity())\n@@ -47,17 +50,34 @@ interface Related<S : RelationEntity> {\nfun <T> Relation<T, S, *>.accept(newValue: T) =\nthis.getConsumer().accept(newValue)\n- fun Relation<kotlin.Unit, S, *>.accept() =\n+ fun Relation<Unit, S, *>.accept() =\nthis.getConsumer().accept(Unit)\n+\ninfix fun <T> Observable<T>.bindTo(consumer: Consumer<T>) =\nthis@Related.subscribe(this, consumer)\n+ infix fun <T> Observable<T>.bindTo(relation: Relation<T, S, *>) =\n+ this.bindTo(relation.getConsumer())\n+\ninfix fun <T> Single<T>.bindTo(consumer: Consumer<T>) =\nthis@Related.subscribe(this.toObservable(), consumer)\n- fun <T, R> Observable<T>.bindTo(consumer: Consumer<R>, transformer: (T) -> R) =\n- this@Related.subscribe(this.map { transformer(it) }, consumer)\n+ infix fun <T> Single<T>.bindTo(relation: Relation<T, S, *>) =\n+ this.bindTo(relation.getConsumer())\n+\n+ infix fun <T> Maybe<T>.bindTo(consumer: Consumer<T>) =\n+ this@Related.subscribe(this.toObservable(), consumer)\n+\n+ infix fun <T> Maybe<T>.bindTo(relation: Relation<T, S, *>) =\n+ this.bindTo(relation.getConsumer())\n+\n+ infix fun Completable.bindTo(consumer: Consumer<Unit>) =\n+ this@Related.subscribe(this.toObservable(), consumer)\n+\n+ infix fun Completable.bindTo(relation: Relation<Unit, S, *>) =\n+ this.bindTo(relation.getConsumer())\n+\ninfix fun <T> Observable<T>.bindTo(consumer: (T) -> Unit) =\nthis@Related.subscribe(this, Consumer { consumer(it) })\n@@ -65,6 +85,7 @@ interface Related<S : RelationEntity> {\ninfix fun Observable<Unit>.bindTo(consumer: () -> Unit) =\nthis@Related.subscribe(this, Consumer { consumer() })\n+\ninfix fun <T> Relation<T, *, S>.bindTo(consumer: (T) -> Unit) =\nthis.getObservable()\n.bindTo(consumer)\n@@ -73,17 +94,8 @@ interface Related<S : RelationEntity> {\nthis.getObservable()\n.bindTo(consumer)\n- infix fun <T> Observable<T>.bindTo(relation: Relation<T, S, *>) =\n- this.bindTo(relation.getConsumer())\n-\n- infix fun <T> Single<T>.bindTo(relation: Relation<T, S, *>) =\n- this.bindTo(relation.getConsumer())\n-\ninfix fun <T> Relation<T, *, S>.bindTo(relation: Relation<T, S, *>) =\nthis.getObservable().bindTo(relation.getConsumer())\n-\n- fun <T, R> Relation<T, *, S>.bindTo(relation: Relation<R, S, *>, transformer: (T) -> R) =\n- this.getObservable().bindTo(relation.getConsumer(), transformer)\n}\ninterface RelationEntity\n\n",
    "diff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainActivityView.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainActivityView.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainActivityView.kt\n@@ -30,7 +30,7 @@ class MainActivityView : BaseRxActivityView<MainModel>() {\noverride fun bind(pm: MainModel) {\n- pm.counterState.getObservable().map { it.toString() } bindTo main_counter_tv::setText\n+ pm.counterState.observable.map { it.toString() } bindTo main_counter_tv::setText\npm.textEditState bindTo main_text_et::setText\npm.sampleCommand bindTo text_tv::setText\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/MainPresenter.kt\n@@ -36,9 +36,9 @@ class MainPresenter @Inject constructor(\noverride fun onFirstLoad() {\nsuper.onFirstLoad()\n- pm.incAction.getObservable().map { 100 } bindTo pm.counterState\n- pm.decAction.getObservable().map { 20 } bindTo pm.counterState\n- pm.doubleTextAction.getObservable().map { pm.textEditState.let { it.value + it.value } } bindTo pm.textEditState\n+ pm.incAction.observable.map { 100 } bindTo pm.counterState\n+ pm.decAction.observable.map { 20 } bindTo pm.counterState\n+ pm.doubleTextAction.observable.map { pm.textEditState.let { it.value + it.value } } bindTo pm.textEditState\npm.textEditState bindTo pm.sampleCommand\npm.checkboxSampleActivityOpen bindTo { activityNavigator.start(CheckboxActivityRoute()) }\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/checkbox/CheckboxPresenter.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/checkbox/CheckboxPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/checkbox/CheckboxPresenter.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/checkbox/CheckboxPresenter.kt\n@@ -33,14 +33,14 @@ class CheckboxPresenter @Inject constructor(\nval checkboxesObs =\nObservables.combineLatest(\n- pm.checkAction1.getObservable(),\n- pm.checkAction2.getObservable(),\n- pm.checkAction3.getObservable()\n+ pm.checkAction1.observable,\n+ pm.checkAction2.observable,\n+ pm.checkAction3.observable\n) { b1, b2, b3 -> Triple(b1, b2, b3) }\ncheckboxesObs.map { it.first.toInt() + it.second.toInt() + it.third.toInt() } bindTo pm.count\n- pm.sendAction.getObservable()\n+ pm.sendAction.observable\n.withLatestFrom(checkboxesObs)\n{ _, triple -> \"cb1: ${triple.first}, cb2: ${triple.second}, cb3: ${triple.third}\" }\n.bindTo(pm.messageCommand)\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledActivityView.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledActivityView.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledActivityView.kt\n@@ -44,9 +44,9 @@ class CycledActivityView : BaseRxActivityView<CycledScreenModel>() {\norigin_other_rb.prepare())\nwith(pm) {\n- origin.getObservable().filter { !it.sources.contains(Source.ORIGIN) }.map { it.value } bindTo ::checkRb\n- nomen.getObservable().filter { !it.sources.contains(Source.NOMEN) }.map { it.value as CharSequence } bindTo nomen_et::setText\n- baseOfNomen.getObservable().filter { !it.sources.contains(Source.BASE_OF_NOMEN) }.map { it.value } bindTo nomen_base_et::setText\n+ origin.observable.filter { !it.sources.contains(Source.ORIGIN) }.map { it.value } bindTo ::checkRb\n+ nomen.observable.filter { !it.sources.contains(Source.NOMEN) }.map { it.value as CharSequence } bindTo nomen_et::setText\n+ baseOfNomen.observable.filter { !it.sources.contains(Source.BASE_OF_NOMEN) }.map { it.value } bindTo nomen_base_et::setText\nnomen_base_et.textChanges()\n.debounce(300, TimeUnit.MILLISECONDS)\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledPresenter.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledPresenter.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/cycled/CycledPresenter.kt\n@@ -38,16 +38,16 @@ class CycledPresenter @Inject constructor(\nwith(pm) {\nObservable.combineLatest<SourcedValue<String>, SourcedValue<Origin>, Pair<SourcedValue<String>, SourcedValue<Origin>>>(\n- baseOfNomen.getObservable(),\n- origin.getObservable(), BiFunction { t1, t2 -> t1 to t2 }) bindTo { pair ->\n+ baseOfNomen.observable,\n+ origin.observable, BiFunction { t1, t2 -> t1 to t2 }) bindTo { pair ->\nnomenInteractor.composeNomen(pair.first.value, pair.second.value).map {\nSourcedValue(pair.first.sources + pair.second.sources, it)\n} bindTo nomen\n}\nObservable.combineLatest<SourcedValue<String>, SourcedValue<Origin>, Pair<SourcedValue<String>, SourcedValue<Origin>>>(\n- nomen.getObservable(),\n- origin.getObservable(), BiFunction { t1, t2 -> t1 to t2 }) bindTo { pair ->\n+ nomen.observable,\n+ origin.observable, BiFunction { t1, t2 -> t1 to t2 }) bindTo { pair ->\nnomenInteractor.extractBaseOfNomen(pair.first.value, pair.second.value).map {\nSourcedValue(pair.first.sources + pair.second.sources, it)\n} bindTo baseOfNomen\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/main/EAMainActivityView.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/main/EAMainActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/main/EAMainActivityView.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/main/EAMainActivityView.kt\n@@ -89,10 +89,10 @@ class EAMainActivityView : BaseRxActivityView<MainPresentationModel>() {\nemptyStateController = EmptyStateController()\nObservables.combineLatest(\n- pm.carouselState.getObservable(),\n- pm.elementsState.getObservable(),\n- pm.bottomCarouselState.getObservable(),\n- pm.hasCommercialState.getObservable(),\n+ pm.carouselState.observable,\n+ pm.elementsState.observable,\n+ pm.bottomCarouselState.observable,\n+ pm.hasCommercialState.observable,\n::createItemList\n) bindTo adapter::setItems\n}\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\n@@ -81,10 +81,10 @@ class PaginationActivityView : BaseRxActivityView<PaginationPresentationModel>()\nelementController = ElementController { showText(\"on element ${it.name} click \") }\nerrorStateController = ErrorStateController { pm.reloadAction.accept() }\n- Observables.combineLatest(pm.loadState.getObservable(),\n- pm.elementsState.getObservable(),\n- pm.stubsState.getObservable(),\n- pm.paginationState.getObservable(),\n+ Observables.combineLatest(pm.loadState.observable,\n+ pm.elementsState.observable,\n+ pm.stubsState.observable,\n+ pm.paginationState.observable,\n::createItemList) bindTo { p -> adapter.setItems(p.first, p.second) }\n}\n\n\ndiff --git a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\n+++ b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/domain/Relation.kt\n@@ -41,42 +41,44 @@ interface Related<S : RelationEntity> {\nfun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>): Disposable\n- fun <T> Relation<T, *, S>.getObservable() =\n+ val <T> Relation<T, *, S>.observable: Observable<T>\n+ get() =\nthis.getObservable(relationEntity())\n- fun <T> Relation<T, S, *>.getConsumer() =\n+ val <T> Relation<T, S, *>.consumer: Consumer<T>\n+ get() =\nthis.getConsumer(relationEntity())\nfun <T> Relation<T, S, *>.accept(newValue: T) =\n- this.getConsumer().accept(newValue)\n+ this.consumer.accept(newValue)\nfun Relation<Unit, S, *>.accept() =\n- this.getConsumer().accept(Unit)\n+ this.consumer.accept(Unit)\ninfix fun <T> Observable<T>.bindTo(consumer: Consumer<T>) =\nthis@Related.subscribe(this, consumer)\ninfix fun <T> Observable<T>.bindTo(relation: Relation<T, S, *>) =\n- this.bindTo(relation.getConsumer())\n+ this.bindTo(relation.consumer)\ninfix fun <T> Single<T>.bindTo(consumer: Consumer<T>) =\nthis@Related.subscribe(this.toObservable(), consumer)\ninfix fun <T> Single<T>.bindTo(relation: Relation<T, S, *>) =\n- this.bindTo(relation.getConsumer())\n+ this.bindTo(relation.consumer)\ninfix fun <T> Maybe<T>.bindTo(consumer: Consumer<T>) =\nthis@Related.subscribe(this.toObservable(), consumer)\ninfix fun <T> Maybe<T>.bindTo(relation: Relation<T, S, *>) =\n- this.bindTo(relation.getConsumer())\n+ this.bindTo(relation.consumer)\ninfix fun Completable.bindTo(consumer: Consumer<Unit>) =\nthis@Related.subscribe(this.toObservable(), consumer)\ninfix fun Completable.bindTo(relation: Relation<Unit, S, *>) =\n- this.bindTo(relation.getConsumer())\n+ this.bindTo(relation.consumer)\ninfix fun <T> Observable<T>.bindTo(consumer: (T) -> Unit) =\n@@ -87,15 +89,15 @@ interface Related<S : RelationEntity> {\ninfix fun <T> Relation<T, *, S>.bindTo(consumer: (T) -> Unit) =\n- this.getObservable()\n+ this.observable\n.bindTo(consumer)\ninfix fun Relation<Unit, *, S>.bindTo(consumer: () -> Unit) =\n- this.getObservable()\n+ this.observable\n.bindTo(consumer)\ninfix fun <T> Relation<T, *, S>.bindTo(relation: Relation<T, S, *>) =\n- this.getObservable().bindTo(relation.getConsumer())\n+ this.observable.bindTo(relation.consumer)\n}\ninterface RelationEntity\n\n\ndiff --git a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/ActionTest.kt b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/ActionTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/ActionTest.kt\n+++ b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/ActionTest.kt\n@@ -37,12 +37,12 @@ class ActionTest : BaseRelationTest() {\ntestObservable =\nwith(testPresenter) {\n- action.getObservable().test()\n+ action.observable.test()\n}\ntestConsumer =\nwith(testView) {\n- action.getConsumer()\n+ action.consumer\n}\n}\n\n\ndiff --git a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/BondTest.kt b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/BondTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/BondTest.kt\n+++ b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/BondTest.kt\n@@ -40,22 +40,22 @@ class BondTest : BaseRelationTest() {\ntestViewConsumer =\nwith(testView) {\n- twoWay.getConsumer()\n+ twoWay.consumer\n}\ntestViewObservable =\nwith(testView) {\n- twoWay.getObservable().test()\n+ twoWay.observable.test()\n}\ntestPresenterConsumer=\nwith(testPresenter) {\n- twoWay.getConsumer()\n+ twoWay.consumer\n}\ntestPresenterObservable =\nwith(testPresenter) {\n- twoWay.getObservable().test()\n+ twoWay.observable.test()\n}\n}\n\n\ndiff --git a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/StateTest.kt b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/StateTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/StateTest.kt\n+++ b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/domain/StateTest.kt\n@@ -37,12 +37,12 @@ class StateTest : BaseRelationTest() {\ntestObservable =\nwith(testView) {\n- state.getObservable().test()\n+ state.observable.test()\n}\ntestConsumer =\nwith(testPresenter) {\n- state.getConsumer()\n+ state.consumer\n}\n}\n\n",
    "diff --git a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/relation/ValuableRelation.kt b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/relation/ValuableRelation.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/relation/ValuableRelation.kt\n+++ b/core-mvp-rx/src/main/java/ru/surfstudio/android/core/mvp/rx/relation/ValuableRelation.kt\n@@ -31,4 +31,6 @@ abstract class ValuableRelation<T, in S : RelationEntity, in D : RelationEntity>\nval hasValue: Boolean get() = relay.hasValue()\ninternal val internalValue: T get() = relay.value ?: throw NoSuchElementException()\n+\n+ fun update() = relay.accept(internalValue)\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/ActionTest.kt b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/ActionTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/ActionTest.kt\n+++ b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/ActionTest.kt\n@@ -77,4 +77,16 @@ class ActionTest : BaseRelationTest() {\nassertEquals(\"Initial\", newValue)\n}\n}\n+\n+ @Test\n+ @Throws(Exception::class)\n+ fun update() {\n+ with(testPresenter) {\n+ val action = Action(\"Update\")\n+ var newValue = \"\"\n+ action bindTo { newValue += it }\n+ action.update()\n+ assertEquals(\"UpdateUpdate\", newValue)\n+ }\n+ }\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\n+++ b/core-mvp-rx/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\n@@ -77,4 +77,16 @@ class StateTest : BaseRelationTest() {\nassertEquals(\"Initial\", newValue)\n}\n}\n+\n+ @Test\n+ @Throws(Exception::class)\n+ fun update() {\n+ with(testView) {\n+ val state = State(\"Update\")\n+ var newValue = \"\"\n+ state bindTo { newValue += it }\n+ state.update()\n+ assertEquals(\"UpdateUpdate\", newValue)\n+ }\n+ }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\n@@ -31,6 +31,7 @@ class SplitFeatureInstaller(\n* @param splitName Dynamic Feature name\n* @param splitFeatureInstallListener installation events listener\n*/\n+ @Suppress(\"unused\")\nfun installFeature(\nsplitName: String,\nsplitFeatureInstallListener: SplitFeatureInstallListener\n@@ -44,7 +45,6 @@ class SplitFeatureInstaller(\n* @param splitNames multiple Dynamic Feature names\n* @param splitFeatureInstallListener installation events listener\n*/\n- @Suppress(\"MemberVisibilityCanBePrivate\")\nfun installFeature(\nsplitNames: List<String>,\nsplitFeatureInstallListener: SplitFeatureInstallListener\n\n",
    "diff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithResultRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithResultRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithResultRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithResultRoute.kt\npackage ru.surfstudio.android.core.ui.navigation.feature.route.dynamic_feature\nimport android.content.Intent\n+import ru.surfstudio.android.core.ui.event.result.CrossFeatureSupportOnActivityResultRoute\nimport ru.surfstudio.android.core.ui.event.result.SupportOnActivityResultRoute\nimport java.io.Serializable\n@@ -34,7 +35,7 @@ import java.io.Serializable\n*/\nabstract class ActivityDynamicCrossFeatureWithResultRoute<T : Serializable> :\nActivityDynamicCrossFeatureRoute(),\n- SupportOnActivityResultRoute<T> {\n+ CrossFeatureSupportOnActivityResultRoute<T> {\noverride fun prepareResultIntent(resultData: T): Intent {\nval i = Intent()\n\n\ndiff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithResultRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithResultRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithResultRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithResultRoute.kt\npackage ru.surfstudio.android.core.ui.navigation.feature.route.feature\nimport android.content.Intent\n+import ru.surfstudio.android.core.ui.event.result.CrossFeatureSupportOnActivityResultRoute\nimport ru.surfstudio.android.core.ui.event.result.SupportOnActivityResultRoute\nimport ru.surfstudio.android.core.ui.navigation.feature.route.dynamic_feature.ActivityDynamicCrossFeatureRoute\nimport java.io.Serializable\n@@ -32,7 +33,7 @@ import java.io.Serializable\n*/\nabstract class ActivityCrossFeatureWithResultRoute<T : Serializable> :\nActivityCrossFeatureRoute(),\n- SupportOnActivityResultRoute<T> {\n+ CrossFeatureSupportOnActivityResultRoute<T> {\noverride fun prepareResultIntent(resultData: T): Intent {\nval i = Intent()\n\n",
    "diff --git a/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/ui/common/notification/FirebaseMessagingService.kt b/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/ui/common/notification/FirebaseMessagingService.kt\nindex 0000000..0000000 100644\n--- a/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/ui/common/notification/FirebaseMessagingService.kt\n+++ b/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/ui/common/notification/FirebaseMessagingService.kt\n@@ -40,6 +40,7 @@ class FirebaseMessagingService : FirebaseMessagingService() {\nremoteMessage?.let {\npushHandler.handleMessage(this,\n+ it.messageId?.hashCode() ?: -1,\nit.notification?.title ?: \"\",\nit.notification?.body ?: \"\",\nit.data)\n\n\ndiff --git a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/MessagingService.kt b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/MessagingService.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/MessagingService.kt\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/MessagingService.kt\n@@ -45,6 +45,7 @@ class MessagingService : FirebaseMessagingService() {\nremoteMessage?.let {\npushHandler.handleMessage(this,\n+ it.messageId?.hashCode() ?: -1,\nit.notification?.title ?: \"\",\nit.notification?.body ?: \"\",\nit.data)\n\n\ndiff --git a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/strategy/BasePushHandleStrategy.kt b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/strategy/BasePushHandleStrategy.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/strategy/BasePushHandleStrategy.kt\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/strategy/BasePushHandleStrategy.kt\n@@ -4,6 +4,7 @@ import android.app.Activity\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\n+import ru.surfstudio.android.notification.ui.notification.groups.NotificationsGroup\nimport ru.surfstudio.android.notification.ui.notification.strategies.SimpleAbstractPushHandleStrategy\nimport ru.surfstudio.android.template.app_injector.R\nimport ru.surfstudio.standard.app_injector.ui.notification.type.NotificationTypeData\n\n",
    "diff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationActivityView.kt\n@@ -89,15 +89,15 @@ class PaginationActivityView : BaseRxActivityView<PaginationPresentationModel>()\n::createItemList) bindTo { p -> adapter.setItems(p.first, p.second) }\n}\n- private fun createItemList(loadState: LS,\n+ private fun createItemList(loadState: LoadState,\nelements: DataList<SelectableData<Element>>,\nstubs: List<Stub>,\npaginationState: PaginationState): Pair<ItemList, PaginationState> {\nval itemList = when (loadState) {\n- LS.LOADING -> ItemList.create(stubs, stubController)\n- LS.ERROR -> ItemList.create(errorStateController)\n- LS.EMPTY -> ItemList.create(emptyStateController)\n- LS.NONE -> ItemList.create(elements, elementController)\n+ Loading -> ItemList.create(stubs, stubController)\n+ Error -> ItemList.create(errorStateController)\n+ Empty -> ItemList.create(emptyStateController)\n+ None -> ItemList.create(elements, elementController)\n}\nreturn itemList to paginationState\n}\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresentationModel.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresentationModel.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresentationModel.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresentationModel.kt\npackage ru.surfstudio.android.core.mvp.rx.sample.easyadapter.ui.screen.pagination\n+import ru.surfstudio.android.core.mvp.loadstate.LoadStateInterface\nimport ru.surfstudio.android.core.mvp.model.ScreenModel\nimport ru.surfstudio.android.core.mvp.rx.relation.mvp.Action\nimport ru.surfstudio.android.core.mvp.rx.relation.mvp.State\n@@ -33,15 +34,16 @@ class PaginationPresentationModel : ScreenModel() {\nval elementsState = State<DataList<SelectableData<Element>>>(DataList.empty())\nval stubsState = State(generateStubs(20))\n- val loadState = State(LS.NONE)\n+ val loadState = State<LoadState>(None)\nval paginationState = State(PaginationState.READY)\nvar hasData = false\n}\n-enum class LS {\n- LOADING,\n- ERROR,\n- EMPTY,\n- NONE\n-}\n+sealed class LoadState : LoadStateInterface\n+\n+object Loading : LoadState()\n+object Error : LoadState()\n+object Empty : LoadState()\n+object None : LoadState()\n+\n\n\ndiff --git a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresenter.kt b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresenter.kt\n+++ b/core-mvp-rx-sample/src/main/java/ru/surfstudio/android/core/mvp/rx/sample/easyadapter/ui/screen/pagination/PaginationPresenter.kt\n@@ -118,15 +118,12 @@ class PaginationPresenter @Inject constructor(\n}\nprivate fun setNormalLoadState(elements: DataList<*>) {\n- pm.loadState.accept(if (elements.isEmpty())\n- LS.EMPTY else\n- LS.NONE)\n+ pm.loadState.accept(if (elements.isEmpty()) Empty else None)\n}\nprivate fun setErrorLoadState(elements: DataList<*>) {\npm.loadState.accept(if (elements.isEmpty())\n- LS.ERROR else\n- LS.NONE)\n+ Error else None)\n}\nprivate fun setNormalPaginationState(elements: DataList<*>) {\n\n",
    "diff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\n@@ -19,18 +19,26 @@ class DefaultSettingsRationalActivity : AppCompatActivity() {\nprivate val settingsRationalStr: String\nget() = intent.getStringExtra(Route.EXTRA_FIRST)\n+ private val settingsPositiveButtonStr: String\n+ get() = intent.getStringExtra(Route.EXTRA_SECOND)\n+ ?: getString(R.string.settings_rational_go_to_settings)\n+\n+ private val settingsNegativeButtonStr: String\n+ get() = intent.getStringExtra(Route.EXTRA_FIRST)\n+ ?: getString(R.string.settings_rational_cancel)\n+\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nAlertDialog\n.Builder(this)\n.setMessage(settingsRationalStr)\n- .setPositiveButton(R.string.settings_rational_go_to_settings) { _, _ ->\n+ .setPositiveButton(settingsPositiveButtonStr) { _, _ ->\nval settingsUri = Uri.fromParts(\"package\", packageName, null)\nval settingsIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, settingsUri)\nstartActivityForResult(settingsIntent, SETTINGS_REQUEST_CODE)\n}\n- .setNegativeButton(R.string.settings_rational_cancel, null)\n+ .setNegativeButton(settingsNegativeButtonStr, null)\n.setOnDismissListener { finish() }\n.create()\n.show()\n\n",
    "diff --git a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationClickEventReceiver.kt b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationClickEventReceiver.kt\nindex 0000000..0000000 100644\n--- a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationClickEventReceiver.kt\n+++ b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationClickEventReceiver.kt\n@@ -6,6 +6,7 @@ import android.content.Intent\nimport ru.surfstudio.android.logger.Logger\nimport ru.surfstudio.android.notification.interactor.PushClickProvider\n+const val NOTIFICATION_DATA = \"notification_data\"\ninternal const val NOTIFICATION_GROUP_ID = \"notification_group_id\"\ninternal const val EVENT_TYPE = \"event_type\"\n\n\ndiff --git a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/strategies/PushHandleStrategy.kt b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/strategies/PushHandleStrategy.kt\nindex 0000000..0000000 100644\n--- a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/strategies/PushHandleStrategy.kt\n+++ b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/strategies/PushHandleStrategy.kt\n@@ -210,6 +210,7 @@ abstract class PushHandleStrategy<out T : BaseNotificationTypeData<*>> : Seriali\n*/\nprivate fun preparePendingIntent(context: Context, title: String, groupId: Int?): PendingIntent {\nval intent = Intent(context, NotificationClickEventReceiver::class.java)\n+ intent.putExtra(NOTIFICATION_DATA, typeData)\nintent.putExtra(EVENT_TYPE, Event.OPEN)\nintent.putExtra(NOTIFICATION_GROUP_ID, groupId ?: 0)\nreturn PendingIntent.getBroadcast(context.applicationContext,\n@@ -218,6 +219,7 @@ abstract class PushHandleStrategy<out T : BaseNotificationTypeData<*>> : Seriali\nprivate fun makeDeleteIntent(context: Context, groupId: Int?): PendingIntent {\nval intent = Intent(context, NotificationClickEventReceiver::class.java)\n+ intent.putExtra(NOTIFICATION_DATA, typeData)\nintent.putExtra(EVENT_TYPE, Event.DISMISS)\nintent.putExtra(NOTIFICATION_GROUP_ID, groupId ?: 0)\nreturn PendingIntent.getBroadcast(context.applicationContext,\n\n",
    "diff --git a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\nindex 0000000..0000000 100644\n--- a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\n+++ b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\n@@ -58,7 +58,7 @@ object NotificationCreateHelper {\nnotificationDescObject.forEach { inboxStyle.addLine(it) }\n//Can set no.of messages as a summary.\n- inboxStyle.setSummaryText(notificationDescObject.size.toString() + \" Messages\") //todo\n+ inboxStyle.setSummaryText(pushHandleStrategy.makeGroupSummary(notificationDescObject.size))\n}\ngetNotificationManager(context).notify(groupId, notificationBuilder.build())\n\n",
    "diff --git a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\nindex 0000000..0000000 100644\n--- a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\n+++ b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationCreateHelper.kt\n@@ -42,26 +42,8 @@ object NotificationCreateHelper {\nif (android.os.Build.VERSION.SDK_INT <= Build.VERSION_CODES.M) {\n- val groupId = pushHandleStrategy.group?.id\n- if (groupId != null) {\n- val notificationDescObject = NotificationGroupHelper\n- .getNotificationsForGroup(context, groupId, body)\n-\n- if (notificationDescObject.size > 1) {\n-\n- val inboxStyle = NotificationCompat.InboxStyle()\n-\n- notificationBuilder.setStyle(inboxStyle)\n-\n- inboxStyle.setBigContentTitle(title)\n-\n- notificationDescObject.forEach { inboxStyle.addLine(it) }\n-\n- //Can set no.of messages as a summary.\n- inboxStyle.setSummaryText(pushHandleStrategy.makeGroupSummary(notificationDescObject.size))\n- }\n-\n- getNotificationManager(context).notify(groupId, notificationBuilder.build())\n+ pushHandleStrategy.group?.id?.let {\n+ makeGroupNotificationM(context, notificationBuilder, pushHandleStrategy, it, body, title)\nreturn\n}\n} else {\n@@ -140,4 +122,32 @@ object NotificationCreateHelper {\nprivate fun getNotificationManager(context: Context): NotificationManager {\nreturn context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n}\n+\n+ private fun makeGroupNotificationM(\n+ context: Context,\n+ notificationBuilder: NotificationCompat.Builder,\n+ pushHandleStrategy: PushHandleStrategy<*>,\n+ groupId: Int,\n+ body: String,\n+ title: String\n+ ) {\n+ val notificationDescObject = NotificationGroupHelper\n+ .getNotificationsForGroup(context, groupId, body)\n+\n+ if (notificationDescObject.size > 1) {\n+\n+ val inboxStyle = NotificationCompat.InboxStyle()\n+\n+ notificationBuilder.setStyle(inboxStyle)\n+\n+ inboxStyle.setBigContentTitle(title)\n+\n+ notificationDescObject.forEach { inboxStyle.addLine(it) }\n+\n+ //Can set no.of messages as a summary.\n+ inboxStyle.setSummaryText(pushHandleStrategy.makeGroupSummary(notificationDescObject.size))\n+ }\n+\n+ getNotificationManager(context).notify(groupId, notificationBuilder.build())\n+ }\n}\n\\ No newline at end of file\n\n\ndiff --git a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationGroupHelper.kt b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationGroupHelper.kt\nindex 0000000..0000000 100644\n--- a/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationGroupHelper.kt\n+++ b/push/src/main/java/ru/surfstudio/android/notification/ui/notification/NotificationGroupHelper.kt\n@@ -6,7 +6,7 @@ import org.json.JSONArray\nimport ru.surfstudio.android.utilktx.ktx.text.EMPTY_STRING\n/**\n- *\n+ * Helper class for Grouping notifications for API version <= M\n*/\ninternal object NotificationGroupHelper {\n@@ -32,6 +32,9 @@ internal object NotificationGroupHelper {\nreturn notificationObject\n}\n+ /**\n+ * This method will clear cached notifications for given group\n+ */\nfun clearSavedNotificationsForGroup(context: Context, groupId: Int) {\nval sp = getSharedPref(context)\nsp.edit().putString(getGroupKey(groupId), EMPTY_STRING).apply()\n\n",
    "diff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureEvent.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureEvent.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureEvent.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureEvent.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.core.ui.navigation.feature.installer\n/**\n\n\ndiff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/installer/SplitFeatureInstaller.kt\n@@ -6,6 +6,8 @@ import com.google.android.play.core.splitinstall.SplitInstallManagerFactory\nimport com.google.android.play.core.splitinstall.SplitInstallRequest\nimport com.google.android.play.core.splitinstall.model.SplitInstallErrorCode\nimport com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus\n+import io.reactivex.Observable\n+import io.reactivex.subjects.BehaviorSubject\n/**\n* Dynamic Feature install manager.\n@@ -13,12 +15,7 @@ import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus\nclass SplitFeatureInstaller(\napplicationContext: Context\n) {\n-\n- interface SplitFeatureInstallListener {\n- fun onInstall(state: SplitFeatureInstallState)\n- fun onStateChanged(state: SplitFeatureInstallState)\n- fun onFailure(state: SplitFeatureInstallState)\n- }\n+ private val splitFeatureInstallSubject = BehaviorSubject.create<SplitFeatureInstallState>()\nprivate val splitInstallManager = SplitInstallManagerFactory.create(applicationContext)\n@@ -32,11 +29,8 @@ class SplitFeatureInstaller(\n* @param splitFeatureInstallListener installation events listener\n*/\n@Suppress(\"unused\")\n- fun installFeature(\n- splitName: String,\n- splitFeatureInstallListener: SplitFeatureInstallListener\n- ) {\n- installFeature(listOf(splitName), splitFeatureInstallListener)\n+ fun installFeature(splitName: String) {\n+ installFeature(listOf(splitName))\n}\n/**\n@@ -45,10 +39,7 @@ class SplitFeatureInstaller(\n* @param splitNames multiple Dynamic Feature names\n* @param splitFeatureInstallListener installation events listener\n*/\n- fun installFeature(\n- splitNames: List<String>,\n- splitFeatureInstallListener: SplitFeatureInstallListener\n- ) {\n+ fun installFeature(splitNames: List<String>): Observable<SplitFeatureInstallState> {\nval requestBuilder = SplitInstallRequest.newBuilder()\nfor (splitName in splitNames) {\nrequestBuilder.addModule(splitName)\n@@ -59,25 +50,25 @@ class SplitFeatureInstaller(\nif (state?.sessionId() == -1 &&\nstate.status() == SplitInstallSessionStatus.FAILED &&\nstate.errorCode() == SplitInstallErrorCode.SERVICE_DIED) {\n- splitFeatureInstallListener.onFailure(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(SplitFeatureEvent.StartupFailure.ServiceDied)\n)\n} else if (state?.sessionId() == this@SplitFeatureInstaller.sessionId) {\nwhen {\nstate.status() == SplitInstallSessionStatus.PENDING ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Pending\n)\n)\nstate.status() == SplitInstallSessionStatus.REQUIRES_USER_CONFIRMATION ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.RequiresUserConfirmation\n)\n)\nstate.status() == SplitInstallSessionStatus.DOWNLOADING ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Downloading(\nstate.totalBytesToDownload(),\n@@ -86,46 +77,46 @@ class SplitFeatureInstaller(\n)\n)\nstate.status() == SplitInstallSessionStatus.DOWNLOADED ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Downloaded\n)\n)\nstate.status() == SplitInstallSessionStatus.INSTALLING ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Installing\n)\n)\nstate.status() == SplitInstallSessionStatus.INSTALLED -> {\n- splitFeatureInstallListener.onInstall(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Installed\n)\n)\n}\nstate.status() == SplitInstallSessionStatus.FAILED -> {\n- splitFeatureInstallListener.onFailure(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Failed\n)\n)\n}\nstate.status() == SplitInstallSessionStatus.CANCELING ->\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Cancelling\n)\n)\nstate.status() == SplitInstallSessionStatus.CANCELED -> {\n- splitFeatureInstallListener.onFailure(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.Canceled\n)\n)\n}\nelse -> {\n- splitFeatureInstallListener.onFailure(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.UnknownEvent(\nstate.status()\n@@ -135,7 +126,7 @@ class SplitFeatureInstaller(\n}\n}\n} else {\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.InstallationStateEvent.AlienSessionEvent(\nstate?.sessionId() ?: -1\n@@ -148,7 +139,7 @@ class SplitFeatureInstaller(\n.startInstall(request)\n.addOnSuccessListener { sessionId ->\nthis@SplitFeatureInstaller.sessionId = sessionId ?: -1\n- splitFeatureInstallListener.onStateChanged(\n+ splitFeatureInstallSubject.onNext(\nSplitFeatureInstallState(\nSplitFeatureEvent.StartupSuccess\n)\n@@ -156,7 +147,7 @@ class SplitFeatureInstaller(\n}\n.addOnFailureListener { exception ->\nif (exception is SplitInstallException) {\n- splitFeatureInstallListener.onFailure(\n+ splitFeatureInstallSubject.onNext(\nwhen {\nexception.errorCode == SplitInstallErrorCode.ACTIVE_SESSIONS_LIMIT_EXCEEDED ->\nSplitFeatureInstallState(\n@@ -202,5 +193,6 @@ class SplitFeatureInstaller(\n)\n}\n}\n+ return splitFeatureInstallSubject\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/util-ktx/src/main/java/ru/surfstudio/android/utilktx/ktx/ui/view/TextViewExtensions.kt b/util-ktx/src/main/java/ru/surfstudio/android/utilktx/ktx/ui/view/TextViewExtensions.kt\nindex 0000000..0000000 100644\n--- a/util-ktx/src/main/java/ru/surfstudio/android/utilktx/ktx/ui/view/TextViewExtensions.kt\n+++ b/util-ktx/src/main/java/ru/surfstudio/android/utilktx/ktx/ui/view/TextViewExtensions.kt\n/*\n- Copyright (c) 2018-present, SurfStudio LLC.\n-\n- Licensed under the Apache License, Version 2.0 (the \"License\");\n- you may not use this file except in compliance with the License.\n- You may obtain a copy of the License at\n-\n- http://www.apache.org/licenses/LICENSE-2.0\n-\n- Unless required by applicable law or agreed to in writing, software\n- distributed under the License is distributed on an \"AS IS\" BASIS,\n- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- See the License for the specific language governing permissions and\n- limitations under the License.\n+ * Copyright (c) 2019-present, SurfStudio LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n*/\npackage ru.surfstudio.android.utilktx.ktx.ui.view\n@@ -20,13 +20,13 @@ import android.content.ClipboardManager\nimport android.content.Context\nimport android.graphics.PorterDuff\nimport android.graphics.PorterDuffColorFilter\n+import android.text.InputFilter\n+import android.widget.EditText\n+import android.widget.TextView\nimport androidx.annotation.ColorRes\nimport androidx.annotation.IntegerRes\nimport androidx.annotation.StyleRes\nimport androidx.core.content.ContextCompat\n-import android.text.InputFilter\n-import android.widget.EditText\n-import android.widget.TextView\nimport ru.surfstudio.android.utilktx.ktx.text.PHONE_NUMBER_CHARS\nimport ru.surfstudio.android.utilktx.util.KeyboardUtil\nimport ru.surfstudio.android.utilktx.util.SdkUtils\n@@ -84,7 +84,11 @@ fun TextView.copyTextToClipboard() {\n*/\nfun EditText.setMaxLength(@IntegerRes length: Int) {\nval inputTextFilter = InputFilter.LengthFilter(context.resources.getInteger(length))\n- this.filters = arrayOf<InputFilter>(inputTextFilter) + filters\n+\n+ filters = filters\n+ .filterNot { it is InputFilter.LengthFilter }\n+ .toTypedArray()\n+ .plus(inputTextFilter)\n}\n/**\n\n",
    "diff --git a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgDecoder.kt b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgDecoder.kt\nindex 0000000..0000000 100644\n--- a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgDecoder.kt\n+++ b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgDecoder.kt\n-package ru.surfstudio.android.imageloader.svg\n+package ru.surfstudio.android.imageloader_sample.svg\nimport com.bumptech.glide.load.Options\nimport com.bumptech.glide.load.ResourceDecoder\n\n\ndiff --git a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgDrawableTranscoder.kt b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgDrawableTranscoder.kt\nindex 0000000..0000000 100644\n--- a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgDrawableTranscoder.kt\n+++ b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgDrawableTranscoder.kt\n-package ru.surfstudio.android.imageloader.svg\n+package ru.surfstudio.android.imageloader_sample.svg\nimport android.graphics.Picture\nimport android.graphics.drawable.PictureDrawable\n\n\ndiff --git a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgModule.kt b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgModule.kt\nindex 0000000..0000000 100644\n--- a/imageloader/src/main/java/ru/surfstudio/android/imageloader/svg/SvgModule.kt\n+++ b/imageloader-sample/src/main/java/ru/surfstudio/android/imageloader_sample/svg/SvgModule.kt\n-package ru.surfstudio.android.imageloader.svg\n+package ru.surfstudio.android.imageloader_sample.svg\nimport android.content.Context\nimport android.graphics.drawable.PictureDrawable\n\n",
    "diff --git a/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/app/CustomApp.kt b/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/app/CustomApp.kt\nindex 0000000..0000000 100644\n--- a/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/app/CustomApp.kt\n+++ b/firebase-sample/src/main/java/ru/surfstudio/android/firebase/sample/app/CustomApp.kt\n@@ -4,9 +4,9 @@ import android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport androidx.multidex.MultiDexApplication\n-//import com.crashlytics.android.Crashlytics\n-//import com.crashlytics.android.core.CrashlyticsCore\n-//import io.fabric.sdk.android.Fabric\n+import com.crashlytics.android.Crashlytics\n+import com.crashlytics.android.core.CrashlyticsCore\n+import io.fabric.sdk.android.Fabric\nimport ru.surfstudio.android.activity.holder.ActiveActivityHolder\nimport ru.surfstudio.android.firebase.sample.BuildConfig\nimport ru.surfstudio.android.logger.Logger\n@@ -23,22 +23,22 @@ class CustomApp : MultiDexApplication() {\noverride fun onCreate() {\nsuper.onCreate()\n-// initFabric()\n+ initFabric()\ninitInjector()\ninitNotificationCenter()\nregisterActiveActivityListener()\ninitPushEventListener()\n}\n-// private fun initFabric() {\n-// Fabric.with(this, *getFabricKits())\n-// }\n-//\n-// private fun getFabricKits() = arrayOf(Crashlytics.Builder()\n-// .core(CrashlyticsCore.Builder()\n-// .disabled(BuildConfig.DEBUG)\n-// .build())\n-// .build())\n+ private fun initFabric() {\n+ Fabric.with(this, *getFabricKits())\n+ }\n+\n+ private fun getFabricKits() = arrayOf(Crashlytics.Builder()\n+ .core(CrashlyticsCore.Builder()\n+ .disabled(BuildConfig.DEBUG)\n+ .build())\n+ .build())\nprivate fun initInjector() {\nAppConfigurator.initInjector(this)\n\n\ndiff --git a/logger/src/main/java/ru/surfstudio/android/logger/remote_logging_strategies/impl/crashlytics/CrashlyticsRemoteLoggingStrategy.kt b/logger/src/main/java/ru/surfstudio/android/logger/remote_logging_strategies/impl/crashlytics/CrashlyticsRemoteLoggingStrategy.kt\nindex 0000000..0000000 100644\n--- a/logger/src/main/java/ru/surfstudio/android/logger/remote_logging_strategies/impl/crashlytics/CrashlyticsRemoteLoggingStrategy.kt\n+++ b/logger/src/main/java/ru/surfstudio/android/logger/remote_logging_strategies/impl/crashlytics/CrashlyticsRemoteLoggingStrategy.kt\npackage ru.surfstudio.android.logger.remote_logging_strategies.impl.crashlytics\n-//import com.crashlytics.android.Crashlytics\n+import com.crashlytics.android.Crashlytics\nimport ru.surfstudio.android.logger.remote_logging_strategies.RemoteLoggingStrategy\n@@ -11,9 +11,9 @@ class CrashlyticsRemoteLoggingStrategy : RemoteLoggingStrategy {\noverride fun setUser(id: String?, username: String?, email: String?) {\ntry {\n-// Crashlytics.getInstance().core.setUserName(username)\n-// Crashlytics.getInstance().core.setUserEmail(email)\n-// Crashlytics.getInstance().core.setUserIdentifier(id)\n+ Crashlytics.getInstance().core.setUserName(username)\n+ Crashlytics.getInstance().core.setUserEmail(email)\n+ Crashlytics.getInstance().core.setUserIdentifier(id)\n} catch (e: Exception) {\n//ignored\n}\n@@ -21,9 +21,9 @@ class CrashlyticsRemoteLoggingStrategy : RemoteLoggingStrategy {\noverride fun clearUser() {\ntry {\n-// Crashlytics.getInstance().core.setUserName(\"\")\n-// Crashlytics.getInstance().core.setUserEmail(\"\")\n-// Crashlytics.getInstance().core.setUserIdentifier(\"\")\n+ Crashlytics.getInstance().core.setUserName(\"\")\n+ Crashlytics.getInstance().core.setUserEmail(\"\")\n+ Crashlytics.getInstance().core.setUserIdentifier(\"\")\n} catch (e: Exception) {\n//ignored\n}\n@@ -31,7 +31,7 @@ class CrashlyticsRemoteLoggingStrategy : RemoteLoggingStrategy {\noverride fun logKeyValue(key: String?, value: String?) {\ntry {\n-// Crashlytics.getInstance().core.setString(key, value)\n+ Crashlytics.getInstance().core.setString(key, value)\n} catch (e: Exception) {\n//ignored\n}\n@@ -39,7 +39,7 @@ class CrashlyticsRemoteLoggingStrategy : RemoteLoggingStrategy {\noverride fun logError(e: Throwable?) {\ntry {\n-// Crashlytics.getInstance().core.logException(e)\n+ Crashlytics.getInstance().core.logException(e)\n} catch (err: Exception) {\n//ignored\n}\n@@ -47,7 +47,7 @@ class CrashlyticsRemoteLoggingStrategy : RemoteLoggingStrategy {\noverride fun logMessage(message: String?) {\ntry {\n-// Crashlytics.getInstance().core.log(message)\n+ Crashlytics.getInstance().core.log(message)\n} catch (e: Exception) {\n//ignored\n}\n\n",
    "diff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/FragmentCrossFeatureRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/FragmentCrossFeatureRoute.kt\n+/*\n+ Copyright (c) 2019-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.feature.route.feature\n+\n+import androidx.fragment.app.Fragment\n+import ru.surfstudio.android.core.ui.navigation.fragment.route.FragmentRoute\n+import ru.surfstudio.android.logger.Logger\n+\n+/**\n+ * Cross-feature navigation Fragment route for different independent Gradle-projects.\n+ *\n+ * @see [FragmentRoute]\n+ * @see [CrossFeatureRoute]\n+ */\n+abstract class FragmentCrossFeatureRoute : CrossFeatureRoute, FragmentRoute() {\n+\n+ @Suppress(\"UNCHECKED_CAST\")\n+ override fun getFragmentClass(): Class<out Fragment>? {\n+ try {\n+ return Class.forName(targetClassPath()) as? Class<out Fragment> ?: return null\n+ } catch (e: ClassNotFoundException) {\n+ Logger.e(\"Fragment with the following classpath was not found in the current \" +\n+ \"application: ${targetClassPath()}. If this fragment is the part of Dynamic Feature, \" +\n+ \"please check if this Dynamic Feature is downloaded and installed on the device\" +\n+ \"successfully.\")\n+ }\n+ return null\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsAndResultRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsAndResultRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsAndResultRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsAndResultRoute.kt\n@@ -37,8 +37,10 @@ import java.io.Serializable\nabstract class ActivityDynamicCrossFeatureWithParamsAndResultRoute<T : Serializable> :\nActivityCrossFeatureWithResultRoute<T> {\n- @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n- constructor(intent: Intent) {\n+ constructor() {\n//empty\n}\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n+ constructor(intent: Intent) : this()\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/dynamic_feature/ActivityDynamicCrossFeatureWithParamsRoute.kt\n@@ -32,8 +32,10 @@ import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n*/\nabstract class ActivityDynamicCrossFeatureWithParamsRoute : ActivityDynamicCrossFeatureRoute {\n- @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n- constructor(intent: Intent) {\n+ constructor() {\n//empty\n}\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n+ constructor(intent: Intent) : this()\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsAndResultRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsAndResultRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsAndResultRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsAndResultRoute.kt\n@@ -35,8 +35,10 @@ import java.io.Serializable\nabstract class ActivityCrossFeatureWithParamsAndResultRoute<T : Serializable> :\nActivityCrossFeatureWithResultRoute<T> {\n- @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n- constructor(intent: Intent) {\n+ constructor() {\n//empty\n}\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n+ constructor(intent: Intent) : this()\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsRoute.kt b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsRoute.kt\nindex 0000000..0000000 100644\n--- a/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsRoute.kt\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/ActivityCrossFeatureWithParamsRoute.kt\n@@ -31,8 +31,10 @@ import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n*/\nabstract class ActivityCrossFeatureWithParamsRoute : ActivityCrossFeatureRoute {\n- @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n- constructor(intent: Intent) {\n+ constructor() {\n//empty\n}\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n+ constructor(intent: Intent) : this()\n}\n\\ No newline at end of file\n\n",
    "diff --git a/None b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/FragmentCrossFeatureWithParamsRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/src/main/java/ru/surfstudio/android/core/ui/navigation/feature/route/feature/FragmentCrossFeatureWithParamsRoute.kt\n+/*\n+ Copyright (c) 2019-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.core.ui.navigation.feature.route.feature\n+\n+import android.os.Bundle\n+import androidx.fragment.app.Fragment\n+import ru.surfstudio.android.core.ui.navigation.FragmentRouteInterface\n+\n+/**\n+ * Cross-feature navigation Fragment route with parameters for different independent Gradle-projects.\n+ *\n+ * @see [FragmentCrossFeatureRoute]\n+ * @see [FragmentRouteInterface]\n+ */\n+abstract class FragmentCrossFeatureWithParamsRoute : FragmentCrossFeatureRoute, FragmentRouteInterface {\n+\n+ constructor() {\n+ //empty\n+ }\n+\n+ @Suppress(\"ConvertSecondaryConstructorToPrimary\", \"UNUSED_PARAMETER\")\n+ constructor(bundle: Bundle) : this()\n+\n+ override fun createFragment(): Fragment {\n+ return super.createFragment().apply {\n+ arguments = prepareBundle()\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n+++ b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n@@ -59,6 +59,8 @@ abstract class BaseRxFragmentView : CoreFragmentView(), BindableRxView {\nprivate val viewDisposable = CompositeDisposable()\n+ override fun getPresenters() = emptyArray<BaseRxPresenter>()\n+\n@CallSuper\noverride fun onDestroy() {\nviewDisposable.clear()\n@@ -75,6 +77,8 @@ abstract class BaseRxDialogView : CoreDialogFragmentView(), BindableRxView {\nprivate val viewDisposable = CompositeDisposable()\n+ override fun getPresenters() = emptyArray<BaseRxPresenter>()\n+\n@CallSuper\noverride fun onDestroy() {\nviewDisposable.clear()\n\n",
    "diff --git a/template/small-test-utils/src/main/java/ru/surfstudio/standard/small_test_utils/BaseNetworkDaggerTest.kt b/template/small-test-utils/src/main/java/ru/surfstudio/standard/small_test_utils/BaseNetworkDaggerTest.kt\nindex 0000000..0000000 100644\n--- a/template/small-test-utils/src/main/java/ru/surfstudio/standard/small_test_utils/BaseNetworkDaggerTest.kt\n+++ b/template/small-test-utils/src/main/java/ru/surfstudio/standard/small_test_utils/BaseNetworkDaggerTest.kt\n@@ -2,7 +2,9 @@ package ru.surfstudio.standard.small_test_utils\nimport android.security.NetworkSecurityPolicy\nimport androidx.annotation.CallSuper\n+import io.reactivex.Completable\nimport io.reactivex.Observable\n+import io.reactivex.Single\nimport io.reactivex.observers.TestObserver\nimport org.junit.After\nimport org.junit.Before\n@@ -48,6 +50,14 @@ abstract class BaseNetworkDaggerTest<T> {\nreturn observable.test().assertNoErrors()\n}\n+ protected fun <T> test(single: Single<T>): TestObserver<T> {\n+ return single.test().assertNoErrors()\n+ }\n+\n+ protected fun test(completable: Completable): TestObserver<T> {\n+ return test(completable.toObservable())\n+ }\n+\nprotected fun <T> testAndGetValues(observable: Observable<T>): List<T> {\nreturn test(observable).values()\n}\n\n",
    "diff --git a/custom-view-sample/src/main/java/ru/surfstudio/android/custom_view_sample/MainActivity.kt b/custom-view-sample/src/main/java/ru/surfstudio/android/custom_view_sample/MainActivity.kt\nindex 0000000..0000000 100644\n--- a/custom-view-sample/src/main/java/ru/surfstudio/android/custom_view_sample/MainActivity.kt\n+++ b/custom-view-sample/src/main/java/ru/surfstudio/android/custom_view_sample/MainActivity.kt\n@@ -4,6 +4,8 @@ import android.content.Intent\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport kotlinx.android.synthetic.main.activity_main.*\n+import ru.surfstudio.android.animations.anim.fadeIn\n+import ru.surfstudio.android.animations.anim.fadeOut\nimport ru.surfstudio.android.sample.common.ui.base.loadstate.LoadState\nimport ru.surfstudio.android.sample.common.ui.base.loadstate.renderer.DefaultLoadStateRenderer\n@@ -14,6 +16,9 @@ class MainActivity : AppCompatActivity() {\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n+\n+ setSupportActionBar(toolbar)\n+\nloadStateRenderer = DefaultLoadStateRenderer(placeholder_view)\nloadStateRenderer.render(LoadState.MAIN_LOADING)\nvar x = 0\n@@ -30,5 +35,20 @@ class MainActivity : AppCompatActivity() {\nopen_tv_screen_btn.setOnClickListener {\nstartActivity(Intent(this, TitleSubtitleViewDemoActivity::class.java))\n}\n+ root_container.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->\n+ updateBSPeekHeight()\n+ }\n+ with(example_bsv) {\n+ onExpandListener = {\n+ top_title_tsv.fadeIn()\n+ }\n+ onCollapseListener = {\n+ top_title_tsv.fadeOut()\n+ }\n+ }\n+ }\n+\n+ private fun updateBSPeekHeight() {\n+ example_bsv.setPeekHeight(root_container.height - toolbar.height - content_container.height)\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxWidgetsView.kt b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxWidgetsView.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxWidgetsView.kt\n+++ b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxWidgetsView.kt\n+/*\n+ * Copyright (c) 2019-present, SurfStudio LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\npackage ru.surfstudio.android.core.mvp.binding.rx.ui\nimport android.content.Context\n\n\ndiff --git a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\nindex 0000000..0000000 100644\n--- a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\n+++ b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\n+/*\n+ * Copyright (c) 2019-present, SurfStudio LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\npackage ru.surfstudio.android.mvp.widget.delegate\nimport android.content.Context\n\n",
    "diff --git a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ParentPersistentScopeFinder.kt b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ParentPersistentScopeFinder.kt\nindex 0000000..0000000 100644\n--- a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ParentPersistentScopeFinder.kt\n+++ b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ParentPersistentScopeFinder.kt\n@@ -30,7 +30,7 @@ class ParentPersistentScopeFinder(private val child: View) {\nfun find(): ScreenPersistentScope? {\nvar parentScope: ScreenPersistentScope? = null\n- val activity = unwrapContext<FragmentActivity>(child.context)\n+ val activity = unwrapContext(child.context, FragmentActivity::class.java)\nval fragments = activity.supportFragmentManager.fragments\nvar parent: ViewParent? = child.parent\n\n\ndiff --git a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\nindex 0000000..0000000 100644\n--- a/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\n+++ b/mvp-widget/src/main/java/ru/surfstudio/android/mvp/widget/delegate/ViewContextUnwrapper.kt\n@@ -24,10 +24,10 @@ import android.view.ContextThemeWrapper\n* Helps to avoid problems with ContextThemeWrapper\n* @see <a href=\"https://clck.ru/FRZrW\">ContextThemeWrapper problem</a>\n*/\n-inline fun <reified T> unwrapContext(context: Context): T {\n+fun <T> unwrapContext(context: Context, clazz: Class<T>): T {\nvar unwrappedContext = context\n- while (unwrappedContext !is T && unwrappedContext is ContextThemeWrapper) {\n+ while (!clazz.isInstance(unwrappedContext) && unwrappedContext is ContextThemeWrapper) {\nunwrappedContext = unwrappedContext.baseContext\n}\n- return unwrappedContext as T\n+ return clazz.cast(unwrappedContext)!!\n}\n\\ No newline at end of file\n\n",
    "diff --git a/custom-view-sample/src/androidTest/java/ru/surfstudio/android/custom_view_sample/CustomViewSampleTest.kt b/custom-view-sample/src/androidTest/java/ru/surfstudio/android/custom_view_sample/CustomViewSampleTest.kt\nindex 0000000..0000000 100644\n--- a/custom-view-sample/src/androidTest/java/ru/surfstudio/android/custom_view_sample/CustomViewSampleTest.kt\n+++ b/custom-view-sample/src/androidTest/java/ru/surfstudio/android/custom_view_sample/CustomViewSampleTest.kt\npackage ru.surfstudio.android.custom_view_sample\n+import android.view.View\nimport androidx.test.espresso.Espresso\n+import androidx.test.espresso.UiController\n+import androidx.test.espresso.ViewAction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers\n+import androidx.test.espresso.matcher.ViewMatchers.isAssignableFrom\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+import org.hamcrest.Matcher\nimport org.junit.Test\n+import ru.surfstudio.android.custom.view.bottomsheet.BottomSheetView\nimport ru.surfstudio.android.sample.common.test.base.BaseSampleTest\nimport ru.surfstudio.android.sample.common.test.utils.ActivityUtils.checkIfActivityIsVisible\nimport ru.surfstudio.android.sample.common.test.utils.AnimationUtils\n@@ -29,5 +38,20 @@ class CustomViewSampleTest : BaseSampleTest<MainActivity>(MainActivity::class.ja\nEspresso.pressBack()\nperformClick(R.id.change_state_btn)\n+\n+ Espresso.onView(ViewMatchers.withId(R.id.example_bsv)).perform(object : ViewAction {\n+\n+ override fun getDescription() = \"Swipe up of bottomsheet view\"\n+\n+ override fun getConstraints(): Matcher<View> {\n+ return isAssignableFrom(BottomSheetView::class.java)\n+ }\n+\n+ override fun perform(uiController: UiController?, view: View?) {\n+ val bsView = view as BottomSheetView\n+ bsView.expand()\n+ }\n+ })\n+ Espresso.onView(ViewMatchers.withId(R.id.top_title_tsv)).check(matches(isDisplayed()))\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/custom-view/src/main/java/ru/surfstudio/android/custom/view/TitleSubtitleView.kt b/custom-view/src/main/java/ru/surfstudio/android/custom/view/TitleSubtitleView.kt\nindex 0000000..0000000 100644\n--- a/custom-view/src/main/java/ru/surfstudio/android/custom/view/TitleSubtitleView.kt\n+++ b/custom-view/src/main/java/ru/surfstudio/android/custom/view/TitleSubtitleView.kt\n@@ -100,6 +100,30 @@ class TitleSubtitleView @JvmOverloads constructor(\nTextViewCompat.setTextAppearance(subTitleView, value)\n}\n+ var titleLines: Int = -1\n+ set(value) {\n+ field = value\n+ titleView.setLines(value)\n+ }\n+\n+ var subTitleLines: Int = -1\n+ set(value) {\n+ field = value\n+ subTitleView.setLines(value)\n+ }\n+\n+ var titleMaxLines: Int = -1\n+ set(value) {\n+ field = value\n+ titleView.maxLines = value\n+ }\n+\n+ var subTitleMaxLines: Int = -1\n+ set(value) {\n+ field = value\n+ subTitleView.maxLines = value\n+ }\n+\nvar onTitleClickListenerCallback: ((String) -> Unit)? = null\nset(value) {\nfield = value\n@@ -183,8 +207,8 @@ class TitleSubtitleView @JvmOverloads constructor(\nta.getDimensionPixelOffset(R.styleable.TitleSubtitleView_titlePaddingBottom, 0)\n)\n- setLines(ta.getInt(R.styleable.TitleSubtitleView_titleLines, lineCount))\n- maxLines = ta.getInt(R.styleable.TitleSubtitleView_titleMaxLines, DEFAULT_MAX_LINES)\n+ titleLines = ta.getInt(R.styleable.TitleSubtitleView_titleLines, lineCount)\n+ titleMaxLines = ta.getInt(R.styleable.TitleSubtitleView_titleMaxLines, DEFAULT_MAX_LINES)\ngravity = ta.getInt(R.styleable.TitleSubtitleView_titleGravity, gravity)\n@@ -226,8 +250,8 @@ class TitleSubtitleView @JvmOverloads constructor(\nta.getDimensionPixelOffset(R.styleable.TitleSubtitleView_subTitlePaddingBottom, 0)\n)\n- setLines(ta.getInt(R.styleable.TitleSubtitleView_subTitleLines, lineCount))\n- maxLines = ta.getInt(R.styleable.TitleSubtitleView_subTitleMaxLines, DEFAULT_MAX_LINES)\n+ subTitleLines = ta.getInt(R.styleable.TitleSubtitleView_subTitleLines, lineCount)\n+ subTitleMaxLines = ta.getInt(R.styleable.TitleSubtitleView_subTitleMaxLines, DEFAULT_MAX_LINES)\ngravity = ta.getInt(R.styleable.TitleSubtitleView_subTitleGravity, gravity)\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\n@@ -5,7 +5,7 @@ import ru.surfstudio.android.build.exceptions.LibraryDirectoryNotExistException\nimport ru.surfstudio.android.build.exceptions.SampleDirectoryNotExistException\nimport ru.surfstudio.android.build.model.json.ComponentJson\nimport java.io.File\n-import com.google.gson.GsonBuilder\n+import ru.surfstudio.android.build.utils.JsonHelper\nobject Initializator {\n@@ -16,22 +16,11 @@ object Initializator {\n*/\n@JvmStatic\nfun init() {\n- val jsonComponents = parseComponentJson()\n+ val jsonComponents = JsonHelper.parseComponentsJson(COMPONENTS_JSON_FILE_PATH)\ncheckComponentsFolders(jsonComponents)\nComponents.init(jsonComponents)\n}\n- /**\n- * Parsing value.json file\n- * @return list of json value\n- */\n- private fun parseComponentJson(): List<ComponentJson> {\n- return GsonBuilder()\n- .create()\n- .fromJson(File(COMPONENTS_JSON_FILE_PATH).reader(), Array<ComponentJson>::class.java)\n- .toList()\n- }\n-\n/**\n* Check value directories for exist\n*/\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/IncrementUnstableChangedComponentsTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/IncrementUnstableChangedComponentsTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/IncrementUnstableChangedComponentsTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/IncrementUnstableChangedComponentsTask.kt\n@@ -11,7 +11,7 @@ import ru.surfstudio.android.build.model.json.ComponentJson\nimport ru.surfstudio.android.build.tasks.changed_components.ComponentsConfigurationChecker\nimport ru.surfstudio.android.build.tasks.changed_components.ComponentsFilesChecker\nimport ru.surfstudio.android.build.tasks.changed_components.GitCommandRunner\n-import ru.surfstudio.android.build.tasks.changed_components.JsonHelper\n+import ru.surfstudio.android.build.utils.JsonHelper\nimport ru.surfstudio.android.build.tasks.changed_components.models.ComponentCheckResult\nimport java.io.File\n@@ -66,7 +66,7 @@ open class IncrementUnstableChangedComponentsTask : DefaultTask() {\n}\nprivate fun writeNewComponentsToFile(newComponents: List<Component>) {\n- JsonHelper.writeComponentsFile(\n+ JsonHelper.write(\nnewComponents.map { ComponentJson(it) },\nFile(\"$currentDirectory/$COMPONENTS_JSON_FILE_PATH\")\n)\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/JsonHelper.kt b/None\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/JsonHelper.kt\n+++ b/None\n-package ru.surfstudio.android.build.tasks.changed_components\n-\n-import com.google.gson.GsonBuilder\n-import ru.surfstudio.android.build.Folders.COMPONENTS_JSON_FILE_PATH\n-import ru.surfstudio.android.build.model.json.ComponentJson\n-import ru.surfstudio.android.build.tasks.changed_components.models.ProjectConfiguration\n-import java.io.File\n-\n-/**\n- * helper for parsing info configuration files\n- */\n-object JsonHelper {\n-\n- val gson = GsonBuilder().setPrettyPrinting().create()\n-\n- fun parseProjectConfigurationFile(path: String): ProjectConfiguration {\n- return gson.fromJson(File(path).reader(), ProjectConfiguration::class.java)\n- }\n-\n- fun writeProjectConfigurationFile(project: ProjectConfiguration, file: File) {\n- file.writeText(gson.toJson(project))\n- }\n-\n- fun writeComponentsFile(components: List<ComponentJson>, file: File) {\n- file.writeText(gson.toJson(components))\n- }\n-\n- fun parseComponentsJson(pathToProject: String): List<ComponentJson> {\n- return GsonBuilder()\n- .create()\n- .fromJson(File(\"$pathToProject$COMPONENTS_JSON_FILE_PATH\").reader(), Array<ComponentJson>::class.java)\n- .toList()\n- }\n-}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationCreator.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationCreator.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationCreator.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationCreator.kt\n@@ -2,6 +2,7 @@ package ru.surfstudio.android.build.tasks.changed_components\nimport groovy.util.ConfigObject\nimport ru.surfstudio.android.build.Components\n+import ru.surfstudio.android.build.Folders\nimport ru.surfstudio.android.build.Folders.BUILD_FOLDER_NAME\nimport ru.surfstudio.android.build.Folders.BUILD_OUTPUT_FOLDER_PATH\nimport ru.surfstudio.android.build.Folders.OUTPUT_JSON_FOLDER_PATH\n@@ -11,6 +12,7 @@ import ru.surfstudio.android.build.tasks.changed_components.models.DependencyWit\nimport ru.surfstudio.android.build.tasks.changed_components.models.LibraryWithVersion\nimport ru.surfstudio.android.build.tasks.changed_components.models.ProjectConfiguration\nimport ru.surfstudio.android.build.tasks.currentDirectory\n+import ru.surfstudio.android.build.utils.JsonHelper\nimport java.io.File\n/**\n@@ -66,17 +68,17 @@ class ProjectConfigurationCreator(\n* and its version as second parameter\n*/\nprivate fun createComponentsWithVersions(versions: LinkedHashMap<String, String>): List<ComponentWithVersion> {\n- val components = JsonHelper.parseComponentsJson(pathToProject).map(ComponentJson::transform)\n+ val components = JsonHelper.parseComponentsJson(\"$pathToProject${Folders.COMPONENTS_JSON_FILE_PATH}\").map(ComponentJson::transform)\nreturn components.map { component ->\nval libs = component.libraries.map { lib ->\n- val standartDependencies = lib.androidStandardDependencies.map { dep ->\n+ val standardDependencies = lib.androidStandardDependencies.map { dep ->\nDependencyWithVersion(dep.name, versions[dep.name] ?: \"\")\n}\nval thirdPartyDependencies = lib.thirdPartyDependencies.map { dep ->\nDependencyWithVersion(dep.name, versions[dep.name] ?: \"\")\n}\n- LibraryWithVersion(lib.name, lib.directoryPath, thirdPartyDependencies, standartDependencies)\n+ LibraryWithVersion(lib.name, lib.directoryPath, thirdPartyDependencies, standardDependencies)\n}\nComponentWithVersion(component.name, component.directory, component.baseVersion, component.stable, libs)\n}\n@@ -89,7 +91,7 @@ class ProjectConfigurationCreator(\n*/\nprivate fun saveProjectConfigurationToFile(projectConfiguration: ProjectConfiguration) {\ncreateIntermediateFoldersForJsonFile()\n- JsonHelper.writeProjectConfigurationFile(projectConfiguration, createJsonOutputFile())\n+ JsonHelper.write(projectConfiguration, createJsonOutputFile())\n}\n/**\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationProvider.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationProvider.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationProvider.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ProjectConfigurationProvider.kt\n@@ -9,6 +9,7 @@ import ru.surfstudio.android.build.GradleTasksNames.GRADLE_TASK_CREATE_PROJECT_C\nimport ru.surfstudio.android.build.tasks.changed_components.CommandLineRunner.runCommandWithResult\nimport ru.surfstudio.android.build.tasks.changed_components.models.ProjectConfiguration\nimport ru.surfstudio.android.build.tasks.currentDirectory\n+import ru.surfstudio.android.build.utils.JsonHelper\nimport java.io.File\n/**\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/utils/JsonHelper.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/utils/JsonHelper.kt\n+package ru.surfstudio.android.build.utils\n+\n+import com.google.gson.GsonBuilder\n+import ru.surfstudio.android.build.Folders.COMPONENTS_JSON_FILE_PATH\n+import ru.surfstudio.android.build.model.json.ComponentJson\n+import ru.surfstudio.android.build.tasks.changed_components.models.ProjectConfiguration\n+import java.io.File\n+\n+/**\n+ * Helper class for parsing\n+ */\n+object JsonHelper {\n+\n+ private val gson = GsonBuilder().setPrettyPrinting().create()\n+\n+ fun parseProjectConfigurationFile(path: String): ProjectConfiguration {\n+ return gson.fromJson(File(path).reader(), ProjectConfiguration::class.java)\n+ }\n+\n+ /**\n+ * Write to file with json formatting\n+ *\n+ * @param obj - object for represent as json\n+ * @param file - file to write\n+ */\n+ fun write(obj: Any, file: File) {\n+ file.writeText(gson.toJson(obj))\n+ }\n+\n+ fun parseComponentsJson(filePath: String): List<ComponentJson> {\n+ return GsonBuilder()\n+ .create()\n+ .fromJson(File(filePath).reader(), Array<ComponentJson>::class.java)\n+ .toList()\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n+++ b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n@@ -126,3 +126,22 @@ abstract class BaseRxBottomSheetDialogFragment : CoreBottomSheetDialogFragmentVi\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n}\n+\n+/**\n+ * Simple Bottom Sheet Dialog Fragment with RxBindings support.\n+ */\n+abstract class BaseRxSimpleBottomSheetDialogFragment : CoreSimpleBottomSheetDialogFragment(), BindableRxView {\n+\n+ private val viewDisposable = CompositeDisposable()\n+\n+ @CallSuper\n+ override fun onDestroy() {\n+ viewDisposable.clear()\n+ super.onDestroy()\n+ }\n+\n+ override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ observable.observeOn(AndroidSchedulers.mainThread())\n+ .subscribe(onNext, Consumer(onError))\n+ .also { viewDisposable.add(it) }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt b/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\nindex 0000000..0000000 100644\n--- a/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\n+++ b/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\n@@ -26,6 +26,7 @@ object RemoteLogger {\nprivate val REMOTE_LOGGING_STRATEGIES = hashMapOf<KClass<*>, RemoteLoggingStrategy>()\n@JvmStatic\n+\nfun getRemoteLoggingStrategies() = REMOTE_LOGGING_STRATEGIES\n@JvmStatic\n\n",
    "diff --git a/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt b/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\nindex 0000000..0000000 100644\n--- a/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\n+++ b/logger/lib-logger/src/main/java/ru/surfstudio/android/logger/RemoteLogger.kt\n@@ -30,6 +30,7 @@ object RemoteLogger {\nfun getRemoteLoggingStrategies() = REMOTE_LOGGING_STRATEGIES\n@JvmStatic\n+\nfun addRemoteLoggingStrategy(strategy: RemoteLoggingStrategy) =\nREMOTE_LOGGING_STRATEGIES.put(strategy::class, strategy)\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n@@ -56,6 +56,7 @@ object Components {\n* 4. X.Y.Z-alpha.unstable_version-projectPostfix.projectVersion - component is unstable, projectPostfix isn't empty\n*/\n@JvmStatic\n+\nfun getModuleVersion(moduleName: String): String {\nif (value.isEmpty()) return EMPTY_STRING\nif (value.any { it.projectVersion.isEmpty() }) configModuleVersions()\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n@@ -38,6 +38,8 @@ object Components {\n@JvmStatic\nfun getModules(): List<Module> {\nval mirrorComponentName = GradlePropertiesManager.getMirrorComponentName()\n+\n+\nreturn if (!GradlePropertiesManager.isCurrentComponentAMirror()) {\nvalue.flatMap(Component::getModules)\n} else {\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Components.kt\n@@ -59,6 +59,7 @@ object Components {\nfun getModuleVersion(moduleName: String): String {\nif (value.isEmpty()) return EMPTY_STRING\n+\nif (value.any { it.projectVersion.isEmpty() }) configModuleVersions()\nval component = value.find { it.getModules().map(Module::name).contains(moduleName) }\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\npackage ru.surfstudio.android.build.tasks.deploy_to_mirror\n-import org.apache.commons.io.FileUtils\nimport org.eclipse.jgit.diff.DiffEntry\nimport org.eclipse.jgit.revwalk.RevCommit\nimport ru.surfstudio.android.build.exceptions.deploy_to_mirror.RevCommitNotFoundException\n@@ -12,8 +11,6 @@ import ru.surfstudio.android.build.utils.EMPTY_STRING\nimport ru.surfstudio.android.build.utils.mirrorStandardHash\nimport ru.surfstudio.android.build.utils.standardHash\nimport ru.surfstudio.android.build.utils.type\n-import java.io.File\n-import java.nio.charset.Charset\nprivate const val HEAD = \"HEAD\"\n@@ -83,16 +80,15 @@ class MirrorManager(\nstandardRepository.reset(commit.commit)\nwith(mirrorRepository) {\n- reset(getCommitByStandardHash(parent.commit.standardHash))\n- checkout(parent.branch)\n- checkout(commit.branch)\n+ checkoutBranch(parent.branch)\n+ if (parent.mirrorCommitHash.isNotEmpty()) {\n+ checkoutCommit(parent.mirrorCommitHash)\n}\n- applyChanges(changes)\n- mirrorRepository.commit(commit.commit)\n-\n- mirrorRepository.getCommitByStandardHash(\"b51eddbc\").parents.forEach {\n- println(\"123123 $it\")\n+ checkoutBranch(commit.branch)\n}\n+ applyChanges(changes)\n+ val commitHash = mirrorRepository.commit(commit.commit) ?: EMPTY_STRING\n+ commit.mirrorCommitHash = commitHash\n}\nprivate fun applyChanges(changes: List<DiffEntry>) {\n@@ -115,20 +111,22 @@ class MirrorManager(\n.map(CommitWithBranch::branch)\n.first { it != mainBranch }\n- mirrorRepository.checkout(mainBranch)\n+ mirrorRepository.checkoutBranch(mainBranch)\nval conflicts = mirrorRepository.merge(secondBranch)\nconflicts.forEach {\nval filePath = it.replaceFirst(\"${mirrorRepository.repositoryPath.path}/\", EMPTY_STRING)\ndiffManager.modify(filePath)\n}\n- mirrorRepository.commit(commit.commit)\n+\n+ val commitHash = mirrorRepository.commit(commit.commit)\n+ commit.mirrorCommitHash = commitHash ?: EMPTY_STRING\n}\nprivate fun mirrorStartPoint(commit: CommitWithBranch) {\nval mirrorCommit = gitTree.getStartMirrorCommitByStandardHash(commit.commit.standardHash)\nmirrorRepository.reset(mirrorCommit.commit)\n- mirrorRepository.checkout(mirrorCommit.branch)\n+ mirrorRepository.checkoutBranch(mirrorCommit.branch)\n}\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n@@ -6,7 +6,8 @@ import ru.surfstudio.android.build.utils.EMPTY_STRING\ndata class CommitWithBranch(\nval commit: RevCommit,\nvar branch: String = EMPTY_STRING,\n- var type: CommitType = CommitType.SIMPLE\n+ var type: CommitType = CommitType.SIMPLE,\n+ var mirrorCommitHash: String = EMPTY_STRING\n) {\noverride fun toString() = \"$type $branch ${commit.shortMessage}\"\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -80,7 +80,7 @@ abstract class BaseGitRepository {\n.call()\n}\n- fun checkout(branchName: String) {\n+ fun checkoutBranch(branchName: String) {\nval isBranchCreated = git.branchList().call()\n.map { it.name }\n.extractBranchNames()\n@@ -92,6 +92,12 @@ abstract class BaseGitRepository {\n.call()\n}\n+ fun checkoutCommit(commitHash: String) {\n+ git.checkout()\n+ .setName(commitHash)\n+ .call()\n+ }\n+\nfun getChanges(commit: RevCommit): MutableList<DiffEntry> {\nval reader = git.repository.newObjectReader()\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\n@@ -10,11 +10,12 @@ import java.io.File\n*/\nclass MirrorRepository(dirPath: String) : BaseGitRepository() {\n- fun commit(commit: RevCommit) {\n- git.commit()\n+ fun commit(commit: RevCommit): String? {\n+ val resultCommit = git.commit()\n.setAuthor(commit.authorIdent)\n.setMessage(\"${commit.shortMessage} $STANDARD_COMMIT_HASH_PREFIX${commit.shortHash}$STANDARD_COMMIT_HASH_POSTFIX\")\n.call()\n+ return resultCommit.name\n}\noverride val repositoryPath = File(dirPath)\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\n@@ -57,7 +57,7 @@ object GradleProperties {\nconst val DEPLOY_ONLY_IF_NOT_EXIST = \"deployOnlyIfNotExist\"\n/**\n- * Number or commit\n+ * Commit in android standard to start mirroring from\n*/\nconst val COMMIT = \"commit\"\n@@ -67,12 +67,12 @@ object GradleProperties {\nconst val MIRROR_DIR = \"mirrorDir\"\n/**\n- * Depth limit for deploy to mirror\n+ * Depth of standard repository git tree to get commits\n*/\nconst val DEPLOY_TO_MIRROR_DEPTH_LIMIT = \"depthLimit\"\n/**\n- * Search limit for deploy to mirror\n+ * Depth of mirror repository tree to search standard commit hash in\n*/\nconst val DEPLOY_TO_MIRROR_SEARCH_LIMIT = \"searchLimit\"\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/DeployToMirrorTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/DeployToMirrorTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/DeployToMirrorTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/DeployToMirrorTask.kt\n@@ -10,7 +10,7 @@ import ru.surfstudio.android.build.utils.extractProperty\nimport ru.surfstudio.android.build.utils.getPropertyComponent\n/**\n- * Deploy to mirror\n+ * Task for deploying [component] to mirror\n*/\nopen class DeployToMirrorTask : DefaultTask() {\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\n@@ -5,11 +5,19 @@ import org.eclipse.jgit.diff.DiffEntry\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.MirrorRepository\nimport java.io.File\n+/**\n+ * Work with git changes\n+ */\nclass GitDiffManager(\nprivate val standardDir: String,\nprivate val mirrorRepository: MirrorRepository\n) {\n+ /**\n+ * work when file was added. Copy new standard file and add to index\n+ *\n+ * @param diffEntry information about diff\n+ */\nfun add(diffEntry: DiffEntry) {\nval standardFile = standardPath(diffEntry.newPath)\nval mirrorFile = mirrorPath(diffEntry.newPath)\n@@ -19,6 +27,11 @@ class GitDiffManager(\nmirrorRepository.addToIndex(mirrorFile.path)\n}\n+ /**\n+ * work when file was moved from one place to another. Copy file and add to index\n+ *\n+ * @param diffEntry information about diff\n+ */\nfun copy(diffEntry: DiffEntry) {\nval copyFrom = mirrorPath(diffEntry.oldPath)\nval copyTo = mirrorPath(diffEntry.newPath)\n@@ -28,6 +41,11 @@ class GitDiffManager(\nmirrorRepository.addToIndex(copyTo.path)\n}\n+ /**\n+ * work when file was deleted. Delete file and add to index\n+ *\n+ * @param diffEntry information about diff\n+ */\nfun delete(diffEntry: DiffEntry) {\nval file = mirrorPath(diffEntry.oldPath)\n@@ -36,9 +54,19 @@ class GitDiffManager(\nmirrorRepository.addToIndex(file.path)\n}\n+ /**\n+ * work when file was modified\n+ *\n+ * @param diffEntry information about diff\n+ */\nfun modify(diffEntry: DiffEntry) = modify(diffEntry.oldPath)\n+ /**\n+ * work when file was modified. Copies file from standard to mirror one\n+ *\n+ * @param filePath information about diff\n+ */\nfun modify(filePath: String) {\nval standardFile = standardPath(filePath)\nval mirrorFile = mirrorPath(filePath)\n@@ -48,6 +76,11 @@ class GitDiffManager(\nmirrorRepository.addToIndex(mirrorFile.path)\n}\n+ /**\n+ * work when file was renamed. Copy old file to new file name and remove old filename\n+ *\n+ * @param diffEntry information about diff\n+ */\nfun rename(diffEntry: DiffEntry) {\nval oldFile = mirrorPath(diffEntry.oldPath)\nval newFile = mirrorPath(diffEntry.newPath)\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n@@ -15,7 +15,8 @@ import ru.surfstudio.android.build.utils.type\nprivate const val HEAD = \"HEAD\"\n/**\n- * Git manager\n+ * Class for mirroring android standard to mirror repository\n+ * Only [filesToMirror] and [foldersToMirror] are mirrored\n*/\nclass MirrorManager(\nprivate val componentDirectory: String,\n@@ -37,14 +38,15 @@ class MirrorManager(\n\"gradle.properties\",\n\"settings.gradle\"\n)\n- private val folderToMirror = listOf(\n+ private val foldersToMirror = listOf(\ncomponentDirectory,\n\"buildSrc\",\n\"common\"\n)\n/**\n- * Mirror standard repository and mirror repository\n+ * Mirrors standard repository to mirror repository.\n+ * Builds git tree presentation and then applies to mirror repository\n*\n* @param rootCommitHash - top commit for mirroring\n*/\n@@ -60,49 +62,74 @@ class MirrorManager(\n.toSet()\ngitTree.buildGitTree(rootCommit, standardCommits, mirrorCommits)\n- start()\n+ applyGitTreeToMirror()\n}\n- private fun start() {\n+ /**\n+ * For all git tree commits apply them to mirror repository\n+ */\n+ private fun applyGitTreeToMirror() {\ngitTree.commitsToCommit.forEach {\nwhen (it.type) {\nCommitType.SIMPLE -> commit(it)\nCommitType.MERGE -> merge(it)\n- CommitType.MIRROR_START_POINT -> mirrorStartPoint(it)\n+ CommitType.MIRROR_START_POINT -> createMirrorStartCommit(it)\n}\n}\n}\n- private fun commit(commit: CommitWithBranch) {\n- val changes = standardRepository.getChanges(commit.commit).filter(::shouldMirror)\n- val parent = gitTree.getParent(commit)\n+ /**\n+ * creates start commit of git tree in mirror repository\n+ *\n+ * @param commit start commit\n+ */\n+ private fun createMirrorStartCommit(commit: CommitWithBranch) {\n+ val mirrorCommit = gitTree.getStartMirrorCommitByStandardHash(commit.commit.standardHash)\n+ mirrorRepository.reset(mirrorCommit.commit)\n+ mirrorRepository.checkoutBranch(mirrorCommit.branch)\n+ }\n+ /**\n+ * creates commit in mirror repository by\n+ * getting all changes for [commit]\n+ * in standard repository and applying them to mirror repository\n+ *\n+ * @param commit commit to apply\n+ */\n+ private fun commit(commit: CommitWithBranch) {\nstandardRepository.reset(commit.commit)\n+ checkoutMirrorBranchForCommit(commit)\n- with(mirrorRepository) {\n- checkoutBranch(parent.branch)\n- if (parent.mirrorCommitHash.isNotEmpty()) {\n- checkoutCommit(parent.mirrorCommitHash)\n- }\n- checkoutBranch(commit.branch)\n- }\n+\n+ val changes = standardRepository.getChanges(commit.commit).filter(::shouldMirror)\napplyChanges(changes)\nval commitHash = mirrorRepository.commit(commit.commit) ?: EMPTY_STRING\ncommit.mirrorCommitHash = commitHash\n}\n- private fun applyChanges(changes: List<DiffEntry>) {\n- changes.forEach {\n- when (it.type) {\n- DiffEntry.ChangeType.ADD -> diffManager.add(it)\n- DiffEntry.ChangeType.COPY -> diffManager.copy(it)\n- DiffEntry.ChangeType.DELETE -> diffManager.delete(it)\n- DiffEntry.ChangeType.MODIFY -> diffManager.modify(it)\n- DiffEntry.ChangeType.RENAME -> diffManager.rename(it)\n+ /**\n+ * handles checkout right branch for new commit\n+ *\n+ * @param commit commit\n+ */\n+ private fun checkoutMirrorBranchForCommit(commit: CommitWithBranch) {\n+ with(mirrorRepository) {\n+ val parent = gitTree.getParent(commit)\n+ checkoutBranch(parent.branch)\n+ if (parent.mirrorCommitHash.isNotEmpty()) {\n+ checkoutCommit(parent.mirrorCommitHash)\n}\n+ checkoutBranch(commit.branch)\n}\n}\n+ /**\n+ * creates merge commit by getting merge parents for commit\n+ * and merging them.\n+ * In case of conflicts just copies file from standard repository to mirror repository\n+ *\n+ * @param commit commit to apply\n+ */\nprivate fun merge(commit: CommitWithBranch) {\nstandardRepository.reset(commit.commit)\n@@ -123,59 +150,30 @@ class MirrorManager(\ncommit.mirrorCommitHash = commitHash ?: EMPTY_STRING\n}\n- private fun mirrorStartPoint(commit: CommitWithBranch) {\n- val mirrorCommit = gitTree.getStartMirrorCommitByStandardHash(commit.commit.standardHash)\n- mirrorRepository.reset(mirrorCommit.commit)\n- mirrorRepository.checkoutBranch(mirrorCommit.branch)\n+ /**\n+ * apply changes to mirror repository\n+ *\n+ * @param changes list of changes to apply\n+ */\n+ private fun applyChanges(changes: List<DiffEntry>) {\n+ changes.forEach {\n+ when (it.type) {\n+ DiffEntry.ChangeType.ADD -> diffManager.add(it)\n+ DiffEntry.ChangeType.COPY -> diffManager.copy(it)\n+ DiffEntry.ChangeType.DELETE -> diffManager.delete(it)\n+ DiffEntry.ChangeType.MODIFY -> diffManager.modify(it)\n+ DiffEntry.ChangeType.RENAME -> diffManager.rename(it)\n+ }\n+ }\n}\n-\n- // private fun commitChanges() {\n-// val standardStartCommit = gitTree.getStandardStartCommit()\n-// val mirrorStartCommit = gitTree.getMirrorCommitByStandard(standardStartCommit.standardHash)\n-// val commits = gitTree.getCommitsWithChanges()\n-//\n-// if (commits.isEmpty()) return\n-//\n-// standardRepository.reset(standardStartCommit)\n-// standardRepository.checkout(standardStartCommit)\n-//\n-// mirrorRepository.reset(mirrorStartCommit)\n-// mirrorRepository.checkout(mirrorStartCommit)\n-//\n-// commits.forEach { handleCommit(it) }\n-// }\n-//\n-// private fun handleCommit(commit: RevCommit) {\n-// standardRepository.reset(commit)\n-// standardRepository.checkout(commit)\n-//\n-// if (commit.isMergeCommit) {\n-// merge(commit)\n-// } else {\n-// val diff = standardRepository.getChanges(commit)\n-// .filter(::shouldMirror)\n-// diff.forEach {\n-// when (it.type) {\n-// ADD -> diffManager.add(it)\n-// COPY -> diffManager.copy(it)\n-// DELETE -> diffManager.delete(it)\n-// MODIFY -> diffManager.modify(it)\n-// RENAME -> diffManager.rename(it)\n-// }\n-// }\n-// commit(commit)\n-// }\n-// }\n-//\n-// private fun merge(commit: RevCommit) {\n-// //TODO\n-// }\n-//\n-// private fun commit(commit: RevCommit) {\n-// mirrorRepository.commit(commit)\n-// }\n-//\n+ /**\n+ * check if should apply specified change to mirror repository\n+ *\n+ * @param diffEntry change to check\n+ *\n+ * @return true if specified change should be included in commit\n+ */\nprivate fun shouldMirror(diffEntry: DiffEntry): Boolean {\nval newPath = diffEntry.newPath.substringBeforeLast(\"/\")\nval oldPath = diffEntry.oldPath.substringBeforeLast(\"/\")\n@@ -189,7 +187,14 @@ class MirrorManager(\n}\n}\n+ /**\n+ * checks if this path is for specified objects to mirror\n+ *\n+ * @param path path to file\n+ *\n+ * @return true if changed file is contained in [filesToMirror] or [foldersToMirror]\n+ */\nprivate fun checkPathMirroring(path: String): Boolean {\n- return filesToMirror.contains(path) || folderToMirror.any { path.startsWith(it) }\n+ return filesToMirror.contains(path) || foldersToMirror.any { path.startsWith(it) }\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n@@ -3,6 +3,9 @@ package ru.surfstudio.android.build.tasks.deploy_to_mirror.model\nimport org.eclipse.jgit.revwalk.RevCommit\nimport ru.surfstudio.android.build.utils.EMPTY_STRING\n+/**\n+ * Commit for mirror repository\n+ */\ndata class CommitWithBranch(\nval commit: RevCommit,\nvar branch: String = EMPTY_STRING,\n@@ -13,6 +16,9 @@ data class CommitWithBranch(\noverride fun toString() = \"$type $branch ${commit.shortMessage}\"\n}\n+/**\n+ * State for commit: simple, merge commit and beginning of mirroring\n+ */\nenum class CommitType {\nSIMPLE, MERGE, MIRROR_START_POINT\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -73,31 +73,11 @@ abstract class BaseGitRepository {\nreturn result\n}\n- fun reset(revCommit: RevCommit) {\n- git.reset()\n- .setMode(ResetCommand.ResetType.HARD)\n- .setRef(revCommit.name)\n- .call()\n- }\n-\n- fun checkoutBranch(branchName: String) {\n- val isBranchCreated = git.branchList().call()\n- .map { it.name }\n- .extractBranchNames()\n- .contains(branchName)\n-\n- git.checkout()\n- .setCreateBranch(!isBranchCreated)\n- .setName(branchName)\n- .call()\n- }\n-\n- fun checkoutCommit(commitHash: String) {\n- git.checkout()\n- .setName(commitHash)\n- .call()\n- }\n-\n+ /**\n+ * get all changes of commit\n+ *\n+ * @param commit commit to get changes for\n+ */\nfun getChanges(commit: RevCommit): MutableList<DiffEntry> {\nval reader = git.repository.newObjectReader()\n@@ -115,7 +95,24 @@ abstract class BaseGitRepository {\n.call()\n}\n- private fun getBranchName(commit: String): String {\n+ /**\n+ * Get branches by id\n+ *\n+ * @param id of object branch should contain\n+ * @return list of branches\n+ */\n+ fun getBranchesByContainsId(id: String): List<Ref> = git.branchList()\n+ .setListMode(ListBranchCommand.ListMode.ALL)\n+ .setContains(id)\n+ .call()\n+\n+ /**\n+ * get branch by commit\n+ *\n+ * @param commit hash of commit\n+ * @return branch name\n+ */\n+ fun getBranchNameByCommit(commit: String): String {\nval branches = git.branchList()\n.setContains(commit)\n.call()\n@@ -157,17 +154,54 @@ abstract class BaseGitRepository {\nreturn branches[0]\n}\n- fun getBranchById(id: String): Ref? = git.branchList()\n- .setListMode(ListBranchCommand.ListMode.ALL)\n+ /**\n+ * reset repository to commit\n+ *\n+ * @param revCommit commit to reset to\n+ */\n+ fun reset(revCommit: RevCommit) {\n+ git.reset()\n+ .setMode(ResetCommand.ResetType.HARD)\n+ .setRef(revCommit.name)\n.call()\n- .filter { it.name != \"HEAD\" }\n- .find { it.objectId.name == id }\n+ }\n- fun getBranchesByContainsId(id: String): List<Ref> = git.branchList()\n- .setListMode(ListBranchCommand.ListMode.ALL)\n- .setContains(id)\n+ /**\n+ * checkout branch by name. If not exist create\n+ *\n+ * @param branchName branch name for checkout\n+ */\n+ fun checkoutBranch(branchName: String) {\n+ val isBranchCreated = git.branchList().call()\n+ .map { it.name }\n+ .extractBranchNames()\n+ .contains(branchName)\n+\n+ git.checkout()\n+ .setCreateBranch(!isBranchCreated)\n+ .setName(branchName)\n+ .call()\n+ }\n+\n+ /**\n+ * checkout commit\n+ *\n+ * @param commitHash commit hash to checkout\n+ */\n+\n+ fun checkoutCommit(commitHash: String) {\n+ git.checkout()\n+ .setName(commitHash)\n.call()\n+ }\n+ /**\n+ * merge to current branch another one\n+ *\n+ * @param secondBranch branch to merge\n+ *\n+ * @return conflicts if there are any\n+ */\nfun merge(secondBranch: String) = git.merge()\n.setCommit(false)\n.include(getBranch(secondBranch))\n@@ -175,15 +209,23 @@ abstract class BaseGitRepository {\n?.conflicts\n?.map { it.key } ?: emptyList()\n+ /**\n+ * add to git index\n+ *\n+ * @param filePath path to file to add\n+ */\n+ fun addToIndex(filePath: String) = git.add()\n+ .addFilepattern(filePath)\n+ .call()\n- fun getBranch(refName: String): Ref {\n+ /**\n+ * get branch by name\n+ *\n+ * @param refName name of branch\n+ */\n+ private fun getBranch(refName: String): Ref {\nreturn git.branchList().call()\n.find { it.name.substringAfterLast(\"/\") == refName }\n?: throw BranchNotFoundException(refName)\n}\n-\n- fun addToIndex(filePath: String) = git.add()\n- .addFilepattern(filePath)\n- .call()\n-\n}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\npackage ru.surfstudio.android.build.tasks.deploy_to_mirror\nimport org.eclipse.jgit.diff.DiffEntry\n+import org.eclipse.jgit.lib.Ref\nimport org.eclipse.jgit.revwalk.RevCommit\nimport ru.surfstudio.android.build.exceptions.deploy_to_mirror.RevCommitNotFoundException\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.model.CommitType\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.model.CommitWithBranch\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.MirrorRepository\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.StandardRepository\n-import ru.surfstudio.android.build.utils.EMPTY_STRING\n-import ru.surfstudio.android.build.utils.mirrorStandardHash\n-import ru.surfstudio.android.build.utils.standardHash\n-import ru.surfstudio.android.build.utils.type\n+import ru.surfstudio.android.build.utils.*\nprivate const val HEAD = \"HEAD\"\n@@ -63,6 +61,21 @@ class MirrorManager(\ngitTree.buildGitTree(rootCommit, standardCommits, mirrorCommits)\napplyGitTreeToMirror()\n+ setBranches(rootCommit)\n+ }\n+\n+ private fun setBranches(rootCommit: RevCommit) {\n+ val branchesToCreate = standardRepository.getBranchesByContainsId(rootCommit.name)\n+ .map(Ref::getName)\n+ .extractBranchNames()\n+ val rootCommitHashMirror = gitTree.commitsToCommit.filter {rootCommit.name == it.commit.name}.first().mirrorCommitHash\n+ branchesToCreate.forEach {branch ->\n+ mirrorRepository.createBranch(branch, rootCommitHashMirror)\n+ }\n+ mirrorRepository.checkoutBranch(branchesToCreate.first())\n+ gitTree.commitsToCommit.map { it.branch }.toSet().forEach {\n+ mirrorRepository.deleteBranch(it)\n+ }\n}\n/**\n@@ -87,6 +100,7 @@ class MirrorManager(\nval mirrorCommit = gitTree.getStartMirrorCommitByStandardHash(commit.commit.standardHash)\nmirrorRepository.reset(mirrorCommit.commit)\nmirrorRepository.checkoutBranch(mirrorCommit.branch)\n+ commit.mirrorCommitHash = mirrorCommit.commit.name\n}\n/**\n@@ -102,6 +116,7 @@ class MirrorManager(\nval changes = standardRepository.getChanges(commit.commit).filter(::shouldMirror)\n+ if (changes.isEmpty()) return\napplyChanges(changes)\nval commitHash = mirrorRepository.commit(commit.commit) ?: EMPTY_STRING\ncommit.mirrorCommitHash = commitHash\n@@ -115,7 +130,6 @@ class MirrorManager(\nprivate fun checkoutMirrorBranchForCommit(commit: CommitWithBranch) {\nwith(mirrorRepository) {\nval parent = gitTree.getParent(commit)\n- checkoutBranch(parent.branch)\nif (parent.mirrorCommitHash.isNotEmpty()) {\ncheckoutCommit(parent.mirrorCommitHash)\n}\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -218,6 +218,20 @@ abstract class BaseGitRepository {\n.addFilepattern(filePath)\n.call()\n+ /**\n+ * create branch\n+ */\n+ fun createBranch(branchName: String, startCommit: String){\n+ git.branchCreate().setForce(true).setName(branchName).setStartPoint(startCommit).call()\n+ }\n+\n+ /**\n+ * delete branch\n+ */\n+ fun deleteBranch(branchName: String){\n+ git.branchDelete().setBranchNames(branchName).setForce(true).call()\n+ }\n+\n/**\n* get branch by name\n*\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n@@ -2,14 +2,18 @@ package ru.surfstudio.android.build.tasks.deploy_to_mirror\nimport org.eclipse.jgit.lib.Ref\nimport org.eclipse.jgit.revwalk.RevCommit\n-import ru.surfstudio.android.build.exceptions.deploy_to_mirror.*\n+import ru.surfstudio.android.build.exceptions.deploy_to_mirror.GitNodeNotFoundException\n+import ru.surfstudio.android.build.exceptions.deploy_to_mirror.ManyBranchesFoundException\n+import ru.surfstudio.android.build.exceptions.deploy_to_mirror.MirrorCommitNotFoundByStandardHashException\n+import ru.surfstudio.android.build.exceptions.deploy_to_mirror.NoEndsDefineException\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.model.CommitType\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.model.CommitWithBranch\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.MirrorRepository\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.StandardRepository\n-import ru.surfstudio.android.build.utils.*\n-\n-private const val HEAD = \"HEAD\"\n+import ru.surfstudio.android.build.utils.BranchCreator\n+import ru.surfstudio.android.build.utils.extractBranchNames\n+import ru.surfstudio.android.build.utils.mirrorStandardHash\n+import ru.surfstudio.android.build.utils.standardHash\n/**\n* Data structure based on tree\n@@ -21,48 +25,79 @@ class GitTree(\n) {\nprivate lateinit var rootNode: Node\n- private lateinit var rootCommitWithBranch: CommitWithBranch\n- private lateinit var mirrorNodes: Set<Node>\n- private val nodes: MutableSet<Node> = mutableSetOf()\n- private val commitsWithBranch: MutableSet<CommitWithBranch> = mutableSetOf()\n+ private val mirrorNodes: MutableSet<Node> = mutableSetOf()\n+ private val standardNodes: MutableSet<Node> = mutableSetOf()\n+\nlateinit var mirrorStartCommits: Set<CommitWithBranch>\n- lateinit var commitsToCommit: List<CommitWithBranch>\n+ lateinit var standardCommitsForMirror: List<CommitWithBranch>\n/**\n- * Build GitTree with correct structure\n+ * Build GitTree representation of standard repository with correct structure\n*/\nfun buildGitTree(\nrootRevCommit: RevCommit,\nstandardRevCommits: Iterable<RevCommit>,\nmirrorRevCommits: Iterable<RevCommit>\n) {\n- setRootNode(rootRevCommit)\n- setMirrorNodes(mirrorRevCommits)\n- addCommitsToTree(standardRevCommits)\n- cut()\n-// configureBranches()\n+ createRootNode(rootRevCommit)\n+ createMirrorNodes(mirrorRevCommits)\n+ createStandardNodes(standardRevCommits)\n-// commitsWithBranch\n-// .sortedBy { it.commit.commitTime }\n-// .forEach {\n-// println(\"Commit ${it.commit.name} - ${it.branch}\")\n-// }\n+ defineCommits()\n}\n- private fun setRootNode(value: RevCommit) {\n+ fun getStartMirrorCommitByStandardHash(standardHash: String): CommitWithBranch {\n+ return mirrorStartCommits.find { it.commit.mirrorStandardHash == standardHash }\n+ ?: throw MirrorCommitNotFoundByStandardHashException(standardHash)\n+ }\n+\n+ fun getParent(commit: CommitWithBranch): CommitWithBranch {\n+ val node = standardNodes.find { it.value == commit.commit }\n+ ?: throw GitNodeNotFoundException(commit.commit)\n+ return standardCommitsForMirror.find { it.commit == node.parents.first().value }\n+ ?: throw GitNodeNotFoundException(node.value)\n+ }\n+\n+ fun getMergeParents(commit: CommitWithBranch): List<CommitWithBranch> {\n+ val node = standardNodes.find { it.value == commit.commit }\n+ ?: throw GitNodeNotFoundException(commit.commit)\n+\n+ val parentRevCommits = node.parents.map { it.value }\n+\n+ return standardCommitsForMirror.filter { parentRevCommits.contains(it.commit) }\n+ }\n+\n+ /**\n+ * Add root node to standardNodes list\n+ *\n+ * @param value root commit\n+ */\n+ private fun createRootNode(value: RevCommit) {\nval node = Node(value).apply {\nstate = NodeState.ROOT\n}\nrootNode = node\n- nodes.add(node)\n+ standardNodes.add(node)\n}\n- private fun setMirrorNodes(mirrorRevCommits: Iterable<RevCommit>) {\n- mirrorNodes = mirrorRevCommits.map { Node(it).apply { state = NodeState.END } }.toSet()\n- nodes.addAll(mirrorNodes)\n+ /**\n+ * Add commits from mirror repository as mirror standardNodes\n+ *\n+ * @param mirrorRevCommits commits from mirror repository\n+ */\n+ private fun createMirrorNodes(mirrorRevCommits: Iterable<RevCommit>) {\n+ mirrorNodes.addAll(mirrorRevCommits.map { Node(it)}.toSet())\n+ if (mirrorNodes.isEmpty()) throw NoEndsDefineException()\n}\n- private fun addCommitsToTree(standardRevCommits: Iterable<RevCommit>) {\n+ /**\n+ * Finds all commits from standard repository that mirror doesnt have and adds them to standardNodes list\n+ * Starts from [rootNode], every iteration consists of taking parents of current node,\n+ * adding them to standardNodes list until meet commit from [mirrorNodes].\n+ *\n+ * @param standardRevCommits commits from standard repository\n+ */\n+ private fun createStandardNodes(standardRevCommits: Iterable<RevCommit>) {\nval c = mutableSetOf(rootNode.value)\nval p = mutableSetOf<RevCommit>()\n@@ -90,6 +125,12 @@ class GitTree(\n}\n}\n+ /**\n+ * adds commit to corresponded node and sets parents and children\n+ *\n+ * @param commit commit to add\n+ * @param parentCommits parents of commit\n+ */\nprivate fun addRevCommitToNodes(commit: RevCommit, parentCommits: List<RevCommit>) {\nval node = findNode(commit)\nval parents = parentCommits.map { findOrCreateNode(it) }\n@@ -99,28 +140,68 @@ class GitTree(\nnode.parents.add(parent)\n}\n- nodes.add(node)\n+ standardNodes.add(node)\n}\n- private fun cut() {\n- if (mirrorNodes.isEmpty()) throw NoEndsDefineException()\n+ /**\n+ * get node from [standardNodes] by commit\n+ *\n+ * @param value commit\n+ *\n+ * @return node\n+ */\n+ private fun findNode(value: RevCommit) = standardNodes.find { it.value == value }\n+ ?: throw GitNodeNotFoundException(value)\n- mirrorNodes.forEach { end ->\n- nodes.find {\n- it.value.standardHash == end.value.mirrorStandardHash\n- }?.state = NodeState.END\n+ /**\n+ * gets node from standardNodes or creates if not found\n+ *\n+ * @param value commit\n+ *\n+ * @return node\n+ */\n+ private fun findOrCreateNode(value: RevCommit): Node {\n+ var result = standardNodes.find { it.value == value }\n+\n+ if (result == null) {\n+ result = Node(value)\n+ standardNodes.add(result)\n}\n- nodes.removeAll(mirrorNodes)\n+ return result\n+ }\n- val ends = nodes.filter { it.state == NodeState.END }\n+ /**\n+ * mark all standardNodes in standardNodes list, that have mirrorStandardHash contained in mirrorNodes as END standardNodes\n+ */\n+ private fun markEndNodes() {\n+ mirrorNodes.forEach { mirrorNode ->\n+ standardNodes.find {\n+ it.value.standardHash == mirrorNode.value.mirrorStandardHash\n+ }?.state = NodeState.END\n+ }\n+ }\n- val lines: List<List<Node>> = ends.flatMap { end -> buildChain(mutableListOf(end)) }\n- .filter { ends.contains(it.first()) && it.last() == rootNode }\n+ /**\n+ * create commits models\n+ */\n+ private fun defineCommits(){\n+ val lines = createLines()\n- markNodes(lines)\nbuildMirrorStartCommits(lines)\n- defineCommitsToCommit(lines)\n+ buildStandardCommitsForMirror(lines)\n+ }\n+\n+ /**\n+ * creates lines: all ways from [rootNode] to end standardNodes\n+ */\n+ private fun createLines(): List<List<Node>> {\n+ markEndNodes()\n+\n+ val ends = standardNodes.filter { it.state == NodeState.END }\n+\n+ return ends.flatMap { end -> buildChain(mutableListOf(end)) }\n+ .filter { ends.contains(it.first()) && it.last() == rootNode }\n}\nprivate fun buildMirrorStartCommits(lines: List<List<Node>>) {\n@@ -138,19 +219,18 @@ class GitTree(\nif (branchNameNames.size != 1) {\nthrow ManyBranchesFoundException(it.value.name, branchNameNames)\n}\n-\nCommitWithBranch(it.value, branchNameNames[0])\n}.toSet()\n}\n- private fun defineCommitsToCommit(lines: List<List<Node>>) {\n+ private fun buildStandardCommitsForMirror(lines: List<List<Node>>) {\nval existedBranchNames = mirrorRepository.getAllBranches()\n.map { it.name }\n.extractBranchNames()\nval mirrorStartCommitsStandardHashes = mirrorStartCommits.map { it.commit.mirrorStandardHash }\n- commitsToCommit = nodes\n+ standardCommitsForMirror = standardNodes\n.map {\nval type = when {\nmirrorStartCommitsStandardHashes.contains(it.value.standardHash) -> {\n@@ -159,7 +239,6 @@ class GitTree(\nit.parents.size == 2 -> CommitType.MERGE\nelse -> CommitType.SIMPLE\n}\n-\nCommitWithBranch(commit = it.value, type = type)\n}\n.sortedBy { it.commit.commitTime }\n@@ -167,37 +246,15 @@ class GitTree(\nlines.forEach { line ->\nval branchName = BranchCreator.generateBranchName(existedBranchNames)\nline.forEach { node ->\n- val commit = commitsToCommit.find { it.commit == node.value }\n+ val commit = standardCommitsForMirror.find { it.commit == node.value }\nif (commit?.branch?.isEmpty() == true) commit.branch = branchName\n}\n}\n}\n-// /**\n-// * Return commits with changes that must be commit\n-// */\n-// fun getCommitsWithChanges(): List<RevCommit> = nodes\n-// .sortedBy { it.value.commitTime }\n-// .drop(1)\n-// .map(Node::value)\n-//\n-// /**\n-// * Return commit to start apply changes, but this commit already exist in mirror\n-// */\n-// fun getStandardStartCommit(): RevCommit = if (nodes.isEmpty()) {\n-// throw StartCommitNotFoundException()\n-// } else {\n-// nodes.minBy { it.value.commitTime }!!.value\n-// }\n-//\n-// fun getMirrorCommitByStandard(standardCommitHash: String): RevCommit = if (mirrorNodes.isEmpty()) {\n-// throw StartCommitNotFoundException()\n-// } else {\n-// mirrorNodes.find {\n-// it.value.mirrorStandardHash == standardCommitHash\n-// }?.value ?: throw StartCommitNotFoundException()\n-// }\n-\n+ /**\n+ * creates chain recursively\n+ */\nprivate fun buildChain(chain: MutableList<Node>): List<List<Node>> {\nval result: MutableList<List<Node>> = mutableListOf()\nvar node = chain.last()\n@@ -225,28 +282,9 @@ class GitTree(\n}\n}\n- private fun markNodes(lines: List<List<Node>>) {\n- lines.flatten()\n- .toSet()\n- .forEach {\n- if (it.state == NodeState.NONE) it.state = NodeState.MARKED\n- }\n- }\n-\n- private fun findNode(value: RevCommit) = nodes.find { it.value == value }\n- ?: throw GitNodeNotFoundException(value)\n-\n- private fun findOrCreateNode(value: RevCommit): Node {\n- var result = nodes.find { it.value == value }\n-\n- if (result == null) {\n- result = Node(value)\n- nodes.add(result)\n- }\n-\n- return result\n- }\n-\n+ /**\n+ * represents information about commit and its parents\n+ */\nprivate data class Node(\nval value: RevCommit,\nvar state: NodeState = NodeState.NONE,\n@@ -263,154 +301,16 @@ class GitTree(\n}\noverride fun toString(): String = \"${value.shortMessage} - $state\"\n-// \"{value:\\\"$value\\\", state:\\\"$state\\\", parents: \\\"${parents.map(Node::value)}\\\", x:\\\"${children.map(Node::value)}\\\"}\"\n}\n+ /**\n+ * State of node:\n+ * [NONE] - simple node\n+ * [END] - nodes that already have corresponded nodes in mirror repository\n+ * [ROOT] - node that corresponds commit hash in task parameter\n+ */\nprivate enum class NodeState {\n- NONE, END, ROOT, MARKED\n- }\n-\n-// //WORK WITH BRANCHES\n-// private fun configureBranches() {\n-// rootCommitWithBranch = CommitWithBranch(rootNode.value, getRootBranchName())\n-// var commitWithBranch = rootCommitWithBranch\n-// while (commitWithBranch.commit.parents.isNotEmpty()) {\n-// commitWithBranch = handelCommitWithBranch(commitWithBranch) ?: return\n-// }\n-// }\n-\n- private fun handelCommitWithBranch(commitWithBranch: CommitWithBranch): CommitWithBranch? {\n- commitsWithBranch.add(commitWithBranch)\n-\n- val parents = findNode(commitWithBranch.commit).parents\n- return when (parents.size) {\n- 0 -> null\n- 1 -> CommitWithBranch(parents.first().value, commitWithBranch.branch)\n- 2 -> merge(commitWithBranch)\n- else -> throw GitNodeParentException(commitWithBranch.toString())\n- }\n- }\n-\n- private fun merge(mergeCommit: CommitWithBranch): CommitWithBranch {\n- val parents = findNode(mergeCommit.commit).parents.toList()\n-\n- val firstParent = parents[0]\n- val secondParent = parents[1]\n- val startMergeCommit = CommitWithBranch(\n- findStartMergeCommit(firstParent, secondParent).value,\n- mergeCommit.branch\n- )\n-\n- val firstBranches = findBranch(firstParent.value.name)\n- val secondBranches = findBranch(secondParent.value.name)\n-\n- var firstCommitWithBranch: CommitWithBranch\n- var secondCommitWithBranch: CommitWithBranch\n-\n- if (firstBranches.size < secondBranches.size) {\n- firstCommitWithBranch = CommitWithBranch(\n- firstParent.value,\n- mergeCommit.branch\n- )\n- secondCommitWithBranch = CommitWithBranch(\n- secondParent.value,\n- getUnicBranch(mergeCommit, firstBranches, secondBranches)\n- )\n- } else {\n- firstCommitWithBranch = CommitWithBranch(\n- firstParent.value,\n- getUnicBranch(mergeCommit, secondBranches, firstBranches)\n- )\n- secondCommitWithBranch = CommitWithBranch(\n- secondParent.value,\n-\n- mergeCommit.branch\n- )\n- }\n-\n- while (firstCommitWithBranch.commit != startMergeCommit.commit) {\n- firstCommitWithBranch = handelCommitWithBranch(firstCommitWithBranch)\n- ?: return startMergeCommit\n- }\n-\n- while (secondCommitWithBranch.commit != startMergeCommit.commit) {\n- secondCommitWithBranch = handelCommitWithBranch(secondCommitWithBranch)\n- ?: return startMergeCommit\n- }\n-\n- return startMergeCommit\n- }\n-\n- private fun getUnicBranch(\n- mergeCommit: CommitWithBranch,\n- smallList: List<String>,\n- bigList: List<String>\n- ): String {\n- val list = bigList.filter { !smallList.contains(it) }\n- if (list.size != 1) {\n- throw MergesCommitBranchNotDefinedException(mergeCommit, smallList, bigList)\n- }\n- return list.first()\n- }\n-\n-// private fun getRootBranchName(): String {\n-// val id = rootNode.value.name\n-//\n-// var rootBranchName = standardRepository.getBranchById(id)?.name?.substringAfterLast(\"/\")\n-// ?: EMPTY_STRING\n-//\n-// if (rootBranchName.isEmpty()) rootBranchName = findBranch(id).first()\n-// if (rootBranchName.isEmpty()) throw BranchNotFoundException(id)\n-//\n-// return rootBranchName\n-// }\n-\n- private fun findBranch(id: String) = standardRepository.getBranchesByContainsId(id)\n- .map { it.name.substringAfterLast(\"/\") }\n- .distinct()\n- .filter { it != HEAD }\n-\n- private fun findStartMergeCommit(firstNode: Node, secondNode: Node): Node {\n- val firstParents = getAllParentNode(firstNode)\n- .filter { it.children.size > 1 }\n- val secondParents = getAllParentNode(secondNode)\n- .filter { it.children.size > 1 }\n-\n- return firstParents.filter { secondParents.contains(it) }.maxBy { it.value.commitTime }!!\n- }\n-\n- private fun getAllParentNode(node: Node): Set<Node> {\n- var parents = node.parents.toList()\n- val result = mutableSetOf<Node>().apply {\n- addAll(parents)\n- }\n- while (parents.isNotEmpty()) {\n- val praParents = parents.flatMap { it.parents }\n- result.addAll(praParents)\n- parents = praParents\n- }\n- return result\n- }\n-\n- fun getStartMirrorCommitByStandardHash(standardHash: String): CommitWithBranch {\n- return mirrorStartCommits.find { it.commit.mirrorStandardHash == standardHash }\n- ?: throw MirrorCommitNotFoundByStandardHashException(standardHash)\n- }\n-\n- fun getParent(commit: CommitWithBranch): CommitWithBranch {\n- val node = nodes.find { it.value == commit.commit }\n- ?: throw GitNodeNotFoundException(commit.commit)\n- return commitsToCommit.find { it.commit == node.parents.first().value }\n- ?: throw GitNodeNotFoundException(node.value)\n- }\n-\n- fun getMergeParents(commit: CommitWithBranch): List<CommitWithBranch> {\n- val node = nodes.find { it.value == commit.commit }\n- ?: throw GitNodeNotFoundException(commit.commit)\n-\n- val parentRevCommits = node.parents.map { it.value }\n-\n- return commitsToCommit.filter { parentRevCommits.contains(it.commit) }\n+ NONE, END, ROOT\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n@@ -38,7 +38,6 @@ class MirrorManager(\n)\nprivate val foldersToMirror = listOf(\ncomponentDirectory,\n- \"buildSrc\",\n\"common\"\n)\n@@ -68,12 +67,12 @@ class MirrorManager(\nval branchesToCreate = standardRepository.getBranchesByContainsId(rootCommit.name)\n.map(Ref::getName)\n.extractBranchNames()\n- val rootCommitHashMirror = gitTree.commitsToCommit.filter {rootCommit.name == it.commit.name}.first().mirrorCommitHash\n+ val rootCommitHashMirror = gitTree.standardCommitsForMirror.filter {rootCommit.name == it.commit.name}.first().mirrorCommitHash\nbranchesToCreate.forEach {branch ->\nmirrorRepository.createBranch(branch, rootCommitHashMirror)\n}\nmirrorRepository.checkoutBranch(branchesToCreate.first())\n- gitTree.commitsToCommit.map { it.branch }.toSet().forEach {\n+ gitTree.standardCommitsForMirror.map { it.branch }.toSet().forEach {\nmirrorRepository.deleteBranch(it)\n}\n}\n@@ -82,7 +81,7 @@ class MirrorManager(\n* For all git tree commits apply them to mirror repository\n*/\nprivate fun applyGitTreeToMirror() {\n- gitTree.commitsToCommit.forEach {\n+ gitTree.standardCommitsForMirror.forEach {\nwhen (it.type) {\nCommitType.SIMPLE -> commit(it)\nCommitType.MERGE -> merge(it)\n@@ -112,11 +111,11 @@ class MirrorManager(\n*/\nprivate fun commit(commit: CommitWithBranch) {\nstandardRepository.reset(commit.commit)\n- checkoutMirrorBranchForCommit(commit)\n-\nval changes = standardRepository.getChanges(commit.commit).filter(::shouldMirror)\nif (changes.isEmpty()) return\n+\n+ checkoutMirrorBranchForCommit(commit)\napplyChanges(changes)\nval commitHash = mirrorRepository.commit(commit.commit) ?: EMPTY_STRING\ncommit.mirrorCommitHash = commitHash\n@@ -152,6 +151,8 @@ class MirrorManager(\n.map(CommitWithBranch::branch)\n.first { it != mainBranch }\n+ if (!mirrorRepository.isBranchExists(mainBranch) || !mirrorRepository.isBranchExists(secondBranch)) return\n+\nmirrorRepository.checkoutBranch(mainBranch)\nval conflicts = mirrorRepository.merge(secondBranch)\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -172,17 +172,22 @@ abstract class BaseGitRepository {\n* @param branchName branch name for checkout\n*/\nfun checkoutBranch(branchName: String) {\n- val isBranchCreated = git.branchList().call()\n- .map { it.name }\n- .extractBranchNames()\n- .contains(branchName)\n-\ngit.checkout()\n- .setCreateBranch(!isBranchCreated)\n+ .setCreateBranch(!isBranchExists(branchName))\n.setName(branchName)\n.call()\n}\n+ /**\n+ *\n+ */\n+ fun isBranchExists(branchName: String):Boolean{\n+ return git.branchList().call()\n+ .map { it.name }\n+ .extractBranchNames()\n+ .contains(branchName)\n+ }\n+\n/**\n* checkout commit\n*\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n@@ -61,16 +61,16 @@ class MirrorManager(\ngitTree.buildGitTree(rootCommit, standardCommits, mirrorCommits)\napplyGitTreeToMirror()\n- setBranches(rootCommit)\n+ setBranches()\n}\n- private fun setBranches(rootCommit: RevCommit) {\n- val branchesToCreate = standardRepository.getBranchesByContainsId(rootCommit.name)\n+ private fun setBranches() {\n+ val commitToSetBranches = gitTree.standardCommitsForMirror.last { it.type == CommitType.COMMITED }\n+ val branchesToCreate = standardRepository.getBranchesByContainsId(commitToSetBranches.commit.name)\n.map(Ref::getName)\n.extractBranchNames()\n- val rootCommitHashMirror = gitTree.standardCommitsForMirror.filter {rootCommit.name == it.commit.name}.first().mirrorCommitHash\nbranchesToCreate.forEach {branch ->\n- mirrorRepository.createBranch(branch, rootCommitHashMirror)\n+ mirrorRepository.createBranch(branch, commitToSetBranches.mirrorCommitHash)\n}\nmirrorRepository.checkoutBranch(branchesToCreate.first())\ngitTree.standardCommitsForMirror.map { it.branch }.toSet().forEach {\n@@ -120,6 +120,7 @@ class MirrorManager(\napplyChanges(changes)\nval commitHash = mirrorRepository.commit(commit.commit) ?: EMPTY_STRING\ncommit.mirrorCommitHash = commitHash\n+ commit.type = CommitType.COMMITED\n}\n/**\n@@ -164,6 +165,7 @@ class MirrorManager(\nval commitHash = mirrorRepository.commit(commit.commit)\ncommit.mirrorCommitHash = commitHash ?: EMPTY_STRING\n+ commit.type = CommitType.COMMITED\n}\n/**\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/model/CommitWithBranch.kt\n@@ -20,5 +20,5 @@ data class CommitWithBranch(\n* State for commit: simple, merge commit and beginning of mirroring\n*/\nenum class CommitType {\n- SIMPLE, MERGE, MIRROR_START_POINT\n+ SIMPLE, MERGE, MIRROR_START_POINT, COMMITED\n}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n@@ -28,8 +28,8 @@ class GitTree(\nprivate val mirrorNodes: MutableSet<Node> = mutableSetOf()\nprivate val standardNodes: MutableSet<Node> = mutableSetOf()\n- lateinit var mirrorStartCommits: Set<CommitWithBranch>\n- lateinit var standardCommitsForMirror: List<CommitWithBranch>\n+ lateinit var startMirrorRepositoryCommits: Set<CommitWithBranch>\n+ lateinit var standardRepositoryCommitsForMirror: List<CommitWithBranch>\n/**\n* Build GitTree representation of standard repository with correct structure\n@@ -46,25 +46,46 @@ class GitTree(\ndefineCommits()\n}\n+ /**\n+ * get start commit from mirror repository\n+ *\n+ * @param standardHash hash to find commit by\n+ *\n+ * @return commit with corresponded branch from start mirror repository commits\n+ */\nfun getStartMirrorCommitByStandardHash(standardHash: String): CommitWithBranch {\n- return mirrorStartCommits.find { it.commit.mirrorStandardHash == standardHash }\n+ return startMirrorRepositoryCommits.find { it.commit.mirrorStandardHash == standardHash }\n?: throw MirrorCommitNotFoundByStandardHashException(standardHash)\n}\n+ /**\n+ * get parent commit for specified commit\n+ *\n+ * @param commit commit to get parent for\n+ *\n+ * @return parent for commit\n+ */\nfun getParent(commit: CommitWithBranch): CommitWithBranch {\nval node = standardNodes.find { it.value == commit.commit }\n?: throw GitNodeNotFoundException(commit.commit)\n- return standardCommitsForMirror.find { it.commit == node.parents.first().value }\n+ return standardRepositoryCommitsForMirror.find { it.commit == node.parents.first().value }\n?: throw GitNodeNotFoundException(node.value)\n}\n+ /**\n+ * get parents commits for specified commit for merge\n+ *\n+ * @param commit commit to get parents for merge\n+ *\n+ * @return parents of specified commit\n+ */\nfun getMergeParents(commit: CommitWithBranch): List<CommitWithBranch> {\nval node = standardNodes.find { it.value == commit.commit }\n?: throw GitNodeNotFoundException(commit.commit)\nval parentRevCommits = node.parents.map { it.value }\n- return standardCommitsForMirror.filter { parentRevCommits.contains(it.commit) }\n+ return standardRepositoryCommitsForMirror.filter { parentRevCommits.contains(it.commit) }\n}\n/**\n@@ -183,7 +204,7 @@ class GitTree(\n}\n/**\n- * create commits models\n+ * create mirror repository started commits and standard repository commits\n*/\nprivate fun defineCommits(){\nval lines = createLines()\n@@ -204,10 +225,16 @@ class GitTree(\n.filter { ends.contains(it.first()) && it.last() == rootNode }\n}\n+ /**\n+ * creates mirror repository commits which branches models,\n+ * which are started for applying standard commits afterwards\n+ *\n+ * @param lines created lines in standard repository tree\n+ */\nprivate fun buildMirrorStartCommits(lines: List<List<Node>>) {\nval mirrorStandardHashes = lines.map { it.first().value.standardHash }\n- mirrorStartCommits = mirrorNodes\n+ startMirrorRepositoryCommits = mirrorNodes\n.filter {\nmirrorStandardHashes.contains(it.value.mirrorStandardHash)\n}\n@@ -223,14 +250,23 @@ class GitTree(\n}.toSet()\n}\n+ /**\n+ * creates from lines standard repository commit for applying to mirror. For every line branch name is created\n+ * Marks every commit either as:\n+ * MIRROR_START_POINT - commits that are already in mirror repository and applying commits started from\n+ * SIMPLE - usual commit\n+ * MERGE - merge commit\n+ *\n+ * @param lines created lines in standard repository tree\n+ */\nprivate fun buildStandardCommitsForMirror(lines: List<List<Node>>) {\nval existedBranchNames = mirrorRepository.getAllBranches()\n.map { it.name }\n.extractBranchNames()\n- val mirrorStartCommitsStandardHashes = mirrorStartCommits.map { it.commit.mirrorStandardHash }\n+ val mirrorStartCommitsStandardHashes = startMirrorRepositoryCommits.map { it.commit.mirrorStandardHash }\n- standardCommitsForMirror = standardNodes\n+ standardRepositoryCommitsForMirror = standardNodes\n.map {\nval type = when {\nmirrorStartCommitsStandardHashes.contains(it.value.standardHash) -> {\n@@ -246,7 +282,7 @@ class GitTree(\nlines.forEach { line ->\nval branchName = BranchCreator.generateBranchName(existedBranchNames)\nline.forEach { node ->\n- val commit = standardCommitsForMirror.find { it.commit == node.value }\n+ val commit = standardRepositoryCommitsForMirror.find { it.commit == node.value }\nif (commit?.branch?.isEmpty() == true) commit.branch = branchName\n}\n}\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n@@ -65,7 +65,7 @@ class MirrorManager(\n}\nprivate fun setBranches() {\n- val commitToSetBranches = gitTree.standardCommitsForMirror.last { it.type == CommitType.COMMITED }\n+ val commitToSetBranches = gitTree.standardRepositoryCommitsForMirror.last { it.type == CommitType.COMMITED }\nval branchesToCreate = standardRepository.getBranchesByContainsId(commitToSetBranches.commit.name)\n.map(Ref::getName)\n.extractBranchNames()\n@@ -73,7 +73,7 @@ class MirrorManager(\nmirrorRepository.createBranch(branch, commitToSetBranches.mirrorCommitHash)\n}\nmirrorRepository.checkoutBranch(branchesToCreate.first())\n- gitTree.standardCommitsForMirror.map { it.branch }.toSet().forEach {\n+ gitTree.standardRepositoryCommitsForMirror.map { it.branch }.toSet().forEach {\nmirrorRepository.deleteBranch(it)\n}\n}\n@@ -82,7 +82,7 @@ class MirrorManager(\n* For all git tree commits apply them to mirror repository\n*/\nprivate fun applyGitTreeToMirror() {\n- gitTree.standardCommitsForMirror.forEach {\n+ gitTree.standardRepositoryCommitsForMirror.forEach {\nwhen (it.type) {\nCommitType.SIMPLE -> commit(it)\nCommitType.MERGE -> merge(it)\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ConfigInfoProvider.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ConfigInfoProvider.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ConfigInfoProvider.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ConfigInfoProvider.kt\n@@ -3,6 +3,7 @@ package ru.surfstudio.android.build\nimport com.google.gson.GsonBuilder\nimport ru.surfstudio.android.build.model.GlobalConfigInfo\nimport ru.surfstudio.android.build.model.json.ConfigInfoJson\n+import ru.surfstudio.android.build.utils.EMPTY_STRING\nimport ru.surfstudio.android.build.utils.JsonHelper\nimport java.io.File\n@@ -13,24 +14,33 @@ private const val CONFIG_INFO_JSON_FILE_PATH = \"buildSrc/projectConfiguration.js\n*/\nobject ConfigInfoProvider {\n- private val configInfoJsonFile = File(CONFIG_INFO_JSON_FILE_PATH)\n+ /**\n+ * specified only when running settings for ability to add android standard locally\n+ * otherwise will be empty\n+ */\n+ var currentDirectory = EMPTY_STRING\n- var globalConfigInfo: GlobalConfigInfo = parseProjectConfigInfoJson()\n+ private val configInfoJsonFile: File by lazy { openConfigInfoFile() }\n+ val globalConfigInfo: GlobalConfigInfo by lazy { parseProjectConfigInfoJson() }\nfun incrementUnstableVersion() {\n- globalConfigInfo = globalConfigInfo.copy(unstableVersion = globalConfigInfo.unstableVersion + 1)\n- JsonHelper.write(ConfigInfoJson(globalConfigInfo), configInfoJsonFile)\n+ val configInfo = globalConfigInfo.copy(unstableVersion = globalConfigInfo.unstableVersion + 1)\n+ JsonHelper.write(ConfigInfoJson(configInfo), configInfoJsonFile)\n}\nfun incrementProjectSnapshotVersion() {\n- globalConfigInfo = globalConfigInfo.copy(projectSnapshotVersion = globalConfigInfo.projectSnapshotVersion + 1)\n- JsonHelper.write(ConfigInfoJson(globalConfigInfo), configInfoJsonFile)\n+ val configInfo = globalConfigInfo.copy(projectSnapshotVersion = globalConfigInfo.projectSnapshotVersion + 1)\n+ JsonHelper.write(ConfigInfoJson(configInfo), configInfoJsonFile)\n}\n- private fun parseProjectConfigInfoJson(): GlobalConfigInfo = GsonBuilder().create()\n+ private fun parseProjectConfigInfoJson(): GlobalConfigInfo {\n+ return GsonBuilder().create()\n.fromJson(configInfoJsonFile.reader(), ConfigInfoJson::class.java)\n.transform()\n+ }\n+\n+ private fun openConfigInfoFile() = File(currentDirectory + CONFIG_INFO_JSON_FILE_PATH)\n@JvmStatic\n- private fun getVersion(): String = globalConfigInfo.version\n+ private fun getVersion() = globalConfigInfo.version\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/Initializator.kt\n@@ -10,53 +10,63 @@ import ru.surfstudio.android.build.utils.JsonHelper\nimport java.io.File\nobject Initializator {\n-\n/**\n* Parse value.json and create value\n+ * Added specifying current directory because of developed possibility to include android standard locally\n+ *\n+ * @param currentBuildDirectory directory of current setting project file\n*/\n@JvmStatic\n- fun init() {\n- val jsonComponents = JsonHelper.parseComponentsJson(COMPONENTS_JSON_FILE_PATH)\n+ fun init(currentBuildDirectory: String) {\n+ initConfigProviderWithCurrentDirectory(currentBuildDirectory)\n+ val jsonComponents = JsonHelper.parseComponentsJson(\"$currentBuildDirectory/$COMPONENTS_JSON_FILE_PATH\")\nif (GradlePropertiesManager.isCurrentComponentAMirror()) {\n- checkOnlyMirrorComponentFolder(jsonComponents)\n+ checkOnlyMirrorComponentFolder(jsonComponents, currentBuildDirectory)\n} else {\n- checkAllComponentsFolders(jsonComponents)\n+ checkAllComponentsFolders(jsonComponents, currentBuildDirectory)\n}\nComponents.init(jsonComponents)\n}\n- private fun checkOnlyMirrorComponentFolder(jsonComponents: List<ComponentJson>) {\n+ /**\n+ * set current directory for configuration provider\n+ */\n+ private fun initConfigProviderWithCurrentDirectory(currentDirectory: String) {\n+ ConfigInfoProvider.currentDirectory = \"$currentDirectory/\"\n+ }\n+\n+ private fun checkOnlyMirrorComponentFolder(jsonComponents: List<ComponentJson>, currentDirectory: String) {\nval componentMirrorName = GradlePropertiesManager.getMirrorComponentName()\nval component = jsonComponents.firstOrNull { it.id == componentMirrorName }\n?: throw ComponentNotFoundException(componentMirrorName)\n- checkComponentFolders(component)\n+ checkComponentFolders(component, currentDirectory)\n}\n/**\n* Check value directories for exist\n*/\n- private fun checkAllComponentsFolders(componentJsons: List<ComponentJson>) {\n+ private fun checkAllComponentsFolders(componentJsons: List<ComponentJson>, currentDirectory: String) {\ncomponentJsons.forEach { component ->\n- checkComponentFolders(component)\n+ checkComponentFolders(component, currentDirectory)\n}\n}\n- private fun checkComponentFolders(component: ComponentJson) {\n+ private fun checkComponentFolders(component: ComponentJson, currentDirectory: String) {\n//check component \"dir\"\n- if (!File(component.dir).exists()) {\n+ if (!File(\"$currentDirectory/${component.dir}\").exists()) {\nthrow ComponentDirectoryNotExistException(component.id)\n}\n//check libs\ncomponent.libs.forEach { lib ->\n- if (!File(\"${component.dir}/${lib.dir}\").exists()) {\n+ if (!File(\"$currentDirectory/${component.dir}/${lib.dir}\").exists()) {\nthrow LibraryDirectoryNotExistException(component.id, lib.name, lib.dir)\n}\n}\n//check samples\ncomponent.samples.forEach { sample ->\n- if (!File(\"${component.dir}/${sample.dir}\").exists()) {\n+ if (!File(\"$currentDirectory/${component.dir}/${sample.dir}\").exists()) {\nthrow SampleDirectoryNotExistException(component.id, sample.name)\n}\n}\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt\n+package ru.surfstudio.android.build.tasks\n+\n+import com.google.gson.GsonBuilder\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.tasks.TaskAction\n+import ru.surfstudio.android.build.Components\n+import java.io.File\n+\n+/**\n+ * Task for generating data about versions to JSON file for version plugin\n+ * Do this task before deploy Android-Standard version plugin\n+ */\n+open class GenerateModuleNameFileTask : DefaultTask() {\n+\n+ companion object {\n+ private const val OUTPUT_DIR = \"buildSrc/\"\n+ private const val FILE_NAME = \"modules.json\"\n+ }\n+\n+ @TaskAction\n+ fun generate() {\n+ val gson = GsonBuilder().create()\n+ val moduleNames = (Components.value.flatMap { it.libraries }.map { library -> \"${library.name}\" })\n+ File(\"$OUTPUT_DIR/$FILE_NAME\").writeText(GsonBuilder().create().toJson(moduleNames))\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesContainCurrentVersion.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesContainCurrentVersion.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesContainCurrentVersion.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesContainCurrentVersion.kt\n@@ -6,6 +6,8 @@ import ru.surfstudio.android.build.ReleaseNotes\nimport ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesNotContainVersionException\nimport ru.surfstudio.android.build.model.release_notes.ReleaseNotesInfo\nimport ru.surfstudio.android.build.utils.getPropertyComponent\n+import ru.surfstudio.android.build.Components\n+\n/**\n* Check ReleaseNotes contain current project version\n@@ -14,7 +16,8 @@ open class CheckReleaseNotesContainCurrentVersion : DefaultTask() {\n@TaskAction\nfun check() {\n- val component = project.getPropertyComponent()\n+\n+ Components.value.forEach { component ->\nval releaseNotes: ReleaseNotesInfo = ReleaseNotes.findByComponentName(component.name)\n@@ -25,3 +28,4 @@ open class CheckReleaseNotesContainCurrentVersion : DefaultTask() {\nif (version.isEmpty) throw ReleaseNotesNotContainVersionException(releaseNotes, component.projectVersion)\n}\n}\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateEmitter.kt b/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateEmitter.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateEmitter.kt\n+++ b/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateEmitter.kt\n@@ -15,7 +15,7 @@ interface StateEmitter : Related<PRESENTER> {\noverride fun relationEntity() = PRESENTER\n@CallSuper\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable {\n+ override fun <T> subscribe(observable: Observable<out T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable {\nthrow NotImplementedError(\"StateEmitter cant manage subscription lifecycle\")\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateObserver.kt b/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateObserver.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateObserver.kt\n+++ b/core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/relation/StateObserver.kt\n@@ -15,7 +15,7 @@ interface StateObserver : Related<VIEW> {\noverride fun relationEntity() = VIEW\n@CallSuper\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable {\n+ override fun <T> subscribe(observable: Observable<out T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable {\nthrow NotImplementedError(\"StateEmitter cant manage subscription lifecycle\")\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvi/src/test/java/ru/surfstudio/android/core/mvi/BaseReactTest.kt b/core-mvi/src/test/java/ru/surfstudio/android/core/mvi/BaseReactTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/src/test/java/ru/surfstudio/android/core/mvi/BaseReactTest.kt\n+++ b/core-mvi/src/test/java/ru/surfstudio/android/core/mvi/BaseReactTest.kt\n@@ -71,7 +71,7 @@ class TestView : Related<VIEW> {\noverride fun relationEntity(): VIEW = VIEW\n- override fun <T> subscribe(observable: Observable<T>,\n+ override fun <T> subscribe(observable: Observable<out T>,\nonNext: Consumer<T>,\nonError: (Throwable) -> Unit): Disposable =\nobservable.subscribe(onNext)\n\n\ndiff --git a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxPresenter.kt b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxPresenter.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxPresenter.kt\n+++ b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxPresenter.kt\n@@ -43,7 +43,7 @@ abstract class BaseRxPresenter(\noverride fun relationEntity() = PRESENTER\n- override fun <T> subscribe(observable: Observable<T>,\n+ override fun <T> subscribe(observable: Observable<out T>,\nonNext: Consumer<T>,\nonError: (Throwable) -> Unit): Disposable =\nsuper.subscribe(observable, { onNext.accept(it) }, { onError(it) })\n\n\ndiff --git a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n+++ b/core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/ui/BaseRxViews.kt\n@@ -46,7 +46,11 @@ abstract class BaseRxActivityView : CoreActivityView(), BindableRxView {\noverride fun getPresenters() = emptyArray<BaseRxPresenter>()\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n@@ -67,7 +71,11 @@ abstract class BaseRxFragmentView : CoreFragmentView(), BindableRxView {\nsuper.onDestroy()\n}\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n@@ -85,7 +93,11 @@ abstract class BaseRxDialogView : CoreDialogFragmentView(), BindableRxView {\nsuper.onDestroy()\n}\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n@@ -103,7 +115,11 @@ abstract class BaseRxSimpleDialogFragment : CoreSimpleDialogFragment(), Related<\nsuper.onDestroy()\n}\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n@@ -122,7 +138,11 @@ abstract class BaseRxBottomSheetDialogFragment : CoreBottomSheetDialogFragmentVi\nsuper.onDestroy()\n}\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n@@ -141,7 +161,11 @@ abstract class BaseRxSimpleBottomSheetDialogFragment : CoreSimpleBottomSheetDial\nsuper.onDestroy()\n}\n- override fun <T> subscribe(observable: Observable<T>, onNext: Consumer<T>, onError: (Throwable) -> Unit): Disposable =\n+ override fun <T> subscribe(\n+ observable: Observable<out T>,\n+ onNext: Consumer<T>,\n+ onError: (Throwable) -> Unit\n+ ): Disposable =\nobservable.observeOn(AndroidSchedulers.mainThread())\n.subscribe(onNext, Consumer(onError))\n.also { viewDisposable.add(it) }\n\n\ndiff --git a/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/BaseRelationTest.kt b/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/BaseRelationTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/BaseRelationTest.kt\n+++ b/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/BaseRelationTest.kt\n@@ -46,7 +46,7 @@ class TestView : ru.surfstudio.android.core.mvp.binding.rx.relation.Related<VIEW\noverride fun relationEntity(): VIEW = VIEW\n- override fun <T> subscribe(observable: Observable<T>,\n+ override fun <T> subscribe(observable: Observable<out T>,\nonNext: Consumer<T>,\nonError: (Throwable) -> Unit): Disposable =\nobservable.subscribe(onNext)\n@@ -59,7 +59,7 @@ class TestPresenter : ru.surfstudio.android.core.mvp.binding.rx.relation.Related\noverride fun relationEntity(): PRESENTER = PRESENTER\n- override fun <T> subscribe(observable: Observable<T>,\n+ override fun <T> subscribe(observable: Observable<out T>,\nonNext: Consumer<T>,\nonError: (Throwable) -> Unit): Disposable =\nobservable.subscribe(onNext)\n\n\ndiff --git a/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt b/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\n+++ b/core-mvp-binding/src/test/java/ru/surfstudio/android/core/mvp/rx/relation/StateTest.kt\npackage ru.surfstudio.android.core.mvp.rx.relation\n+import io.reactivex.Maybe\nimport io.reactivex.functions.Consumer\nimport io.reactivex.observers.TestObserver\n+import io.reactivex.subjects.PublishSubject\nimport org.junit.Assert.*\nimport org.junit.Before\nimport org.junit.Test\nimport ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.State\n+import ru.surfstudio.android.core.mvp.binding.rx.ui.BindModel\nclass StateTest : BaseRelationTest() {\n@@ -93,4 +96,29 @@ class StateTest : BaseRelationTest() {\nassert(state.observable.test().isDisposed.not())\n}\n}\n+\n+ @Test\n+ @Throws(Exception::class)\n+ fun variance() {\n+ open class A\n+ class B : A()\n+\n+ val myInteractor = object {\n+ val foo = PublishSubject.create<B>()\n+ }\n+ val myBindModel = object : BindModel {\n+ val state = State<A>()\n+ }\n+\n+ with(testPresenter) {\n+ myInteractor.foo bindTo myBindModel.state\n+\n+ myInteractor.foo.onNext(B())\n+\n+ val state = myBindModel.state\n+ var newValue = A()\n+ state bindTo { newValue = it }\n+ assertTrue(newValue is B)\n+ }\n+ }\n}\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\n@@ -58,6 +58,40 @@ object DependencyConfigurator {\n}\n}\n+ /**\n+ * Add dependency to project with \"testImplementation\"\n+ * If current project is not mirror and dependency is not contained in current project then\n+ * add in with artifactory name else add locally\n+ *\n+ * @param project - project\n+ * @param dependencyName - dependency name\n+ */\n+ @JvmStatic\n+ fun projectTestImplementation(project: Project, dependencyName: String) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, dependencyName)) {\n+ addDependency(project, TEST_IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(dependencyName))\n+ } else {\n+ addDependency(project, TEST_IMPLEMENTATION_DEP_TYPE, project.rootProject.project(dependencyName))\n+ }\n+ }\n+\n+ /**\n+ * Add dependency to project with \"androidTestImplementation\"\n+ * If current project is not mirror and dependency is not contained in current project then\n+ * add in with artifactory name else add locally\n+ *\n+ * @param project - project\n+ * @param dependencyName - dependency name\n+ */\n+ @JvmStatic\n+ fun projectAndroidTestImplementation(project: Project, dependencyName: String) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, dependencyName)) {\n+ addDependency(project, ANDROID_TEST_IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(dependencyName))\n+ } else {\n+ addDependency(project, ANDROID_TEST_IMPLEMENTATION_DEP_TYPE, project.rootProject.project(dependencyName))\n+ }\n+ }\n+\n/**\n* Add dependency to project with \"implementation\"\n*\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/artifactory/ArtifactoryConfig.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/artifactory/ArtifactoryConfig.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/artifactory/ArtifactoryConfig.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/artifactory/ArtifactoryConfig.kt\n@@ -17,7 +17,7 @@ object ArtifactoryConfig {\nconst val GET_FOLDER_INFO = \"$API_URL/storage/$SOURCE_REPO\"\nconst val DEPLOY_URL = \"$ARTIFACTORY_URL/$SOURCE_REPO\"\n- const val ANDROID_STANDARD_GROUP_ID = \"com.example\"\n+ const val ANDROID_STANDARD_GROUP_ID = \"ru.surfstudio.android\"\nval USER_NAME: String = System.getenv(\"surf_maven_username\") ?: EMPTY_STRING\nval PASSWORD: String = System.getenv(\"surf_maven_password\") ?: EMPTY_STRING\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/GradleProperties.kt\n@@ -36,6 +36,11 @@ object GradleProperties {\n*/\nconst val COMPONENTS_CHANGED_REVISION_TO_COMPARE = \"revisionToCompare\"\n+ /**\n+ * Current revision to compare with previous\n+ */\n+ const val CURRENT_REVISION = \"currentRevision\"\n+\n/**\n* If artifact exist in artifactory replace it\n*/\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ReleaseNotes.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ReleaseNotes.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ReleaseNotes.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/ReleaseNotes.kt\n@@ -4,6 +4,7 @@ import ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesFileNotE\nimport ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesFormatException\nimport ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesNotFoundException\nimport ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesParsingException\n+import ru.surfstudio.android.build.model.Component\nimport ru.surfstudio.android.build.model.release_notes.ReleaseNotesInfo\nimport java.io.BufferedReader\nimport java.io.File\n@@ -25,12 +26,15 @@ object ReleaseNotes {\n?: throw ReleaseNotesNotFoundException(componentName)\n}\n+ fun getReleaseNotesFilePath(component: Component): String =\n+ \"${component.directory}/$RELEASE_NOTES_FILE_NAME\"\n+\n/**\n* Parse releaseNotes.md files\n*/\nprivate fun parseReleaseNotesFiles(): List<ReleaseNotesInfo> {\nreturn Components.value.map { component ->\n- val file = File(\"${component.directory}/$RELEASE_NOTES_FILE_NAME\")\n+ val file = File(getReleaseNotesFilePath(component))\ncheckReleaseNotesFilesExist(file)\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\n@@ -5,6 +5,7 @@ import ru.surfstudio.android.build.tasks.currentDirectory\nimport java.io.File\nconst val GIT_DIFF_COMMAND = \"git diff --name-only\"\n+const val GIT_FULL_DIFF_COMMAND = \"git diff\"\nconst val GIT_CHECKOUT_COMMAND = \"git checkout\"\nconst val GIT_STASH_COMMAND = \"git stash\"\nconst val GIT_GET_CURRENT_REVISION_COMMAND = \"git rev-parse --short HEAD\"\n@@ -17,6 +18,13 @@ class GitCommandRunner(\nprivate val directory: String = currentDirectory\n) {\n+ /**\n+ * Get file names with changes between current revision and revision stated in parameters\n+ *\n+ * @param rev prior revision\n+ *\n+ * @return List of file names\n+ */\nfun diff(rev: String): List<String>? {\nval command = \"$GIT_DIFF_COMMAND $rev\"\nval res = runCommandWithResult(command, File(directory))\n@@ -24,6 +32,30 @@ class GitCommandRunner(\nreturn res?.trim()?.split(SPLIT_STRING.toRegex())\n}\n+ /**\n+ * Show full diff between two commits as a string\n+ *\n+ * @param currentRevision commit, which is used as a head to this diff\n+ * @param previousRevision commit, which is prior to current\n+ * @param filePath path to file or directory to see a diff\n+ * @param opts formatting options, default - show only diff, without original text\n+ *\n+ * @return String with git diff\n+ */\n+ fun getFullDiff(\n+ currentRevision: String,\n+ previousRevision: String,\n+ filePath: String,\n+ opts: String = \"-U0\"\n+ ): String? {\n+ val command = if (previousRevision.isEmpty()) {\n+ \"$GIT_FULL_DIFF_COMMAND $opts $currentRevision $filePath\"\n+ } else {\n+ \"$GIT_FULL_DIFF_COMMAND $opts $previousRevision $currentRevision $filePath\"\n+ }\n+ return runCommandWithResult(command, File(directory))\n+ }\n+\nfun checkoutRevision(revision: String) {\nrunCommandWithResult(GIT_STASH_COMMAND, File(directory))\nval command = \"$GIT_CHECKOUT_COMMAND $revision\"\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\n+package ru.surfstudio.android.build.tasks.generate_release_notes_diff\n+\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.tasks.TaskAction\n+import org.gradle.internal.logging.text.StyledTextOutput\n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import ru.surfstudio.android.build.Components\n+import ru.surfstudio.android.build.GradleProperties\n+import ru.surfstudio.android.build.ReleaseNotes\n+import ru.surfstudio.android.build.model.Component\n+import ru.surfstudio.android.build.tasks.changed_components.GitCommandRunner\n+import ru.surfstudio.android.build.utils.EMPTY_STRING\n+import java.lang.RuntimeException\n+\n+/**\n+ * Task to see the differences between two revisions of RELEASE_NOTES.md in each module of a project\n+ */\n+open class GenerateReleaseNotesDiffTask : DefaultTask() {\n+\n+ private lateinit var componentName: String\n+ private lateinit var revisionToCompare: String\n+ private lateinit var currentRevision: String\n+\n+ private val gitRunner: GitCommandRunner = GitCommandRunner()\n+\n+ private val outputStyler = services.get(StyledTextOutputFactory::class.java).create(\"styled output\")\n+\n+ @TaskAction\n+ fun generate() {\n+ extractInputArguments()\n+ if (componentName.isNotEmpty()) {\n+ val component = Components.value.find { it.name == componentName }\n+ ?: throw RuntimeException(\"Component cant be found\")\n+ generateComponentDiff(component)\n+ } else {\n+ Components.value.forEach(::generateComponentDiff)\n+ }\n+ }\n+\n+ private fun generateComponentDiff(component: Component) {\n+ val rawDiff = extractRawDiff(component)\n+ val diffs = parseRawDiff(rawDiff)\n+ if (diffs.isNotEmpty()) printComponentName(component)\n+ printDiff(diffs)\n+ if (diffs.isNotEmpty()) println()\n+ }\n+\n+ private fun printComponentName(component: Component) {\n+ outputStyler.style(StyledTextOutput.Style.Header).println(component.name)\n+ }\n+\n+ private fun parseRawDiff(diff: String): List<GitDiff> =\n+ SimpleGitDiffParser.parse(diff)\n+\n+ private fun extractRawDiff(component: Component): String {\n+ val filePath = ReleaseNotes.getReleaseNotesFilePath(component)\n+ return gitRunner.getFullDiff(currentRevision, revisionToCompare, filePath) ?: \"\"\n+ }\n+\n+ private fun printDiff(diffs: List<GitDiff>) {\n+ diffs.forEachIndexed { index, diff ->\n+ addSpaceBetweenChanges(index, diff.type)\n+ val style = getStyleFromDiffType(diff.type)\n+ outputStyler.style(style).println(diff.line)\n+ }\n+ }\n+\n+ private fun addSpaceBetweenChanges(index: Int, type: GitDiff.Type) {\n+ if (index != 0 && type == GitDiff.Type.SEPARATE) {\n+ println()\n+ }\n+ }\n+\n+ private fun getStyleFromDiffType(type: GitDiff.Type): StyledTextOutput.Style = when (type) {\n+ GitDiff.Type.ADD -> StyledTextOutput.Style.Success\n+ GitDiff.Type.REMOVE -> StyledTextOutput.Style.Failure\n+ GitDiff.Type.SEPARATE -> StyledTextOutput.Style.Normal\n+ }\n+\n+ private fun extractInputArguments() {\n+ componentName = if (!project.hasProperty(GradleProperties.COMPONENT)) {\n+ EMPTY_STRING\n+ } else {\n+ project.findProperty(GradleProperties.COMPONENT) as String\n+ }\n+\n+ revisionToCompare = if (!project.hasProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE)) {\n+ EMPTY_STRING\n+ } else {\n+ project.findProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE) as String\n+ }\n+\n+ currentRevision = if (project.hasProperty(GradleProperties.CURRENT_REVISION)) {\n+ project.findProperty(GradleProperties.CURRENT_REVISION) as String\n+ } else {\n+ gitRunner.getCurrentRevisionShort()\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt\n+package ru.surfstudio.android.build.tasks.generate_release_notes_diff\n+\n+/**\n+ * Simple git diff model. Contains information about single line differences.\n+ *\n+ * @param line text of the line, which is affected by diff\n+ * @param type type of git difference\n+ */\n+data class GitDiff(\n+ val line: String,\n+ val type: Type\n+) {\n+\n+ /**\n+ * Git diff type for a single line\n+ *\n+ * @property ADD the line was added\n+ * @property REMOVE the line was removed\n+ * @property SEPARATE the line is used to separate two diff blocks\n+ *\n+ */\n+ enum class Type {\n+ ADD,\n+ REMOVE,\n+ SEPARATE\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ComponentsDiffProvider.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ComponentsDiffProvider.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ComponentsDiffProvider.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/ComponentsDiffProvider.kt\n@@ -64,6 +64,5 @@ class ComponentsDiffProvider(\nprivate fun isDiffHasComponent(diffResult: String, component: Component): Boolean {\nreturn diffResult.startsWith(component.directory)\n- && !diffResult.endsWith(\"RELEASE_NOTES.md\")\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\n@@ -7,10 +7,10 @@ import org.gradle.internal.logging.text.StyledTextOutputFactory\nimport ru.surfstudio.android.build.Components\nimport ru.surfstudio.android.build.GradleProperties\nimport ru.surfstudio.android.build.ReleaseNotes\n+import ru.surfstudio.android.build.exceptions.ComponentNotFoundException\nimport ru.surfstudio.android.build.model.Component\nimport ru.surfstudio.android.build.tasks.changed_components.GitCommandRunner\nimport ru.surfstudio.android.build.utils.EMPTY_STRING\n-import java.lang.RuntimeException\n/**\n* Task to see the differences between two revisions of RELEASE_NOTES.md in each module of a project\n@@ -29,14 +29,17 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\nfun generate() {\nextractInputArguments()\nif (componentName.isNotEmpty()) {\n- val component = Components.value.find { it.name == componentName }\n- ?: throw RuntimeException(\"Component cant be found\")\n+ val component = findComponent()\ngenerateComponentDiff(component)\n} else {\nComponents.value.forEach(::generateComponentDiff)\n}\n}\n+ private fun findComponent(): Component =\n+ Components.value.find { it.name == componentName }\n+ ?: throw ComponentNotFoundException(componentName)\n+\nprivate fun generateComponentDiff(component: Component) {\nval rawDiff = extractRawDiff(component)\nval diffs = parseRawDiff(rawDiff)\n@@ -58,17 +61,47 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\n}\nprivate fun printDiff(diffs: List<GitDiff>) {\n- diffs.forEachIndexed { index, diff ->\n- addSpaceBetweenChanges(index, diff.type)\n- val style = getStyleFromDiffType(diff.type)\n- outputStyler.style(style).println(diff.line)\n+ var currentChangeLineNumber = 0\n+ var currentChangeLinesCount = 0\n+ var addsCount = 0\n+ var removesCount = 0\n+ var prev: GitDiff? = null\n+ diffs.forEach { diff ->\n+\n+ currentChangeLinesCount++\n+\n+ if (diff.type == GitDiff.Type.ADD) addsCount++\n+ if (diff.type == GitDiff.Type.REMOVE) removesCount++\n+\n+ if (diff.type == GitDiff.Type.SEPARATE) {\n+ currentChangeLineNumber = diff.line.toInt() + addsCount - removesCount\n+ }\n+\n+ if (prev?.type != diff.type) {\n+ currentChangeLinesCount = 0\n+ }\n+\n+ val currentChangeLine = currentChangeLineNumber + currentChangeLinesCount\n+\n+ printLine(currentChangeLine, diff, prev)\n+\n+ prev = diff\n}\n}\n- private fun addSpaceBetweenChanges(index: Int, type: GitDiff.Type) {\n- if (index != 0 && type == GitDiff.Type.SEPARATE) {\n- println()\n+ /**\n+ * Prints styled line from git diff\n+ */\n+ private fun printLine(currentLine: Int, diff: GitDiff, prev: GitDiff?) {\n+ val style = getStyleFromDiffType(diff.type)\n+ val spaceString = getSpaces(currentLine)\n+ val lineToPrint = when {\n+ prev == null -> return\n+ diff.type == GitDiff.Type.SEPARATE -> \"...\"\n+ else -> \"$currentLine$spaceString${diff.line}\"\n+\n}\n+ outputStyler.style(style).println(lineToPrint)\n}\nprivate fun getStyleFromDiffType(type: GitDiff.Type): StyledTextOutput.Style = when (type) {\n@@ -77,6 +110,19 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\nGitDiff.Type.SEPARATE -> StyledTextOutput.Style.Normal\n}\n+ /**\n+ * Simple tabulation method which adds spaces according to line length\n+ */\n+ private fun getSpaces(currentLine: Int): String {\n+ val space = \" \"\n+ val spacesCount = when {\n+ currentLine / 10 == 0 -> 3\n+ currentLine / 100 == 0 -> 2\n+ else -> 1\n+ }\n+ return space.repeat(spacesCount)\n+ }\n+\nprivate fun extractInputArguments() {\ncomponentName = if (!project.hasProperty(GradleProperties.COMPONENT)) {\nEMPTY_STRING\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GenerateReleaseNotesDiffTask.kt\n@@ -53,7 +53,7 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\n}\nprivate fun parseRawDiff(diff: String): List<GitDiff> =\n- SimpleGitDiffParser.parse(diff)\n+ SimpleGitDiffParser().parse(diff)\nprivate fun extractRawDiff(component: Component): String {\nval filePath = ReleaseNotes.getReleaseNotesFilePath(component)\n@@ -61,30 +61,9 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\n}\nprivate fun printDiff(diffs: List<GitDiff>) {\n- var currentChangeLineNumber = 0\n- var currentChangeLinesCount = 0\n- var addsCount = 0\n- var removesCount = 0\nvar prev: GitDiff? = null\ndiffs.forEach { diff ->\n-\n- currentChangeLinesCount++\n-\n- if (diff.type == GitDiff.Type.ADD) addsCount++\n- if (diff.type == GitDiff.Type.REMOVE) removesCount++\n-\n- if (diff.type == GitDiff.Type.SEPARATE) {\n- currentChangeLineNumber = diff.line.toInt() + addsCount - removesCount\n- }\n-\n- if (prev?.type != diff.type) {\n- currentChangeLinesCount = 0\n- }\n-\n- val currentChangeLine = currentChangeLineNumber + currentChangeLinesCount\n-\n- printLine(currentChangeLine, diff, prev)\n-\n+ printLine(diff, prev)\nprev = diff\n}\n}\n@@ -92,13 +71,13 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\n/**\n* Prints styled line from git diff\n*/\n- private fun printLine(currentLine: Int, diff: GitDiff, prev: GitDiff?) {\n+ private fun printLine(diff: GitDiff, prev: GitDiff?) {\nval style = getStyleFromDiffType(diff.type)\n- val spaceString = getSpaces(currentLine)\n+ val paddingSpaces = getSpaces(diff.lineNumber)\nval lineToPrint = when {\nprev == null -> return\ndiff.type == GitDiff.Type.SEPARATE -> \"...\"\n- else -> \"$currentLine$spaceString${diff.line}\"\n+ else -> \"${diff.lineNumber}$paddingSpaces${diff.line}\"\n}\noutputStyler.style(style).println(lineToPrint)\n@@ -111,7 +90,7 @@ open class GenerateReleaseNotesDiffTask : DefaultTask() {\n}\n/**\n- * Simple tabulation method which adds spaces according to line length\n+ * Simple padding method which adds spaces according to line length\n*/\nprivate fun getSpaces(currentLine: Int): String {\nval space = \" \"\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/GitDiff.kt\n@@ -3,11 +3,13 @@ package ru.surfstudio.android.build.tasks.generate_release_notes_diff\n/**\n* Simple git diff model. Contains information about single line differences.\n*\n- * @param line text of the line, which is affected by diff\n+ * @param line text of the line affected by diff\n+ * @param lineNumber number of the line affected by diff\n* @param type type of git difference\n*/\ndata class GitDiff(\nval line: String,\n+ val lineNumber: Int,\nval type: Type\n) {\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/SimpleGitDiffParser.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/SimpleGitDiffParser.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/SimpleGitDiffParser.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/SimpleGitDiffParser.kt\npackage ru.surfstudio.android.build.tasks.generate_release_notes_diff\n+import ru.surfstudio.android.build.tasks.generate_release_notes_diff.GitDiff.Type.*\n+\n/**\n* Simple parser for git diff.\n*/\n-object SimpleGitDiffParser {\n+class SimpleGitDiffParser {\nprivate val ADD_CHAR = \"+\"\nprivate val REMOVE_CHAR = \"-\"\nprivate val ADD_FILE_CHAR = \"+++\"\nprivate val REMOVE_FILE_CHAR = \"---\"\nprivate val SEPARATOR_CHAR = '@'\n+ private val SPACE_CHAR = ' '\n+\n+ private var currentChangeLineNumber = 0\n+ private var currentChangeLinesCount = 0\n+ private var addsCount = 0\n+ private var removesCount = 0\n+ private var lastDiff: GitDiff? = null\n/**\n* Parse diff string into list with [GitDiff]s\n@@ -25,29 +34,54 @@ object SimpleGitDiffParser {\nline.startsWith(ADD_FILE_CHAR) || line.startsWith(REMOVE_FILE_CHAR) -> {\n}\nline.startsWith(SEPARATOR_CHAR) -> diffs.add(makeSeparator(line))\n- line.startsWith(ADD_CHAR) -> diffs.add(makeAddDiff(line))\n- line.startsWith(REMOVE_CHAR) -> diffs.add(makeRemoveDiff(line))\n+ line.startsWith(ADD_CHAR) -> diffs.add(makeDiff(line, ADD))\n+ line.startsWith(REMOVE_CHAR) -> diffs.add(makeDiff(line, REMOVE))\n}\n}\nreturn diffs\n}\n- private fun makeAddDiff(line: String): GitDiff {\n- val lineWithoutChar = line.drop(1)\n- val lineWithSpace = \"$ADD_CHAR $lineWithoutChar\"\n- return GitDiff(lineWithSpace, GitDiff.Type.ADD)\n+ private fun makeSeparator(separatorLine: String): GitDiff {\n+ val regex = \"\\\\d+\".toRegex()\n+ val lineNumber = regex.find(separatorLine)?.value?.toIntOrNull() ?: 0\n+ currentChangeLineNumber = lineNumber + addsCount - removesCount\n+ return GitDiff(lineNumber.toString(), lineNumber, SEPARATE)\n+ .also { lastDiff = it }\n}\n- private fun makeRemoveDiff(line: String): GitDiff {\n- val lineWithoutChar = line.drop(1)\n- val lineWithSpace = \"$REMOVE_CHAR $lineWithoutChar\"\n- return GitDiff(lineWithSpace, GitDiff.Type.REMOVE)\n+ private fun makeDiff(line: String, type: GitDiff.Type): GitDiff {\n+ setDiffsCount(type)\n+ setCurrentChangedLinesCount(type)\n+ val lineNumber = currentChangeLineNumber + currentChangeLinesCount\n+ return GitDiff(addSpaceAfterFirstSymbol(line), lineNumber, type)\n+ .also { lastDiff = it }\n}\n- private fun makeSeparator(separatorLine: String): GitDiff {\n- val regex = \"\\\\d+\".toRegex()\n- val lineNumber = regex.find(separatorLine)?.value\n+ private fun setDiffsCount(type: GitDiff.Type) {\n+ when (type) {\n+ ADD -> addsCount++\n+ REMOVE -> removesCount++\n+ else -> {\n+ }\n+ }\n+ }\n- return GitDiff(lineNumber.toString(), GitDiff.Type.SEPARATE)\n+ private fun setCurrentChangedLinesCount(currentType: GitDiff.Type) {\n+ val lastType = lastDiff?.type\n+ when {\n+ //When it's just add change, we're adding one line to a current\n+ lastType == SEPARATE && currentType == ADD -> currentChangeLinesCount = 1\n+ //When type of next operation is different, we're resetting counter\n+ lastType != currentType -> currentChangeLinesCount = 0\n+ else -> currentChangeLinesCount++\n+ }\n+ }\n+\n+ private fun addSpaceAfterFirstSymbol(line: String): String {\n+ return buildString {\n+ append(line.first())\n+ append(SPACE_CHAR)\n+ append(line.drop(1))\n+ }\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -258,7 +258,9 @@ abstract class BaseGitRepository {\n.setNewTree(currentTree)\n.setOldTree(oldTree)\n.call()\n- .map { it.oldPath }\n+ .map { entry ->\n+ entry.oldPath?.takeIf { it != DiffEntry.DEV_NULL } ?: entry.newPath\n+ }\n}\n/**\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesChangedTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesChangedTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesChangedTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesChangedTask.kt\npackage ru.surfstudio.android.build.tasks\nimport org.gradle.api.DefaultTask\n-import org.gradle.api.GradleException\nimport org.gradle.api.tasks.TaskAction\nimport ru.surfstudio.android.build.Components\nimport ru.surfstudio.android.build.GradleProperties\n@@ -64,8 +63,8 @@ open class CheckReleaseNotesChangedTask : DefaultTask() {\nprivate fun isComponentChanged(resultByConfig: Boolean, resultByFile: Boolean) =\nresultByConfig.or(resultByFile)\n- private fun isReleaseFileIncluded(diffs: List<String>, componentName: String) =\n- diffs.contains(\"$componentName/$RELEASE_NOTES_FILE_NAME\")\n+ private fun isReleaseFileIncluded(diffs: List<String>, componentName: String): Boolean =\n+ diffs.find { it.contains(\"$componentName/$RELEASE_NOTES_FILE_NAME\") } != null\nprivate fun extractInputArguments() {\nif (!project.hasProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE)) {\n@@ -73,8 +72,4 @@ open class CheckReleaseNotesChangedTask : DefaultTask() {\n}\nrevisionToCompare = project.findProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE) as String\n}\n-\n- private fun fail(reason: String) {\n- throw GradleException(reason)\n- }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n@@ -247,9 +247,7 @@ class GitTree(\nif (branchNameNames.size != 1) {\nthrow ManyBranchesFoundException(it.value.name, branchNameNames)\n}\n-\n- val tags = mirrorRepository.getTagsForCommit(it.value)\n- CommitWithBranch(it.value, tags = tags, branch = branchNameNames[0])\n+ CommitWithBranch(it.value, branch = branchNameNames[0])\n}.toSet()\n}\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/BaseGitRepository.kt\n@@ -4,14 +4,12 @@ import org.eclipse.jgit.api.Git\nimport org.eclipse.jgit.api.ListBranchCommand\nimport org.eclipse.jgit.api.ResetCommand\nimport org.eclipse.jgit.diff.DiffEntry\n-import org.eclipse.jgit.lib.Constants\nimport org.eclipse.jgit.lib.ObjectId\nimport org.eclipse.jgit.lib.Ref\nimport org.eclipse.jgit.revwalk.RevCommit\nimport org.eclipse.jgit.treewalk.CanonicalTreeParser\nimport ru.surfstudio.android.build.exceptions.deploy_to_mirror.BranchCanNotBeDefinedException\nimport ru.surfstudio.android.build.exceptions.deploy_to_mirror.BranchNotFoundException\n-import ru.surfstudio.android.build.utils.EMPTY_STRING\nimport ru.surfstudio.android.build.utils.extractBranchNames\nimport java.io.File\n@@ -27,8 +25,6 @@ abstract class BaseGitRepository {\nprotected val git: Git by lazy { Git.open(repositoryPath) }\n- protected val tags: List<Ref> by lazy { git.tagList().call() }\n-\n/**\n* Delete repository\n*/\n@@ -43,10 +39,6 @@ abstract class BaseGitRepository {\n.call()\n.first()\n- fun getTagsForCommit(commit: RevCommit): List<String> =\n- tags.filter { it.objectId == commit }\n- .map { it.name.replace(Constants.R_TAGS, EMPTY_STRING) }\n-\n/**\n* Get all branches\n*/\n@@ -222,11 +214,6 @@ abstract class BaseGitRepository {\n?.conflicts\n?.map { it.key } ?: emptyList()\n- fun tag(commit: RevCommit, tagName: String) = git.tag()\n- .setObjectId(commit)\n- .setName(tagName)\n- .call()\n-\n/**\n* add to git index\n*\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/MirrorRepository.kt\n@@ -36,13 +36,16 @@ class MirrorRepository(dirPath: String) : BaseGitRepository() {\n)\n)\n.call()\n-\n}\n+ fun tag(commit: RevCommit, tagName: String) = git.tag()\n+ .setObjectId(commit)\n+ .setName(tagName)\n+ .call()\n+\nfun getCommitByStandardHash(standardHash: String): RevCommit = git.log()\n.all()\n.call()\n.find { it.mirrorStandardHash == standardHash }\n?: throw MirrorCommitNotFoundByStandardHashException(standardHash)\n-\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/StandardRepository.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/StandardRepository.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/StandardRepository.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/repository/StandardRepository.kt\npackage ru.surfstudio.android.build.tasks.deploy_to_mirror.repository\n+import org.eclipse.jgit.lib.Constants\n+import org.eclipse.jgit.lib.Ref\n+import org.eclipse.jgit.revwalk.RevCommit\n+import ru.surfstudio.android.build.utils.EMPTY_STRING\nimport java.io.File\n/**\n@@ -13,4 +17,10 @@ class StandardRepository : BaseGitRepository() {\noverride val repositoryPath: File = File(TEMP_DIR_PATH)\noverride val repositoryName = \"Standard\"\n+\n+ private val tags: List<Ref> by lazy { git.tagList().call() }\n+\n+ fun getTagsForCommit(commit: RevCommit): List<String> =\n+ tags.filter { it.objectId == commit }\n+ .map { it.name.replace(Constants.R_TAGS, EMPTY_STRING) }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainActivityView.kt b/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainActivityView.kt\nindex 0000000..0000000 100644\n--- a/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainActivityView.kt\n+++ b/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainActivityView.kt\n@@ -21,9 +21,11 @@ class MainActivityView : BaseRenderableActivityView<MainScreenModel>() {\n@IdRes\noverride fun getContentView(): Int = R.layout.activity_main\n- override fun onCreate(savedInstanceState: Bundle?,\n+ override fun onCreate(\n+ savedInstanceState: Bundle?,\npersistentState: PersistableBundle?,\n- viewRecreated: Boolean) {\n+ viewRecreated: Boolean\n+ ) {\nsuper.onCreate(savedInstanceState, persistentState, viewRecreated)\ncamera_btn.setOnClickListener { presenter.openCamera() }\n@@ -41,8 +43,4 @@ class MainActivityView : BaseRenderableActivityView<MainScreenModel>() {\noverride fun createConfigurator(): DefaultActivityScreenConfigurator = MainScreenConfigurator(intent)\noverride fun getScreenName(): String = \"MainActivity\"\n-\n- fun startCamera() = camera_preview.start()\n-\n- fun stopCamera() = camera_preview.stop()\n}\n\n\ndiff --git a/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainPresenter.kt b/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainPresenter.kt\nindex 0000000..0000000 100644\n--- a/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainPresenter.kt\n+++ b/picture-provider/sample/src/main/java/ru/surfstudio/android/pictureprovider/sample/ui/screen/main/MainPresenter.kt\n@@ -3,10 +3,8 @@ package ru.surfstudio.android.pictureprovider.sample.ui.screen.main\nimport io.reactivex.Single\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenter\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.permission.PermissionManager\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.message.MessageController\n-import ru.surfstudio.android.picturechooser.CameraStoragePermissionRequest\nimport ru.surfstudio.android.picturechooser.PicturePermissionChecker\nimport ru.surfstudio.android.picturechooser.PictureProvider\nimport ru.surfstudio.android.pictureprovider.sample.R\n@@ -20,7 +18,6 @@ import javax.inject.Inject\ninternal class MainPresenter @Inject constructor(\nbasePresenterDependency: BasePresenterDependency,\nstringsProvider: StringsProvider,\n- private val permissionManager: PermissionManager,\nprivate val picturePermissionChecker: PicturePermissionChecker,\nprivate val photoProvider: PictureProvider,\nprivate val messageController: MessageController\n@@ -58,18 +55,4 @@ internal class MainPresenter @Inject constructor(\nmessageController.show(it.toString())\n}\n}\n-\n- override fun onResume() {\n- super.onResume()\n- if (checkPermission()) view.startCamera()\n- }\n-\n- override fun onPause() {\n- super.onPause()\n- if (checkPermission()) view.stopCamera()\n- }\n-\n- private fun checkPermission(): Boolean {\n- return permissionManager.check(CameraStoragePermissionRequest()).isGranted\n- }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/security/sample/src/androidTest/java/ru/surfstudio/android/security/SecuritySampleTest.kt b/security/sample/src/androidTest/java/ru/surfstudio/android/security/SecuritySampleTest.kt\nindex 0000000..0000000 100644\n--- a/security/sample/src/androidTest/java/ru/surfstudio/android/security/SecuritySampleTest.kt\n+++ b/security/sample/src/androidTest/java/ru/surfstudio/android/security/SecuritySampleTest.kt\n@@ -12,7 +12,6 @@ import ru.surfstudio.android.security.sample.R\nimport ru.surfstudio.android.security.sample.ui.screen.main.MainActivityView\nimport ru.surfstudio.android.security.sample.ui.screen.pin.CreatePinActivityView\n-\nprivate const val PINT_TEXT = \"1234\"\nprivate const val LONG_DURATION_TIMEOUT: Long = 4000\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\n@@ -18,7 +18,7 @@ class InputFormMiddleware @Inject constructor(\noverride fun transform(eventStream: Observable<InputFormEvent>): Observable<out InputFormEvent> =\ntransformations(eventStream) {\n- +eventStream.mapNavigationDefault()\n+ +eventStream.mapAutoNavigation()\n+map<SubmitClicked> { InputFormClosed(InputFormActivityRoute(), sh.inputString.value) }\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\n@@ -19,7 +19,7 @@ class MainMiddleware @Inject constructor(\nNavigatorMiddleware<MainEvent> {\noverride fun transform(eventStream: Observable<MainEvent>) = transformations(eventStream) {\n- +mapNavigationDefault()\n+ +mapAutoNavigation()\n+openScreenForResult(InputFormActivityRoute::class.java, InputFormResult())\n+react<InputFormResult>(::showResult)\n}\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormActivityView.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormActivityView.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormActivityView.kt\n@@ -7,7 +7,7 @@ import com.jakewharton.rxbinding2.widget.textChanges\nimport kotlinx.android.synthetic.main.activity_input_form.*\nimport ru.surfstudio.android.core.mvi.event.hub.owner.SingleHubOwner\nimport ru.surfstudio.android.core.mvi.sample.R\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.ui.BaseReactActivityView\nimport javax.inject.Inject\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.input.InputFormEvent.*\n@@ -18,7 +18,7 @@ import ru.surfstudio.android.core.mvi.sample.ui.screen.input.InputFormEvent.*\nclass InputFormActivityView : BaseReactActivityView(), SingleHubOwner<InputFormEvent> {\n@Inject\n- override lateinit var hub: BaseEventHub<InputFormEvent>\n+ override lateinit var hub: ScreenEventHub<InputFormEvent>\n@Inject\nlateinit var sh: InputFormStateHolder\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormConfigurator.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormConfigurator.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormConfigurator.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormConfigurator.kt\n@@ -4,18 +4,18 @@ import android.content.Intent\nimport dagger.Component\nimport dagger.Module\nimport dagger.Provides\n-import ru.surfstudio.android.core.mvi.sample.ui.base.binder.BaseBinder\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.binder.ScreenBinder\n+import ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.dependency.ScreenEventHubDependency\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.dependency.BaseNavMiddlewareDependency\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\nimport ru.surfstudio.android.core.mvp.error.ErrorHandler\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\nimport ru.surfstudio.android.core.ui.navigation.activity.navigator.ActivityNavigator\nimport ru.surfstudio.android.core.ui.navigation.fragment.FragmentNavigator\nimport ru.surfstudio.android.core.ui.provider.ActivityProvider\n-import ru.surfstudio.android.core.ui.state.ScreenState\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.mvp.dialog.navigation.navigator.DialogNavigator\nimport ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\n@@ -27,46 +27,29 @@ class InputFormScreenConfigurator(intent: Intent) : DefaultActivityScreenConfigu\n@PerScreen\n@Component(dependencies = [DefaultActivityComponent::class],\n- modules = [DefaultActivityScreenModule::class, InputFormScreenModule::class])\n+ modules = [DefaultActivityScreenModule::class, InputFormScreenModule::class, ReactScreenModule::class])\ninternal interface InputFormScreenComponent\n: BindableScreenComponent<InputFormActivityView>\n@Module\ninternal class InputFormScreenModule {\n- @Provides\n- @PerScreen\n- fun provideFragmentNavigator(activityProvider: ActivityProvider): FragmentNavigator = FragmentNavigator(activityProvider)\n-\n-\n- @Provides\n- @PerScreen\n- fun provideBaseMiddlewareDependency(\n- activityNavigator: ActivityNavigator,\n- schedulersProvider: SchedulersProvider,\n- fragmentNavigator: FragmentNavigator,\n- dialogNavigator: DialogNavigator,\n- errorHandler: ErrorHandler\n- ) = BaseNavMiddlewareDependency(activityNavigator, fragmentNavigator, dialogNavigator, schedulersProvider, errorHandler)\n@Provides\n@PerScreen\nfun provideEventHub(\n- screenState: ScreenState,\n- screenEventDelegateManager: ScreenEventDelegateManager\n- ): BaseEventHub<InputFormEvent> = BaseEventHub(\n- screenState,\n- screenEventDelegateManager\n- ) { InputFormEvent.InputFormLifecycle(it) }\n+ screenEventHubDependency: ScreenEventHubDependency\n+ ): ScreenEventHub<InputFormEvent> =\n+ ScreenEventHub(screenEventHubDependency) { InputFormEvent.InputFormLifecycle(it) }\n@PerScreen\n@Provides\nfun provideBinder(\nbasePresenterDependency: BasePresenterDependency,\n- eventHub: BaseEventHub<InputFormEvent>,\n+ eventHub: ScreenEventHub<InputFormEvent>,\nmiddleware: InputFormMiddleware,\nreactor: InputFormReactor,\nstateHolder: InputFormStateHolder\n- ): Any = BaseBinder(basePresenterDependency)\n+ ): Any = ScreenBinder(basePresenterDependency)\n.apply { bind(eventHub, middleware, stateHolder, reactor) }\n}\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\n@@ -13,7 +13,7 @@ import ru.surfstudio.android.core.mvi.ui.BaseReactActivityView\nimport ru.surfstudio.android.easyadapter.ItemList\nimport ru.surfstudio.android.easyadapter.pagination.PaginationState\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.list.controller.ComplexListController\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.sample.ui.base.adapter.PaginationableAdapter\nimport ru.surfstudio.android.core.mvi.sample.ui.base.extension.observeMainLoading\nimport ru.surfstudio.android.core.mvi.sample.ui.base.extension.observeSwrLoading\n@@ -37,7 +37,7 @@ class ComplexListActivityView : BaseReactActivityView() {\nlateinit var sh: ComplexListStateHolder\n@Inject\n- lateinit var hub: BaseEventHub<ComplexListEvent>\n+ lateinit var hub: ScreenEventHub<ComplexListEvent>\noverride fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?, viewRecreated: Boolean) {\nsuper.onCreate(savedInstanceState, persistentState, viewRecreated)\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListScreenConfigurator.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListScreenConfigurator.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListScreenConfigurator.kt\n@@ -4,18 +4,14 @@ import android.content.Intent\nimport dagger.Component\nimport dagger.Module\nimport dagger.Provides\n-import ru.surfstudio.android.core.mvi.sample.ui.base.binder.BaseBinder\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n-import ru.surfstudio.android.core.mvi.sample.ui.base.middleware.dependency.BaseMiddlewareDependency\n+import ru.surfstudio.android.core.mvi.sample.ui.base.binder.ScreenBinder\n+import ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.dependency.ScreenEventHubDependency\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\n-import ru.surfstudio.android.core.mvp.error.ErrorHandler\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\n-import ru.surfstudio.android.core.ui.navigation.activity.navigator.ActivityNavigator\n-import ru.surfstudio.android.core.ui.state.ScreenState\nimport ru.surfstudio.android.dagger.scope.PerScreen\n-import ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\nimport ru.surfstudio.android.sample.dagger.ui.base.configurator.DefaultActivityScreenConfigurator\nimport ru.surfstudio.android.sample.dagger.ui.base.dagger.activity.DefaultActivityComponent\nimport ru.surfstudio.android.sample.dagger.ui.base.dagger.screen.DefaultActivityScreenModule\n@@ -25,40 +21,29 @@ class ComplexListScreenConfigurator(intent: Intent) : DefaultActivityScreenConfi\n@PerScreen\n@Component(dependencies = [DefaultActivityComponent::class],\n- modules = [DefaultActivityScreenModule::class, ComplexListScreenModule::class])\n+ modules = [DefaultActivityScreenModule::class, ComplexListScreenModule::class, ReactScreenModule::class])\ninternal interface ComplexListScreenComponent\n: BindableScreenComponent<ComplexListActivityView>\n@Module\ninternal class ComplexListScreenModule(route: ComplexListActivityRoute) : DefaultCustomScreenModule<ComplexListActivityRoute>(route) {\n- @Provides\n- @PerScreen\n- fun provideBaseMiddlewareDependency(\n- activityNavigator: ActivityNavigator,\n- schedulersProvider: SchedulersProvider,\n- errorHandler: ErrorHandler\n- ) = BaseMiddlewareDependency(activityNavigator, schedulersProvider, errorHandler)\n-\n@Provides\n@PerScreen\nfun provideEventHub(\n- screenState: ScreenState,\n- screenEventDelegateManager: ScreenEventDelegateManager\n- ): BaseEventHub<ComplexListEvent> = BaseEventHub(\n- screenState,\n- screenEventDelegateManager\n- ) { ComplexListEvent.ComplexListLifecycle(it) }\n+ screenEventHubDependency: ScreenEventHubDependency\n+ ): ScreenEventHub<ComplexListEvent> =\n+ ScreenEventHub(screenEventHubDependency, ComplexListEvent::ComplexListLifecycle)\n@PerScreen\n@Provides\nfun provideBinder(\nbasePresenterDependency: BasePresenterDependency,\n- eventHub: BaseEventHub<ComplexListEvent>,\n+ eventHub: ScreenEventHub<ComplexListEvent>,\nmiddleware: ComplexListMiddleware,\nreactor: ComplexListReactor,\nstateHolder: ComplexListStateHolder\n- ): Any = BaseBinder(basePresenterDependency)\n+ ): Any = ScreenBinder(basePresenterDependency)\n.apply { bind(eventHub, middleware, stateHolder, reactor) }\n}\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainActivityView.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainActivityView.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainActivityView.kt\n@@ -6,7 +6,7 @@ import com.jakewharton.rxbinding2.view.clicks\nimport kotlinx.android.synthetic.main.activity_main.*\nimport ru.surfstudio.android.core.mvi.event.hub.owner.SingleHubOwner\nimport ru.surfstudio.android.core.mvi.sample.R\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.ui.BaseReactActivityView\nimport ru.surfstudio.android.logger.Logger\nimport ru.surfstudio.android.logger.logging_strategies.impl.timber.TimberLoggingStrategy\n@@ -19,7 +19,7 @@ import javax.inject.Inject\nclass MainActivityView : BaseReactActivityView(), SingleHubOwner<MainEvent> {\n@Inject\n- override lateinit var hub: BaseEventHub<MainEvent>\n+ override lateinit var hub: ScreenEventHub<MainEvent>\noverride fun createConfigurator() = MainScreenConfigurator(intent)\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\n@@ -4,18 +4,18 @@ import android.content.Intent\nimport dagger.Component\nimport dagger.Module\nimport dagger.Provides\n-import ru.surfstudio.android.core.mvi.sample.ui.base.binder.BaseBinder\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.binder.ScreenBinder\n+import ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.dependency.ScreenEventHubDependency\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.dependency.BaseNavMiddlewareDependency\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\nimport ru.surfstudio.android.core.mvp.error.ErrorHandler\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\nimport ru.surfstudio.android.core.ui.navigation.activity.navigator.ActivityNavigator\nimport ru.surfstudio.android.core.ui.navigation.fragment.FragmentNavigator\nimport ru.surfstudio.android.core.ui.provider.ActivityProvider\n-import ru.surfstudio.android.core.ui.state.ScreenState\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.mvp.dialog.navigation.navigator.DialogNavigator\nimport ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\n@@ -27,45 +27,27 @@ class MainScreenConfigurator(intent: Intent) : DefaultActivityScreenConfigurator\n@PerScreen\n@Component(dependencies = [DefaultActivityComponent::class],\n- modules = [DefaultActivityScreenModule::class, MainScreenModule::class])\n+ modules = [DefaultActivityScreenModule::class, MainScreenModule::class, ReactScreenModule::class])\ninternal interface MainScreenComponent\n: BindableScreenComponent<MainActivityView>\n@Module\ninternal class MainScreenModule {\n- @Provides\n- @PerScreen\n- fun provideFragmentNavigator(activityProvider: ActivityProvider): FragmentNavigator = FragmentNavigator(activityProvider)\n-\n-\n- @Provides\n- @PerScreen\n- fun provideBaseMiddlewareDependency(\n- activityNavigator: ActivityNavigator,\n- schedulersProvider: SchedulersProvider,\n- fragmentNavigator: FragmentNavigator,\n- dialogNavigator: DialogNavigator,\n- errorHandler: ErrorHandler\n- ) = BaseNavMiddlewareDependency(activityNavigator, fragmentNavigator, dialogNavigator, schedulersProvider, errorHandler)\n-\n@Provides\n@PerScreen\nfun provideEventHub(\n- screenState: ScreenState,\n- screenEventDelegateManager: ScreenEventDelegateManager\n- ): BaseEventHub<MainEvent> = BaseEventHub(\n- screenState,\n- screenEventDelegateManager\n- ) { MainEvent.MainLifecycle(it) }\n+ screenEventHubDependency: ScreenEventHubDependency\n+ ): ScreenEventHub<MainEvent> =\n+ ScreenEventHub(screenEventHubDependency) { MainEvent.MainLifecycle(it) }\n@PerScreen\n@Provides\nfun provideBinder(\nbasePresenterDependency: BasePresenterDependency,\n- eventHub: BaseEventHub<MainEvent>,\n+ eventHub: ScreenEventHub<MainEvent>,\nmiddleware: MainMiddleware\n- ): Any = BaseBinder(basePresenterDependency)\n+ ): Any = ScreenBinder(basePresenterDependency)\n.apply { bind(eventHub, middleware) }\n}\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n@@ -3,14 +3,11 @@ package ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list\nimport android.os.Bundle\nimport android.os.PersistableBundle\nimport kotlinx.android.synthetic.main.activity_simple_list.*\n-import ru.surfstudio.android.core.mvi.event.hub.RxEventHub\nimport ru.surfstudio.android.core.mvi.event.hub.owner.SingleHubOwner\nimport ru.surfstudio.android.core.mvi.sample.R\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.controller.StepperButtonController\n-import ru.surfstudio.android.core.mvi.ui.BaseReactActivityView\nimport ru.surfstudio.android.core.mvp.binding.rx.ui.BaseRxActivityView\n-import ru.surfstudio.android.core.mvp.configurator.BaseActivityViewConfigurator\nimport ru.surfstudio.android.easyadapter.EasyAdapter\nimport ru.surfstudio.android.easyadapter.ItemList\nimport javax.inject.Inject\n@@ -22,7 +19,7 @@ import javax.inject.Inject\nclass SimpleListActivityView : BaseRxActivityView(), SingleHubOwner<SimpleListEvent> {\n@Inject\n- override lateinit var hub: BaseEventHub<SimpleListEvent>\n+ override lateinit var hub: ScreenEventHub<SimpleListEvent>\n@Inject\nlateinit var sh: SimpleListStateHolder\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n@@ -5,16 +5,16 @@ import android.content.Intent\nimport dagger.Component\nimport dagger.Module\nimport dagger.Provides\n-import ru.surfstudio.android.core.mvi.sample.ui.base.binder.BaseBinder\n-import ru.surfstudio.android.core.mvi.sample.ui.base.hub.BaseEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.binder.ScreenBinder\n+import ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\n+import ru.surfstudio.android.core.mvi.sample.ui.base.hub.dependency.ScreenEventHubDependency\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.dependency.BaseMiddlewareDependency\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\nimport ru.surfstudio.android.core.mvp.error.ErrorHandler\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\nimport ru.surfstudio.android.core.ui.navigation.activity.navigator.ActivityNavigator\n-import ru.surfstudio.android.core.ui.state.ScreenState\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\nimport ru.surfstudio.android.sample.dagger.ui.base.configurator.DefaultActivityScreenConfigurator\n@@ -26,40 +26,29 @@ class SimpleListScreenConfigurator(intent: Intent) : DefaultActivityScreenConfig\n@PerScreen\n@Component(dependencies = [DefaultActivityComponent::class],\n- modules = [DefaultActivityScreenModule::class, SimpleListScreenModule::class])\n+ modules = [DefaultActivityScreenModule::class, SimpleListScreenModule::class, ReactScreenModule::class])\ninternal interface SimpleListScreenComponent\n: BindableScreenComponent<SimpleListActivityView>\n@Module\ninternal class SimpleListScreenModule(route: SimpleListActivityRoute) : DefaultCustomScreenModule<SimpleListActivityRoute>(route) {\n- @Provides\n- @PerScreen\n- fun provideBaseMiddlewareDependency(\n- activityNavigator: ActivityNavigator,\n- schedulersProvider: SchedulersProvider,\n- errorHandler: ErrorHandler\n- ) = BaseMiddlewareDependency(activityNavigator, schedulersProvider, errorHandler)\n-\n@Provides\n@PerScreen\nfun provideEventHub(\n- screenState: ScreenState,\n- screenEventDelegateManager: ScreenEventDelegateManager\n- ): BaseEventHub<SimpleListEvent> = BaseEventHub(\n- screenState,\n- screenEventDelegateManager\n- ) { SimpleListEvent.SimpleListLifecycle(it) }\n+ screenEventHubDependency: ScreenEventHubDependency\n+ ): ScreenEventHub<SimpleListEvent> =\n+ ScreenEventHub(screenEventHubDependency) { SimpleListEvent.SimpleListLifecycle(it) }\n@PerScreen\n@Provides\nfun provideBinder(\nbasePresenterDependency: BasePresenterDependency,\n- eventHub: BaseEventHub<SimpleListEvent>,\n+ eventHub: ScreenEventHub<SimpleListEvent>,\nmiddleware: SimpleListMiddleware,\nreactor: SimpleListReactor,\nstateHolder: SimpleListStateHolder\n- ): Any = BaseBinder(basePresenterDependency)\n+ ): Any = ScreenBinder(basePresenterDependency)\n.apply { bind(eventHub, middleware, stateHolder, reactor) }\n}\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/adapter/PaginationableAdapter.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/adapter/PaginationableAdapter.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/adapter/PaginationableAdapter.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/adapter/PaginationableAdapter.kt\n* limitations under the License.\n*/\n-package ru.surfstudio.android.core.mvi.sample.ui.base.adapter\n+package ru.surfstudio.android.core.mvi.sample.ui.adapter\nimport android.view.View\nimport android.view.View.GONE\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListActivityView.kt\n@@ -14,7 +14,7 @@ import ru.surfstudio.android.easyadapter.ItemList\nimport ru.surfstudio.android.easyadapter.pagination.PaginationState\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.list.controller.ComplexListController\nimport ru.surfstudio.android.core.mvi.sample.ui.base.hub.ScreenEventHub\n-import ru.surfstudio.android.core.mvi.sample.ui.base.adapter.PaginationableAdapter\n+import ru.surfstudio.android.core.mvi.sample.ui.adapter.PaginationableAdapter\nimport ru.surfstudio.android.core.mvi.sample.ui.base.extension.observeMainLoading\nimport ru.surfstudio.android.core.mvi.sample.ui.base.extension.observeSwrLoading\nimport javax.inject.Inject\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/GenerateModuleNameFileTask.kt\n@@ -19,8 +19,7 @@ open class GenerateModuleNameFileTask : DefaultTask() {\n@TaskAction\nfun generate() {\n- val gson = GsonBuilder().create()\n- val moduleNames = (Components.value.flatMap { it.libraries }.map { library -> \"${library.name}\" })\n+ val moduleNames = (Components.value.flatMap { it.libraries }.map { it.name })\nFile(\"$OUTPUT_DIR/$FILE_NAME\").writeText(GsonBuilder().create().toJson(moduleNames))\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitDiffManager.kt\n@@ -4,6 +4,7 @@ import org.apache.commons.io.FileUtils\nimport org.eclipse.jgit.diff.DiffEntry\nimport ru.surfstudio.android.build.tasks.deploy_to_mirror.repository.MirrorRepository\nimport java.io.File\n+import java.io.FileNotFoundException\n/**\n* Work with git changes\n@@ -47,11 +48,15 @@ class GitDiffManager(\n* @param diffEntry information about diff\n*/\nfun delete(diffEntry: DiffEntry) {\n+ try {\nval file = mirrorPath(diffEntry.oldPath)\nFileUtils.forceDelete(file)\nmirrorRepository.addToIndex(file.path)\n+ } catch (ignored: FileNotFoundException) {\n+\n+ }\n}\n/**\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/GitTree.kt\n@@ -69,7 +69,7 @@ class GitTree(\nfun getParent(commit: CommitWithBranch): CommitWithBranch {\nval node = standardNodes.find { it.value == commit.commit }\n?: throw GitNodeNotFoundException(commit.commit)\n- return standardRepositoryCommitsForMirror.find { it.commit == node.parents.first().value }\n+ return standardRepositoryCommitsForMirror.find { it.commit == node.parents.firstOrNull()?.value }\n?: throw GitNodeNotFoundException(node.value)\n}\n@@ -285,11 +285,15 @@ class GitTree(\nval branchName = BranchCreator.generateBranchName(existedBranchNames)\nline.forEach { node ->\nval commit = standardRepositoryCommitsForMirror.find { it.commit == node.value }\n- if (commit?.branch?.isEmpty() == true) commit.branch = branchName\n+ if (commit?.branch?.isEmpty() == true) {\n+ commit.branch = branchName\n}\n}\n}\n+ standardRepositoryCommitsForMirror = standardRepositoryCommitsForMirror.filter { it.branch.isNotEmpty() }\n+ }\n+\n/**\n* creates chain recursively\n*/\n\n\ndiff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/deploy_to_mirror/MirrorManager.kt\n@@ -157,12 +157,12 @@ class MirrorManager(\nval mainBranch = commit.branch\nval secondBranch = gitTree.getMergeParents(commit)\n.map(CommitWithBranch::branch)\n- .first { it != mainBranch }\n+ .firstOrNull { it != mainBranch }\n+ ?: return null\nif (!mirrorRepository.isBranchExists(mainBranch) || !mirrorRepository.isBranchExists(secondBranch)) return null\nmirrorRepository.checkoutBranch(mainBranch)\n-\nval conflicts = mirrorRepository.merge(secondBranch)\nconflicts.forEach {\nval filePath = it.replaceFirst(\"${mirrorRepository.repositoryPath.path}/\", EMPTY_STRING)\n\n",
    "diff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/exceptions/release_notes/ReleaseNotesContainsCyrillicException.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/exceptions/release_notes/ReleaseNotesContainsCyrillicException.kt\n+package ru.surfstudio.android.build.exceptions.release_notes\n+\n+import org.gradle.api.GradleException\n+import ru.surfstudio.android.build.model.release_notes.ReleaseNotesInfo\n+\n+class ReleaseNotesContainsCyrillicException(\n+ releaseNotes: ReleaseNotesInfo\n+) : GradleException(\n+ \"Release notes \\\"${releaseNotes.title}\\\" contains cyrillic symbols\"\n+)\n\\ No newline at end of file\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesNotContainCyrillic.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/CheckReleaseNotesNotContainCyrillic.kt\n+package ru.surfstudio.android.build.tasks\n+\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.tasks.TaskAction\n+import ru.surfstudio.android.build.Components\n+import ru.surfstudio.android.build.ReleaseNotes\n+import ru.surfstudio.android.build.exceptions.release_notes.ReleaseNotesContainsCyrillicException\n+import ru.surfstudio.android.build.model.release_notes.ReleaseNotesInfo\n+import java.util.regex.Pattern\n+\n+\n+/**\n+ * Check ReleaseNotes does not contain cyrillic symbols\n+ */\n+open class CheckReleaseNotesNotContainCyrillic : DefaultTask() {\n+\n+ @TaskAction\n+ fun check() {\n+\n+ Components.value.forEach { component ->\n+ val releaseNotes: ReleaseNotesInfo = ReleaseNotes.findByComponentName(component.name)\n+\n+ if (releaseNotes.title.hasCyrillic || releaseNotes.versions.any { version ->\n+ version.version.hasCyrillic || version.libraries.any { library ->\n+ library.name.hasCyrillic || library.items.any { item ->\n+ item.content.hasCyrillic\n+ }\n+ }\n+ }\n+ ) {\n+ throw ReleaseNotesContainsCyrillicException(releaseNotes)\n+ }\n+ }\n+ }\n+\n+ private val String.hasCyrillic: Boolean get() = find {\n+ val block = Character.UnicodeBlock.of(it)\n+ block == Character.UnicodeBlock.CYRILLIC\n+ || block == Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY\n+ || block == Character.UnicodeBlock.CYRILLIC_EXTENDED_A\n+ || block == Character.UnicodeBlock.CYRILLIC_EXTENDED_B\n+ } != null\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/DependencyConfigurator.kt\n@@ -51,7 +51,7 @@ object DependencyConfigurator {\n*/\n@JvmStatic\nfun projectImplementation(project: Project, dependencyName: String) {\n- if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, dependencyName)) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() || !isProjectIncluded(project, dependencyName)) {\naddDependency(project, IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(dependencyName))\n} else {\naddDependency(project, IMPLEMENTATION_DEP_TYPE, project.rootProject.project(dependencyName))\n@@ -68,7 +68,7 @@ object DependencyConfigurator {\n*/\n@JvmStatic\nfun projectTestImplementation(project: Project, dependencyName: String) {\n- if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, dependencyName)) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() || !isProjectIncluded(project, dependencyName)) {\naddDependency(project, TEST_IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(dependencyName))\n} else {\naddDependency(project, TEST_IMPLEMENTATION_DEP_TYPE, project.rootProject.project(dependencyName))\n@@ -85,7 +85,7 @@ object DependencyConfigurator {\n*/\n@JvmStatic\nfun projectAndroidTestImplementation(project: Project, dependencyName: String) {\n- if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, dependencyName)) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() || !isProjectIncluded(project, dependencyName)) {\naddDependency(project, ANDROID_TEST_IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(dependencyName))\n} else {\naddDependency(project, ANDROID_TEST_IMPLEMENTATION_DEP_TYPE, project.rootProject.project(dependencyName))\n@@ -188,7 +188,7 @@ object DependencyConfigurator {\nprivate fun addAndroidStandardDependencies(project: Project, dependencies: List<Dependency>) {\ndependencies.forEach {\n- if (GradlePropertiesManager.isCurrentComponentAMirror() && !isProjectIncluded(project, it.name)) {\n+ if (GradlePropertiesManager.isCurrentComponentAMirror() || !isProjectIncluded(project, it.name)) {\naddDependency(project, IMPLEMENTATION_DEP_TYPE, getDependencyArtifactoryName(it.name))\n} else {\naddDependency(project, IMPLEMENTATION_DEP_TYPE, project.rootProject.project(\":${it.name}\"))\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\n@@ -48,13 +48,14 @@ interface NavigatorMiddleware<T : Event> : RxMiddleware<T> {\n}\nactivityNavigator.start(route)\n}\n- is FragmentRoute -> {\n- fragmentNavigator.add(route, true, TRANSIT_FRAGMENT_OPEN)\n- }\nis DialogRoute -> {\ndialogNavigator.show(route)\n}\n+\n+ is FragmentRoute -> {\n+ fragmentNavigator.add(route, true, TRANSIT_FRAGMENT_OPEN)\n+ }\n}\n}\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/experimental/navigation/NavigatorMiddleware.kt\n@@ -6,8 +6,8 @@ import io.reactivex.Observable\nimport ru.surfstudio.android.core.mvi.event.Event\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.experimental.ExperimentalFeature\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.experimental.navigation.close.*\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.EventTransformerList\nimport ru.surfstudio.android.core.mvi.ui.middleware.RxMiddleware\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.EventTransformerList\nimport ru.surfstudio.android.core.mvi.util.filterIsInstance\nimport ru.surfstudio.android.core.ui.event.result.SupportOnActivityResultRoute\nimport ru.surfstudio.android.core.ui.navigation.ScreenResult\n@@ -68,6 +68,8 @@ interface NavigatorMiddleware<T : Event> : RxMiddleware<T> {\nwhen (event) {\nis CloseActivityEvent ->\nactivityNavigator.finishCurrent()\n+ is CloseAffinityEvent ->\n+ activityNavigator.finishAffinity()\nis CloseWithResultEvent<*> -> {\nval resultRoute = event.route as SupportOnActivityResultRoute<Serializable>\nactivityNavigator.finishWithResult(resultRoute, event.result, event.isSuccess)\n\n",
    "diff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/MappingExtensions.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/MappingExtensions.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/MappingExtensions.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/MappingExtensions.kt\n@@ -2,8 +2,8 @@ package ru.surfstudio.android.core.mvi.sample.ui.base.extension\nimport ru.surfstudio.android.core.mvp.binding.rx.extensions.Optional\nimport ru.surfstudio.android.core.mvp.binding.rx.extensions.toOptional\n-import ru.surfstudio.android.core.mvp.binding.rx.response.data.*\n-import ru.surfstudio.android.core.mvp.binding.rx.response.type.Request\n+import ru.surfstudio.android.core.mvp.binding.rx.request.data.*\n+import ru.surfstudio.android.core.mvp.binding.rx.request.type.Request\nimport ru.surfstudio.android.datalistpagecount.domain.datalist.DataList\nfun <T> mapLoading(type: Request<T>, hasData: Boolean, isSwr: Boolean = false): Loading {\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/PaginationExtensions.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/PaginationExtensions.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/PaginationExtensions.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/extension/PaginationExtensions.kt\n@@ -3,8 +3,8 @@ package ru.surfstudio.android.core.mvi.sample.ui.base.extension\nimport io.reactivex.Observable\nimport ru.surfstudio.android.core.mvi.event.RequestEvent\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.experimental.pagination.PaginationEvent\n-import ru.surfstudio.android.core.mvp.binding.rx.response.state.RequestState\n-import ru.surfstudio.android.core.mvp.binding.rx.response.type.Request\n+import ru.surfstudio.android.core.mvp.binding.rx.request.state.RequestState\n+import ru.surfstudio.android.core.mvp.binding.rx.request.type.Request\nimport ru.surfstudio.android.datalistpagecount.domain.datalist.DataList\nimport ru.surfstudio.android.easyadapter.pagination.PaginationState\nimport ru.surfstudio.android.rx.extension.toObservable\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/input/InputFormMiddleware.kt\n@@ -18,7 +18,9 @@ class InputFormMiddleware @Inject constructor(\n) : BaseNavMiddleware<InputFormEvent>(baseNavMiddlewareDependency) {\noverride fun transform(eventStream: Observable<InputFormEvent>) = transformations(eventStream) {\n- +eventStream.mapNavigationAuto()\n- +map<SubmitClicked> { InputFormClosed(InputFormActivityRoute(), sh.inputString.value) }\n+ addAll(\n+ eventStream.mapNavigationAuto(),\n+ SubmitClicked::class mapTo { InputFormClosed(InputFormActivityRoute(), sh.inputString.value) }\n+ )\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListEvent.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListEvent.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListEvent.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListEvent.kt\n@@ -3,7 +3,7 @@ package ru.surfstudio.android.core.mvi.sample.ui.screen.list\nimport ru.surfstudio.android.core.mvi.event.*\nimport ru.surfstudio.android.core.mvi.event.lifecycle.LifecycleEvent\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.experimental.pagination.PaginationEvent\n-import ru.surfstudio.android.core.mvp.binding.rx.response.type.Request\n+import ru.surfstudio.android.core.mvp.binding.rx.request.type.Request\nimport ru.surfstudio.android.core.ui.state.LifecycleStage\nimport ru.surfstudio.android.datalistpagecount.domain.datalist.DataList\nimport ru.surfstudio.android.easyadapter.pagination.PaginationState\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListMiddleware.kt\n@@ -25,25 +25,6 @@ class ComplexListMiddleware @Inject constructor(\nPaginationMiddleware<ComplexListEvent> {\noverride fun transform(eventStream: Observable<ComplexListEvent>): Observable<out ComplexListEvent> {\n- transformations(eventStream) {\n-// +onCreate().eventMap { loadData() }\n-// +eventMap<SwipeRefresh> { loadData(isSwr = true) }\n-// +eventMap<LoadNextPage> { loadData(sh.list.data.nextPage) }\n-// +mapPagination(FilterNumbers()) { sh.list.canGetMore() }\n-// +map<QueryChangedDebounced> { FilterNumbers() }\n-// +eventMap<Reload> { loadData() }\n-// +eventStream.ofType<QueryChanged>().streamMap(::debounceQuery)\n-//\n-//\n-// +onCreate().eventMap { loadData() }\n-// +mapPagination(FilterNumbers()) { sh.list.canGetMore() }\n-// +(SwipeRefresh::class eventMapTo { loadData(isSwr = true) })\n-// +(LoadNextPage::class eventMapTo { loadData(sh.list.data.nextPage) })\n-// +(Reload::class eventMapTo { loadData() })\n-// +(QueryChanged::class streamMapTo (::debounceQuery))\n-// +(QueryChangedDebounced::class mapTo { FilterNumbers() })\n- }\n-\nreturn transformations(eventStream) {\naddAll(\nonCreate() eventMap { loadData() },\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListReactor.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListReactor.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListReactor.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/list/ComplexListReactor.kt\n@@ -6,7 +6,7 @@ import ru.surfstudio.android.core.mvi.sample.ui.base.extension.mapLoading\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.list.ComplexListEvent.*\nimport ru.surfstudio.android.core.mvi.ui.reactor.Reactor\nimport ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.State\n-import ru.surfstudio.android.core.mvp.binding.rx.response.state.RequestState\n+import ru.surfstudio.android.core.mvp.binding.rx.request.state.RequestState\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.datalistpagecount.domain.datalist.DataList\nimport ru.surfstudio.android.easyadapter.pagination.PaginationState\n\n\ndiff --git a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/data/EmptyErrorException.kt b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/data/EmptyErrorException.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/data/EmptyErrorException.kt\n+++ b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/data/EmptyErrorException.kt\n-package ru.surfstudio.android.core.mvp.binding.rx.response.data\n+package ru.surfstudio.android.core.mvp.binding.rx.request.data\nimport java.lang.Exception\n\n\ndiff --git a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/data/ResponseUi.kt b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/data/ResponseUi.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/data/ResponseUi.kt\n+++ b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/data/ResponseUi.kt\n-package ru.surfstudio.android.core.mvp.binding.rx.response.data\n+package ru.surfstudio.android.core.mvp.binding.rx.request.data\nimport ru.surfstudio.android.core.mvp.binding.rx.extensions.Optional\n\n\ndiff --git a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/state/RequestState.kt b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/state/RequestState.kt\n+++ b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt\n-package ru.surfstudio.android.core.mvp.binding.rx.response.state\n+package ru.surfstudio.android.core.mvp.binding.rx.request.state\nimport io.reactivex.Observable\nimport ru.surfstudio.android.core.mvp.binding.rx.extensions.toOptional\n-import ru.surfstudio.android.core.mvp.binding.rx.response.data.ResponseUi\n-import ru.surfstudio.android.core.mvp.binding.rx.response.data.Loading\n+import ru.surfstudio.android.core.mvp.binding.rx.request.data.ResponseUi\n+import ru.surfstudio.android.core.mvp.binding.rx.request.data.Loading\nimport ru.surfstudio.android.core.mvp.binding.rx.extensions.filterValue\nimport ru.surfstudio.android.core.mvp.binding.rx.relation.BehaviorRelation\nimport ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.PRESENTER\n\n\ndiff --git a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/type/Request.kt b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/type/Request.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/response/type/Request.kt\n+++ b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/type/Request.kt\n-package ru.surfstudio.android.core.mvp.binding.rx.response.type\n+package ru.surfstudio.android.core.mvp.binding.rx.request.type\nimport io.reactivex.Observable\n\n",
    "diff --git a/None b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/EventMapTransformer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/EventMapTransformer.kt\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+\n+import io.reactivex.Observable\n+\n+class EventMapTransformer<T, E>(\n+ private val mapper: (T) -> Observable<out E>\n+) : StreamTransformer<T, E> {\n+\n+ override fun map(stream: Observable<T>): Observable<out E> {\n+ return stream.flatMap { mapper(it) }\n+ }\n+}\n\n\ndiff --git a/None b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/MapTransformer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/MapTransformer.kt\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+\n+import io.reactivex.Observable\n+\n+class MapTransformer<T, E>(\n+ private val mapper: (T) -> E\n+) : StreamTransformer<T, E> {\n+\n+ override fun map(stream: Observable<T>): Observable<out E> {\n+ return stream.map { mapper(it) }\n+ }\n+}\n\n\ndiff --git a/None b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/ReactTransformer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/ReactTransformer.kt\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+\n+import io.reactivex.Observable\n+\n+class ReactTransformer<T, E>(\n+ private val mapper: (T) -> Unit\n+) : StreamTransformer<T, E> {\n+\n+ override fun map(stream: Observable<T>): Observable<out E> {\n+ return stream.flatMap {\n+ mapper(it)\n+ Observable.empty<E>()\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamMapTransformer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamMapTransformer.kt\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+\n+import io.reactivex.Observable\n+\n+class StreamMapTransformer<T, E>(\n+ private val mapper: (Observable<T>) -> Observable<out E>\n+) : StreamTransformer<T, E> {\n+\n+ override fun map(stream: Observable<T>): Observable<out E> {\n+ return mapper(stream)\n+ }\n+}\n\n",
    "diff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/EventTransformerList.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/EventTransformerList.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/EventTransformerList.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/EventTransformerList.kt\n@@ -2,10 +2,10 @@ package ru.surfstudio.android.core.mvi.ui.middleware.dsl\nimport io.reactivex.Observable\nimport ru.surfstudio.android.core.mvi.event.Event\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.EventMapTransformer\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.MapTransformer\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.ReactTransformer\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.StreamMapTransformer\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx.EventMapTransformer\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx.MapTransformer\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx.ReactTransformer\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx.StreamMapTransformer\nimport ru.surfstudio.android.core.mvi.util.filterIsInstance\nimport kotlin.reflect.KClass\n\n\ndiff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/EventMapTransformer.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/EventMapTransformer.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/EventMapTransformer.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/EventMapTransformer.kt\n-package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx\nimport io.reactivex.Observable\n\n\ndiff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/MapTransformer.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/MapTransformer.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/MapTransformer.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/MapTransformer.kt\n-package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx\nimport io.reactivex.Observable\n\n\ndiff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/ReactTransformer.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/ReactTransformer.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/ReactTransformer.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/ReactTransformer.kt\n-package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx\nimport io.reactivex.Observable\n\n\ndiff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamMapTransformer.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/StreamMapTransformer.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamMapTransformer.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/StreamMapTransformer.kt\n-package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx\nimport io.reactivex.Observable\n\n\ndiff --git a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamTransformer.kt b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/StreamTransformer.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/StreamTransformer.kt\n+++ b/core-mvi/lib-core-mvi/src/main/java/ru/surfstudio/android/core/mvi/ui/middleware/dsl/transformers/rx/StreamTransformer.kt\n-package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers\n+package ru.surfstudio.android.core.mvi.ui.middleware.dsl.transformers.rx\nimport io.reactivex.Observable\n\n\ndiff --git a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/BaseMiddleware.kt b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/BaseMiddleware.kt\nindex 0000000..0000000 100644\n--- a/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/BaseMiddleware.kt\n+++ b/core-mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/middleware/BaseMiddleware.kt\n@@ -4,7 +4,7 @@ import io.reactivex.Observable\nimport ru.surfstudio.android.core.mvi.event.Event\nimport ru.surfstudio.android.core.mvi.sample.ui.base.middleware.dependency.BaseMiddlewareDependency\nimport ru.surfstudio.android.core.mvi.ui.middleware.RxMiddleware\n-import ru.surfstudio.android.core.mvi.ui.middleware.dsl.EventTransformerListDslMiddleware\n+import ru.surfstudio.android.core.mvi.ui.middleware.dsl.BaseDslRxMiddleware\nimport ru.surfstudio.android.core.mvp.binding.rx.builders.RxBuilderHandleError\nimport ru.surfstudio.android.core.mvp.binding.rx.builders.RxBuilderIo\nimport ru.surfstudio.android.core.mvp.binding.rx.builders.UiBuilderFinish\n@@ -18,7 +18,7 @@ import ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\n*/\nabstract class BaseMiddleware<T : Event>(\nbaseMiddlewareDependency: BaseMiddlewareDependency\n-) : EventTransformerListDslMiddleware<T>,\n+) : BaseDslRxMiddleware<T>,\nRxBuilderIo,\nRxBuilderHandleError,\nUiBuilderFinish {\n\n",
    "diff --git a/imageloader/lib-imageloader/src/main/java/ru/surfstudio/android/imageloader/data/ImageResourceManager.kt b/imageloader/lib-imageloader/src/main/java/ru/surfstudio/android/imageloader/data/ImageResourceManager.kt\nindex 0000000..0000000 100644\n--- a/imageloader/lib-imageloader/src/main/java/ru/surfstudio/android/imageloader/data/ImageResourceManager.kt\n+++ b/imageloader/lib-imageloader/src/main/java/ru/surfstudio/android/imageloader/data/ImageResourceManager.kt\n@@ -45,6 +45,10 @@ data class ImageResourceManager(\nvar shouldTransformPreview = true\n+ var isHardwareConfigDisabled = false\n+\n+ var isAnimationDisabled = false\n+\nval isErrorSet: Boolean get() = errorResId != DEFAULT_DRAWABLE_URI\nval isPreviewSet: Boolean get() = previewResId != DEFAULT_DRAWABLE_URI\n\n",
    "diff --git a/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt b/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\nindex 0000000..0000000 100644\n--- a/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n+++ b/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n*/\npackage ru.surfstudio.android.shared.pref\n+import android.annotation.SuppressLint\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.preference.PreferenceManager\n+import ru.surfstudio.android.utilktx.ktx.text.EMPTY_STRING\nimport java.util.*\n/**\n@@ -26,99 +28,178 @@ import java.util.*\nconst val NO_BACKUP_SHARED_PREF = \"NO_BACKUP_SHARED_PREF\"\nconst val BACKUP_SHARED_PREF = \"BACKUP_SHARED_PREF\"\n+const val EMPTY_STRING_SETTING = \"\"\n+const val EMPTY_INT_SETTING = -1\n+const val EMPTY_LONG_SETTING = -1L\n+\nobject SettingsUtil {\n- val EMPTY_STRING_SETTING = \"\"\n- val EMPTY_INT_SETTING = -1\n- val EMPTY_LONG_SETTING = -1L\n- fun getString(context: Context, key: String): String {\n- return getString(getDefaultSharedPreferences(context), key)\n+ private val sharedPreferencesEditorMap = mutableMapOf<SharedPreferences, SharedPreferences.Editor>()\n+\n+ fun getString(context: Context,\n+ key: String,\n+ prefName: String = EMPTY_STRING): String {\n+ return getString(getSharedPreferences(context, prefName), key)\n}\n- fun putString(context: Context, key: String, value: String) {\n- putString(getDefaultSharedPreferences(context), key, value)\n+ fun putString(context: Context,\n+ key: String,\n+ value: String,\n+ prefName: String = EMPTY_STRING) {\n+ putString(getSharedPreferences(context, prefName), key, value)\n}\n- fun putInt(context: Context, key: String, value: Int) {\n- putInt(getDefaultSharedPreferences(context), key, value)\n+ fun putInt(context: Context,\n+ key: String,\n+ value: Int,\n+ prefName: String = EMPTY_STRING) {\n+ putInt(getSharedPreferences(context, prefName), key, value)\n}\n- fun putLong(context: Context, key: String, value: Long) {\n- putLong(getDefaultSharedPreferences(context), key, value)\n+ fun putLong(context: Context,\n+ key: String,\n+ value: Long,\n+ prefName: String = EMPTY_STRING) {\n+ putLong(getSharedPreferences(context, prefName), key, value)\n}\n- fun getInt(context: Context, key: String): Int {\n- return getInt(getDefaultSharedPreferences(context), key)\n+ fun getInt(context: Context,\n+ key: String,\n+ prefName: String = EMPTY_STRING): Int {\n+ return getInt(getSharedPreferences(context, prefName), key)\n}\n- fun getLong(context: Context, key: String): Long {\n- return getLong(getDefaultSharedPreferences(context), key)\n+ fun getLong(context: Context,\n+ key: String,\n+ prefName: String = EMPTY_STRING): Long {\n+ return getLong(getSharedPreferences(context, prefName), key)\n}\n- fun putBoolean(context: Context, key: String, value: Boolean) {\n- putBoolean(getDefaultSharedPreferences(context), key, value)\n+ fun putBoolean(context: Context,\n+ key: String,\n+ value: Boolean,\n+ prefName: String = EMPTY_STRING) {\n+ putBoolean(getSharedPreferences(context, prefName), key, value)\n}\n- fun getBoolean(context: Context, key: String, defaultValue: Boolean): Boolean {\n- return getBoolean(getDefaultSharedPreferences(context), key, defaultValue)\n+ fun removeKey(context: Context,\n+ key: String,\n+ prefName: String = EMPTY_STRING) {\n+ removeKey(getSharedPreferences(context, prefName), key)\n+ }\n+\n+ fun clear(context: Context, prefName: String = EMPTY_STRING) {\n+ clear(getSharedPreferences(context, prefName))\n+ }\n+\n+ fun getBoolean(context: Context,\n+ key: String,\n+ defaultValue: Boolean,\n+ prefName: String = EMPTY_STRING): Boolean {\n+ return getBoolean(getSharedPreferences(context, prefName), key, defaultValue)\n}\nfun getString(sp: SharedPreferences, key: String): String {\n- return sp.getString(key, EMPTY_STRING_SETTING)\n+ return sp.getString(key, EMPTY_STRING_SETTING) ?: EMPTY_STRING\n}\nfun getStringSet(sp: SharedPreferences, key: String): Set<String> {\n- return sp.getStringSet(key, HashSet())\n+ return sp.getStringSet(key, HashSet()) ?: setOf()\n+ }\n+\n+ fun getBoolean(sp: SharedPreferences, key: String, defaultValue: Boolean): Boolean {\n+ return sp.getBoolean(key, defaultValue)\n+ }\n+\n+ fun getInt(sp: SharedPreferences, key: String): Int {\n+ return sp.getInt(key, EMPTY_INT_SETTING)\n+ }\n+\n+ fun getLong(sp: SharedPreferences, key: String): Long {\n+ return sp.getLong(key, EMPTY_LONG_SETTING)\n}\n- fun putStringSet(sp: SharedPreferences, key: String, value: Set<String>) {\n- val editor = sp.edit()\n+ fun getLong(sp: SharedPreferences,\n+ key: String,\n+ defaultValue: Long): Long {\n+ return sp.getLong(key, defaultValue)\n+ }\n+\n+ fun putStringSet(sp: SharedPreferences,\n+ key: String,\n+ value: Set<String>) {\n+ val editor = getOrCreateEditor(sp)\neditor.putStringSet(key, value)\nsaveChanges(editor)\n}\n- fun putString(sp: SharedPreferences, key: String, value: String) {\n- val editor = sp.edit()\n+ fun putString(sp: SharedPreferences,\n+ key: String,\n+ value: String) {\n+ val editor = getOrCreateEditor(sp)\neditor.putString(key, value)\nsaveChanges(editor)\n}\nfun putInt(sp: SharedPreferences, key: String, value: Int) {\n- val editor = sp.edit()\n+ val editor = getOrCreateEditor(sp)\neditor.putInt(key, value)\nsaveChanges(editor)\n}\n- fun putLong(sp: SharedPreferences, key: String, value: Long) {\n- val editor = sp.edit()\n+ fun putLong(sp: SharedPreferences,\n+ key: String,\n+ value: Long) {\n+ val editor = getOrCreateEditor(sp)\neditor.putLong(key, value)\nsaveChanges(editor)\n}\n- fun getInt(sp: SharedPreferences, key: String): Int {\n- return sp.getInt(key, EMPTY_INT_SETTING)\n+ fun putBoolean(sp: SharedPreferences,\n+ key: String,\n+ value: Boolean) {\n+ val editor = getOrCreateEditor(sp)\n+ editor.putBoolean(key, value)\n+ saveChanges(editor)\n}\n- fun getLong(sp: SharedPreferences, key: String): Long {\n- return sp.getLong(key, EMPTY_LONG_SETTING)\n+ fun removeKey(sp: SharedPreferences, key: String) {\n+ val editor = getOrCreateEditor(sp)\n+ editor.remove(key)\n+ saveChanges(editor)\n}\n- fun getLong(sp: SharedPreferences, key: String, defaultValue: Long): Long {\n- return sp.getLong(key, defaultValue)\n+ fun clear(sp: SharedPreferences) {\n+ val editor = getOrCreateEditor(sp)\n+ editor.clear()\n+ saveChanges(editor)\n}\n- fun putBoolean(sp: SharedPreferences, key: String, value: Boolean) {\n- val editor = sp.edit()\n- editor.putBoolean(key, value)\n- saveChanges(editor)\n+ private fun getSharedPreferences(context: Context,\n+ name: String,\n+ mode: Int = Context.MODE_PRIVATE): SharedPreferences =\n+ if (name.isEmpty()) {\n+ getDefaultSharedPreferences(context)\n+ } else {\n+ context.getSharedPreferences(name, mode)\n}\n- fun getBoolean(sp: SharedPreferences, key: String, defaultValue: Boolean): Boolean {\n- return sp.getBoolean(key, defaultValue)\n+ @SuppressLint(\"CommitPrefEdits\")\n+ private fun getOrCreateEditor(sp: SharedPreferences): SharedPreferences.Editor {\n+ var editor = sharedPreferencesEditorMap[sp]\n+ if (editor == null) {\n+ editor = sp.edit()\n+ sharedPreferencesEditorMap[sp] = editor\n+ }\n+ return editor as SharedPreferences.Editor\n}\n- private fun saveChanges(editor: SharedPreferences.Editor) {\n+ private fun saveChanges(editor: SharedPreferences.Editor, async: Boolean = true) {\n+ if (async) {\neditor.apply()\n+ } else {\n+ editor.commit()\n+ }\n}\nprivate fun getDefaultSharedPreferences(context: Context): SharedPreferences {\n\n",
    "diff --git a/None b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityRoute.kt\n+package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+\n+import android.content.Context\n+import android.content.Intent\n+import ru.surfstudio.android.core.ui.navigation.Route\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+import ru.surfstudio.android.core.ui.sample.ui.screen.main.MainActivityView\n+\n+class MessageActivityRoute(\n+ val infiniteLoop: Boolean = true\n+) : ActivityRoute() {\n+\n+ constructor(intent: Intent): this(intent.getBooleanExtra(Route.EXTRA_FIRST, true))\n+\n+ override fun prepareIntent(context: Context?) =\n+ Intent(context, MainActivityView::class.java)\n+ .putExtra(Route.EXTRA_FIRST, infiniteLoop)\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityView.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityView.kt\n+package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+\n+import ru.surfstudio.android.core.mvp.activity.BaseRenderableActivityView\n+import ru.surfstudio.android.core.mvp.configurator.BaseActivityViewConfigurator\n+import ru.surfstudio.android.core.mvp.presenter.CorePresenter\n+import ru.surfstudio.android.core.ui.sample.R\n+import ru.surfstudio.android.message.MessageController\n+import javax.inject.Inject\n+\n+class MessageActivityView: BaseRenderableActivityView<MessageScreenModel>() {\n+\n+ @Inject\n+ internal lateinit var messageController: MessageController\n+\n+ @Inject\n+ internal lateinit var messagePresenter: MessagePresenter\n+\n+ override fun createConfigurator(): BaseActivityViewConfigurator<*, *, *> = MessageScreenConfigurator(intent)\n+\n+ override fun getScreenName() = \"MessageActivityView\"\n+\n+ override fun getContentView(): Int = R.layout.activity_main\n+\n+ override fun getPresenters(): Array<CorePresenter<*>> = arrayOf(messagePresenter)\n+\n+ override fun renderInternal(sm: MessageScreenModel) {\n+ sm.snackParams?.let {\n+ messageController.show(it)\n+ }\n+ sm.toastParams?.let {\n+ messageController.showToast(it)\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessagePresenter.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessagePresenter.kt\n+package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+\n+import android.os.CountDownTimer\n+import android.view.Gravity\n+import android.view.LayoutInflater\n+import android.view.View\n+import com.google.android.material.snackbar.Snackbar\n+import ru.surfstudio.android.core.mvp.presenter.BasePresenter\n+import ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n+import ru.surfstudio.android.core.ui.sample.R\n+import ru.surfstudio.android.dagger.scope.PerScreen\n+import ru.surfstudio.android.message.SnackParams\n+import ru.surfstudio.android.message.ToastParams\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import javax.inject.Inject\n+\n+@PerScreen\n+class MessagePresenter @Inject constructor(\n+ basePresenterDependency: BasePresenterDependency,\n+ val route: MessageActivityRoute\n+) : BasePresenter<MessageActivityView>(basePresenterDependency) {\n+\n+ private val sm: MessageScreenModel = MessageScreenModel()\n+\n+ private var downTimer: CountDownTimer? = null\n+\n+ override fun onLoad(viewRecreated: Boolean) {\n+ super.onLoad(viewRecreated)\n+ if (!viewRecreated) {\n+ startTimer()\n+ } else {\n+ view.render(sm)\n+ }\n+ }\n+\n+ override fun onDestroy() {\n+ super.onDestroy()\n+ stopTimer()\n+ }\n+\n+ private fun startTimer(tickStart: Int = 0) {\n+ initOrUpdateTimer(tickStart)\n+ downTimer?.start()\n+ }\n+\n+ private fun stopTimer() {\n+ downTimer?.cancel()\n+ }\n+\n+ private fun initOrUpdateTimer(tickStart: Int = 0) {\n+ stopTimer()\n+\n+ downTimer = object : CountDownTimer(\n+ TimeUnit.SECONDS.toMillis(60),\n+ TimeUnit.SECONDS.toMillis(1)\n+ ) {\n+\n+ var tickCount = tickStart\n+\n+ override fun onTick(sec: Long) {\n+ tickCount++\n+ val gravities = arrayOf(Gravity.CENTER, Gravity.START, Gravity.END)\n+ val randomColor = Random().randInt(0, Integer.MAX_VALUE - 1)\n+ val randomGravity = gravities[Random().randInt(0, 2)]\n+ val message = \"tick #$tickCount\"\n+ if (tickCount % 2 != 0) {\n+ sm.snackParams = SnackParams(\n+ message = message,\n+ backgroundColor = randomColor,\n+ action = \"action\",\n+ actionColor = randomColor / 2,\n+ duration = Snackbar.LENGTH_INDEFINITE\n+ )\n+ sm.toastParams = null\n+ } else {\n+ sm.snackParams = null\n+\n+ var xOffset = 0\n+ var yOffset = 0\n+ var customView: View? = null\n+\n+ if (tickCount % 4 == 0) {\n+ xOffset = tickCount * 2\n+ yOffset = xOffset\n+ customView = LayoutInflater.from(view).inflate(R.layout.placeholder_view_loading_strategy, null)\n+ }\n+ sm.toastParams = ToastParams(\n+ message = message,\n+ xOffset = xOffset,\n+ yOffset = yOffset,\n+ gravity = randomGravity,\n+ customView = customView\n+ )\n+ }\n+ view.render(sm)\n+ }\n+\n+ override fun onFinish() {\n+ if (!route.infiniteLoop) {\n+ stopTimer()\n+ } else {\n+ startTimer(tickCount)\n+ }\n+ }\n+ }\n+ }\n+\n+ private fun Random.randInt(min: Int, max: Int): Int {\n+ return nextInt(max - min + 1) + min\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenModel.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenModel.kt\n+package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+\n+import ru.surfstudio.android.core.mvp.model.ScreenModel\n+import ru.surfstudio.android.message.SnackParams\n+import ru.surfstudio.android.message.ToastParams\n+\n+class MessageScreenModel : ScreenModel() {\n+\n+ var snackParams: SnackParams? = SnackParams()\n+ var toastParams: ToastParams? = ToastParams()\n+}\n\\ No newline at end of file\n\n\ndiff --git a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/DefaultMessageController.kt b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/DefaultMessageController.kt\nindex 0000000..0000000 100644\n--- a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/DefaultMessageController.kt\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/DefaultMessageController.kt\n*/\npackage ru.surfstudio.android.message\n+import android.annotation.SuppressLint\nimport android.graphics.Color\n-import androidx.coordinatorlayout.widget.CoordinatorLayout\n-import com.google.android.material.snackbar.Snackbar\n-import androidx.core.content.ContextCompat\nimport android.view.View\nimport android.widget.Toast\n+import androidx.annotation.ColorInt\n+import androidx.annotation.ColorRes\n+import androidx.annotation.StringRes\n+import androidx.coordinatorlayout.widget.CoordinatorLayout\n+import androidx.core.content.ContextCompat\n+import com.google.android.material.snackbar.Snackbar\nimport ru.surfstudio.android.core.ui.provider.ActivityProvider\nimport ru.surfstudio.android.core.ui.provider.FragmentProvider\n@@ -33,19 +37,22 @@ class DefaultMessageController @JvmOverloads constructor(\nval fragmentProvider: FragmentProvider? = null)\n: MessageController {\n- private val ILLEGAL_COLOR = Color.TRANSPARENT\n-\n+ @ColorInt\nprivate var snackBarBackgroundColor: Int? = null\n+ @ColorInt\n+ private var snackBarActionButtonColor: Int? = null\nprivate var toast: Toast? = null\nprivate var snackbar: Snackbar? = null\ninit {\nval typedArray = activityProvider.get()\n- .obtainStyledAttributes(intArrayOf(R.attr.snackBarBackgroundColor))\n+ .obtainStyledAttributes(intArrayOf(R.attr.snackBarBackgroundColor, R.attr.snackBarActionButtonColor))\ntry {\n- val color = typedArray.getColor(0, ILLEGAL_COLOR)\n- if (color != ILLEGAL_COLOR) {\n- snackBarBackgroundColor = color\n+ if (typedArray.hasValue(R.styleable.Core_snackBarBackgroundColor)) {\n+ snackBarBackgroundColor = typedArray.getColor(R.styleable.Core_snackBarBackgroundColor, Color.TRANSPARENT)\n+ }\n+ if (typedArray.hasValue(R.styleable.Core_snackBarActionButtonColor)) {\n+ snackBarActionButtonColor = typedArray.getColor(R.styleable.Core_snackBarActionButtonColor, Color.TRANSPARENT)\n}\n} catch (ignored: UnsupportedOperationException) {\n// ignored\n@@ -54,34 +61,96 @@ class DefaultMessageController @JvmOverloads constructor(\n}\n}\n- override fun show(stringId: Int,\n- backgroundColor: Int?,\n- actionStringId: Int?,\n- buttonColor: Int?,\n+ override fun show(\n+ @StringRes\n+ messageResId: Int?,\n+ @ColorRes\n+ backgroundColorResId: Int?,\n+ @StringRes\n+ actionResId: Int?,\n+ @ColorRes\n+ actionColorResId: Int?,\nduration: Int,\n- listener: (view: View) -> Unit) {\n- show(getView().resources.getString(stringId), backgroundColor, actionStringId, buttonColor, duration, listener)\n- }\n-\n- override fun show(message: String,\n- backgroundColor: Int?,\n- actionStringId: Int?,\n- buttonColor: Int?,\n+ listener: (view: View) -> Unit\n+ ) {\n+ show(\n+ SnackParams(\n+ messageResId = messageResId ?: 0,\n+ backgroundColorResId = backgroundColorResId ?: 0,\n+ actionResId = actionResId ?: 0,\n+ actionColorResId = actionColorResId ?: 0,\n+ duration = duration\n+ ),\n+ listener\n+ )\n+ }\n+\n+ override fun show(\n+ message: String,\n+ @ColorRes\n+ backgroundColorResId: Int?,\n+ @StringRes\n+ actionResId: Int?,\n+ @ColorRes\n+ actionColorResId: Int?,\nduration: Int,\n- listener: (view: View) -> Unit) {\n+ listener: (view: View) -> Unit\n+ ) {\n+ show(\n+ SnackParams(\n+ message = message,\n+ backgroundColorResId = backgroundColorResId ?: 0,\n+ actionResId = actionResId ?: 0,\n+ actionColorResId = actionColorResId ?: 0,\n+ duration = duration\n+ ),\n+ listener\n+ )\n+ }\n+\n+ override fun show(params: SnackParams, actionListener: (view: View) -> Unit) {\n+ val activity = activityProvider.get()\n+ val message = if (params.messageResId != 0) {\n+ activity.getString(params.messageResId)\n+ } else {\n+ params.message\n+ }\n+ var duration = params.duration\n+ if (duration != Snackbar.LENGTH_SHORT\n+ && duration != Snackbar.LENGTH_LONG\n+ && duration != Snackbar.LENGTH_INDEFINITE) {\n+ duration = Snackbar.LENGTH_SHORT\n+ }\nsnackbar = Snackbar.make(getView(), message, duration).apply {\n+ var backgroundColor: Int? = if (params.backgroundColorResId != 0) {\n+ ContextCompat.getColor(activity, params.backgroundColorResId)\n+ } else {\n+ params.backgroundColor\n+ }\nif (backgroundColor == null) {\n- snackBarBackgroundColor?.let {\n- view.setBackgroundColor(it)\n+ backgroundColor = snackBarBackgroundColor\n}\n+ if (backgroundColor != null) {\n+ view.setBackgroundColor(backgroundColor)\n+ }\n+ val actionText = if (params.actionResId != 0) {\n+ activity.getString(params.actionResId)\n} else {\n- view.setBackgroundColor(ContextCompat.getColor(view.context, backgroundColor))\n+ params.action\n}\n- actionStringId?.let {\n- setAction(it) { view -> listener.invoke(view) }\n+ if (actionText.isNotEmpty()) {\n+ setAction(actionText) { view -> actionListener.invoke(view) }\n}\n- buttonColor?.let {\n- setActionTextColor(ContextCompat.getColor(view.context, it))\n+ var actionButtonColor = if (params.actionColorResId != 0) {\n+ ContextCompat.getColor(activity, params.actionColorResId)\n+ } else {\n+ params.actionColor\n+ }\n+ if (actionButtonColor == null) {\n+ actionButtonColor = snackBarActionButtonColor\n+ }\n+ if (actionButtonColor != null) {\n+ setActionTextColor(actionButtonColor)\n}\nshow()\n}\n@@ -91,17 +160,47 @@ class DefaultMessageController @JvmOverloads constructor(\nsnackbar?.dismiss()\n}\n- override fun showToast(stringId: Int, gravity: Int, duration: Int) {\n- showToast(getView().resources.getString(stringId), gravity, duration)\n+ override fun showToast(@StringRes messageResId: Int?, gravity: Int, duration: Int) {\n+ showToast(\n+ ToastParams(messageResId = messageResId ?: 0,\n+ gravity = gravity,\n+ duration = duration)\n+ )\n}\noverride fun showToast(message: String, gravity: Int, duration: Int) {\n+ showToast(\n+ ToastParams(message = message,\n+ gravity = gravity,\n+ duration = duration)\n+ )\n+ }\n+\n+ @SuppressLint(\"ShowToast\")\n+ override fun showToast(params: ToastParams) {\ntoast?.cancel()\n- toast = Toast.makeText(getView().context, message, duration)\n- .apply {\n- setGravity(gravity, 0, 0)\n- show()\n+ val activity = activityProvider.get()\n+ val toast: Toast\n+ var duration = params.duration\n+ if (duration != Toast.LENGTH_SHORT && duration != Toast.LENGTH_LONG) {\n+ duration = Toast.LENGTH_SHORT\n+ }\n+ if (params.customView == null) {\n+ val message: String = if (params.messageResId != 0) {\n+ activity.getString(params.messageResId)\n+ } else {\n+ params.message\n+ }\n+ toast = Toast.makeText(activity, message, duration)\n+ } else {\n+ toast = Toast(activity)\n+ toast.view = params.customView\n+ toast.duration = params.duration\n+ }\n+ params.gravity?.let {\n+ toast.setGravity(params.gravity, params.xOffset, params.yOffset)\n}\n+ toast.show()\n}\n/**\n\n\ndiff --git a/None b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt\n+package ru.surfstudio.android.message\n+\n+import androidx.annotation.ColorInt\n+import androidx.annotation.ColorRes\n+import androidx.annotation.StringRes\n+import com.google.android.material.snackbar.Snackbar\n+\n+/**\n+ * Container for Snack parameters;\n+ * priority: resource id\n+ */\n+data class SnackParams(\n+ @StringRes\n+ val messageResId: Int = 0,\n+ val message: String = \"\",\n+ @ColorRes\n+ val backgroundColorResId: Int = 0,\n+ @ColorInt\n+ val backgroundColor: Int? = null,\n+ @StringRes\n+ val actionResId: Int = 0,\n+ val action: String = \"\",\n+ @ColorRes\n+ val actionColorResId: Int = 0,\n+ val actionColor: Int? = null,\n+ val duration: Int = Snackbar.LENGTH_SHORT\n+)\n\\ No newline at end of file\n\n\ndiff --git a/None b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.message\n+\n+import android.view.View\n+import android.widget.Toast\n+\n+/**\n+ * Container for Toast parameters\n+ * if custom view not specified -\n+ * make text priority:\n+ * 1. messageResId\n+ * 2. message\n+ */\n+data class ToastParams(\n+ val message: String = \"\",\n+ val messageResId: Int = 0,\n+ val gravity: Int? = null,\n+ val xOffset: Int = 0,\n+ val yOffset: Int = 0,\n+ val duration: Int = Toast.LENGTH_SHORT,\n+ val customView: View? = null\n+)\n\\ No newline at end of file\n\n\ndiff --git a/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainPresenter.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainPresenter.kt\nindex 0000000..0000000 100644\n--- a/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainPresenter.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainPresenter.kt\n@@ -28,13 +28,13 @@ internal class MainPresenter @Inject constructor(basePresenterDependency: BasePr\nR.color.colorAccent)\nfun showSnackbarWithDuration() = messageController.show(\n- stringId = R.string.snackbar_message,\n+ messageResId = R.string.snackbar_message,\nduration = 5000)\nfun showSnackbarWithListener() = messageController.show(\n- stringId = R.string.snackbar_message,\n- actionStringId = R.string.snackbar_action,\n- buttonColor = R.color.colorPrimary,\n+ messageResId = R.string.snackbar_message,\n+ actionResId = R.string.snackbar_action,\n+ actionColorResId = R.color.colorPrimary,\nlistener = { messageController.showToast(R.string.toast_action) })\nfun showGravityToast() = messageController.showToast(R.string.toast_message, Gravity.CENTER)\n\n",
    "diff --git a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/MessageController.kt b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/MessageController.kt\nindex 0000000..0000000 100644\n--- a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/MessageController.kt\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/MessageController.kt\n@@ -35,7 +35,7 @@ interface MessageController {\n}\nfun show(\n- message: String,\n+ message: CharSequence,\n@ColorRes backgroundColorResId: Int? = null,\n@StringRes actionResId: Int? = null,\n@ColorRes actionColorResId: Int? = null,\n@@ -44,7 +44,7 @@ interface MessageController {\n)\nfun show(\n- @StringRes messageResId: Int? = null,\n+ @StringRes messageResId: Int,\n@ColorRes backgroundColorResId: Int? = null,\n@StringRes actionResId: Int? = null,\n@ColorRes actionColorResId: Int? = null,\n@@ -57,14 +57,14 @@ interface MessageController {\nfun closeSnack()\nfun showToast(\n- @StringRes messageResId: Int? = null,\n- gravity: Int = DEFAULT_TOAST_GRAVITY,\n+ @StringRes messageResId: Int,\n+ gravity: Int? = DEFAULT_TOAST_GRAVITY,\nduration: Int = DEFAULT_TOAST_DURATION\n)\nfun showToast(\n- message: String,\n- gravity: Int = DEFAULT_TOAST_GRAVITY,\n+ message: CharSequence,\n+ gravity: Int? = DEFAULT_TOAST_GRAVITY,\nduration: Int = Toast.LENGTH_LONG\n)\n\n\ndiff --git a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt\nindex 0000000..0000000 100644\n--- a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/SnackParams.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Smirnov.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.message\nimport androidx.annotation.ColorInt\n@@ -12,14 +27,14 @@ import com.google.android.material.snackbar.Snackbar\ndata class SnackParams(\n@StringRes\nval messageResId: Int = 0,\n- val message: String = \"\",\n+ val message: CharSequence = \"\",\n@ColorRes\nval backgroundColorResId: Int = 0,\n@ColorInt\nval backgroundColor: Int? = null,\n@StringRes\nval actionResId: Int = 0,\n- val action: String = \"\",\n+ val action: CharSequence = \"\",\n@ColorRes\nval actionColorResId: Int = 0,\nval actionColor: Int? = null,\n\n\ndiff --git a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt\nindex 0000000..0000000 100644\n--- a/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt\n+++ b/message-controller/lib-message-controller/src/main/java/ru/surfstudio/android/message/ToastParams.kt\n/*\n- Copyright (c) 2018-present, SurfStudio LLC.\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Smirnov.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n@@ -19,14 +19,14 @@ import android.view.View\nimport android.widget.Toast\n/**\n- * Container for Toast parameters\n+ * Container for Toast parameters;\n* if custom view not specified -\n* make text priority:\n* 1. messageResId\n* 2. message\n*/\ndata class ToastParams(\n- val message: String = \"\",\n+ val message: CharSequence = \"\",\nval messageResId: Int = 0,\nval gravity: Int? = null,\nval xOffset: Int = 0,\n\n",
    "diff --git a/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt b/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\nindex 0000000..0000000 100644\n--- a/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n+++ b/shared-pref/lib-shared-pref/src/main/java/ru/surfstudio/android/shared/pref/SettingsUtil.kt\n@@ -93,66 +93,77 @@ object SettingsUtil {\ncontext: Context,\nkey: String,\nvalue: Boolean,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putBoolean(getSharedPreferences(context, prefName), key, value)\n+ putBoolean(getSharedPreferences(context, prefName), key, value, async)\n}\nfun putString(\ncontext: Context,\nkey: String,\nvalue: String,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putString(getSharedPreferences(context, prefName), key, value)\n+ putString(getSharedPreferences(context, prefName), key, value, async)\n}\nfun putInt(\ncontext: Context,\nkey: String,\nvalue: Int,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putInt(getSharedPreferences(context, prefName), key, value)\n+ putInt(getSharedPreferences(context, prefName), key, value, async)\n}\nfun putLong(\ncontext: Context,\nkey: String,\nvalue: Long,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putLong(getSharedPreferences(context, prefName), key, value)\n+ putLong(getSharedPreferences(context, prefName), key, value, async)\n}\nfun putFloat(\ncontext: Context,\nkey: String,\nvalue: Float,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putFloat(getSharedPreferences(context, prefName), key, value)\n+ putFloat(getSharedPreferences(context, prefName), key, value, async)\n}\nfun putDouble(\ncontext: Context,\nkey: String,\nvalue: Double,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- putDouble(getSharedPreferences(context, prefName), key, value)\n+ putDouble(getSharedPreferences(context, prefName), key, value, async)\n}\nfun removeKey(\ncontext: Context,\nkey: String,\n- prefName: String = EMPTY_STRING\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n) {\n- removeKey(getSharedPreferences(context, prefName), key)\n+ removeKey(getSharedPreferences(context, prefName), key, async)\n}\n- fun clear(context: Context, prefName: String = EMPTY_STRING) {\n- clear(getSharedPreferences(context, prefName))\n+ fun clear(\n+ context: Context,\n+ prefName: String = EMPTY_STRING,\n+ async: Boolean = true\n+ ) {\n+ clear(getSharedPreferences(context, prefName), async)\n}\nfun getBoolean(\n@@ -200,79 +211,90 @@ object SettingsUtil {\nfun putBoolean(\nsp: SharedPreferences,\nkey: String,\n- value: Boolean\n+ value: Boolean,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putBoolean(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nfun putString(\nsp: SharedPreferences,\nkey: String,\n- value: String\n+ value: String,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putString(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nfun putStringSet(\nsp: SharedPreferences,\nkey: String,\n- value: Set<String>\n+ value: Set<String>,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putStringSet(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\n- fun putInt(sp: SharedPreferences, key: String, value: Int) {\n+ fun putInt(\n+ sp: SharedPreferences,\n+ key: String,\n+ value: Int,\n+ async: Boolean = true\n+ ) {\nval editor = getOrCreateEditor(sp)\neditor.putInt(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nfun putLong(\nsp: SharedPreferences,\nkey: String,\n- value: Long\n+ value: Long,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putLong(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nfun putFloat(\nsp: SharedPreferences,\nkey: String,\n- value: Float\n+ value: Float,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putFloat(key, value)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nfun putDouble(\nsp: SharedPreferences,\nkey: String,\n- value: Double\n+ value: Double,\n+ async: Boolean = true\n) {\nval editor = getOrCreateEditor(sp)\neditor.putLong(key, value.toBits())\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\n- fun removeKey(sp: SharedPreferences, key: String) {\n+ fun removeKey(sp: SharedPreferences, key: String, async: Boolean = true) {\nval editor = getOrCreateEditor(sp)\neditor.remove(key)\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\n- fun clear(sp: SharedPreferences) {\n+ fun clear(sp: SharedPreferences, async: Boolean = true) {\nval editor = getOrCreateEditor(sp)\neditor.clear()\n- saveChanges(editor)\n+ saveChanges(editor, async)\n}\nprivate fun getSharedPreferences(\n@@ -292,8 +314,12 @@ object SettingsUtil {\nsp.edit()\n}\n- private fun saveChanges(editor: SharedPreferences.Editor) {\n+ private fun saveChanges(editor: SharedPreferences.Editor, async: Boolean = true) {\n+ if (async) {\neditor.apply()\n+ } else {\n+ editor.commit()\n+ }\n}\nprivate fun getDefaultSharedPreferences(context: Context): SharedPreferences {\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/binder/ScreenBinderDependency.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/binder/ScreenBinderDependency.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/binder/ScreenBinderDependency.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/binder/ScreenBinderDependency.kt\n@@ -3,6 +3,9 @@ package ru.surfstudio.android.core.mvi.impls.ui.binder\nimport ru.surfstudio.android.core.mvi.impls.ui.freezer.SubscriptionFreezer\nimport ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\n+/**\n+ * [ScreenBinder] dependency\n+ */\ndata class ScreenBinderDependency(\nval eventDelegateManager: ScreenEventDelegateManager,\nval subscriptionFreezer: SubscriptionFreezer\n\n",
    "diff --git a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityRoute.kt b/None\nindex 0000000..0000000 100644\n--- a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityRoute.kt\n+++ b/None\n-package ru.surfstudio.android.core.ui.sample.ui.screen.message\n-\n-import android.content.Context\n-import android.content.Intent\n-import ru.surfstudio.android.core.ui.navigation.Route\n-import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n-import ru.surfstudio.android.core.ui.sample.ui.screen.main.MainActivityView\n-\n-class MessageActivityRoute(\n- val infiniteLoop: Boolean = true\n-) : ActivityRoute() {\n-\n- constructor(intent: Intent): this(intent.getBooleanExtra(Route.EXTRA_FIRST, true))\n-\n- override fun prepareIntent(context: Context?) =\n- Intent(context, MainActivityView::class.java)\n- .putExtra(Route.EXTRA_FIRST, infiniteLoop)\n-}\n\\ No newline at end of file\n\n\ndiff --git a/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainActivityView.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainActivityView.kt\nindex 0000000..0000000 100644\n--- a/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainActivityView.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/main/MainActivityView.kt\n@@ -42,5 +42,6 @@ class MainActivityView : BaseRenderableActivityView<MainScreenModel>() {\nshow_snackbar_with_listener.setOnClickListener { presenter.showSnackbarWithListener() }\nshow_gravity_toast.setOnClickListener { presenter.showGravityToast() }\nclose_snackbar.setOnClickListener { presenter.closeSnackbar() }\n+ start_message_demo.setOnClickListener { presenter.startMessageDemo() }\n}\n}\n\n\ndiff --git a/None b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageActivityRoute.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageActivityRoute.kt\n+package ru.surfstudio.android.message.sample.ui.screen.message\n+\n+import android.content.Context\n+import android.content.Intent\n+import ru.surfstudio.android.core.ui.navigation.activity.route.ActivityRoute\n+\n+class MessageActivityRoute(\n+ val infiniteLoop: Boolean = true\n+) : ActivityRoute() {\n+\n+ constructor(intent: Intent): this(intent.getBooleanExtra(EXTRA_FIRST, true))\n+\n+ override fun prepareIntent(context: Context?): Intent =\n+ Intent(context, MessageActivityView::class.java)\n+ .putExtra(EXTRA_FIRST, infiniteLoop)\n+}\n\\ No newline at end of file\n\n\ndiff --git a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityView.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageActivityView.kt\nindex 0000000..0000000 100644\n--- a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageActivityView.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageActivityView.kt\n-package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+package ru.surfstudio.android.message.sample.ui.screen.message\nimport ru.surfstudio.android.core.mvp.activity.BaseRenderableActivityView\nimport ru.surfstudio.android.core.mvp.configurator.BaseActivityViewConfigurator\nimport ru.surfstudio.android.core.mvp.presenter.CorePresenter\n-import ru.surfstudio.android.core.ui.sample.R\nimport ru.surfstudio.android.message.MessageController\n+import ru.surfstudio.android.message.sample.R\nimport javax.inject.Inject\nclass MessageActivityView: BaseRenderableActivityView<MessageScreenModel>() {\n@@ -19,7 +19,7 @@ class MessageActivityView: BaseRenderableActivityView<MessageScreenModel>() {\noverride fun getScreenName() = \"MessageActivityView\"\n- override fun getContentView(): Int = R.layout.activity_main\n+ override fun getContentView(): Int = R.layout.activity_message\noverride fun getPresenters(): Array<CorePresenter<*>> = arrayOf(messagePresenter)\n\n\ndiff --git a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessagePresenter.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessagePresenter.kt\nindex 0000000..0000000 100644\n--- a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessagePresenter.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessagePresenter.kt\n-package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+package ru.surfstudio.android.message.sample.ui.screen.message\nimport android.os.CountDownTimer\nimport android.view.Gravity\n@@ -7,10 +7,10 @@ import android.view.View\nimport com.google.android.material.snackbar.Snackbar\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenter\nimport ru.surfstudio.android.core.mvp.presenter.BasePresenterDependency\n-import ru.surfstudio.android.core.ui.sample.R\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport ru.surfstudio.android.message.SnackParams\nimport ru.surfstudio.android.message.ToastParams\n+import ru.surfstudio.android.message.sample.R\nimport java.util.*\nimport java.util.concurrent.TimeUnit\nimport javax.inject.Inject\n\n\ndiff --git a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenConfigurator.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenConfigurator.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageScreenConfigurator.kt\n-package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+package ru.surfstudio.android.message.sample.ui.screen.message\nimport android.content.Intent\nimport dagger.Component\n@@ -30,7 +30,7 @@ internal class MessageScreenConfigurator(intent: Intent) : DefaultActivityScreen\nreturn DaggerMessageScreenConfigurator_MessageScreenComponent.builder()\n.defaultActivityComponent(defaultActivityComponent)\n.defaultActivityScreenModule(defaultActivityScreenModule)\n- .messageScreenModule(MessageScreenModule(MessageActivityRoute()))\n+ .messageScreenModule(MessageScreenModule(MessageActivityRoute(intent)))\n.build()\n}\n}\n\n\ndiff --git a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenModel.kt b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageScreenModel.kt\nindex 0000000..0000000 100644\n--- a/core-ui/sample/src/main/java/ru/surfstudio/android/core/ui/sample/ui/screen/message/MessageScreenModel.kt\n+++ b/message-controller/sample/src/main/java/ru/surfstudio/android/message/sample/ui/screen/message/MessageScreenModel.kt\n-package ru.surfstudio.android.core.ui.sample.ui.screen.message\n+package ru.surfstudio.android.message.sample.ui.screen.message\nimport ru.surfstudio.android.core.mvp.model.ScreenModel\nimport ru.surfstudio.android.message.SnackParams\n\n",
    "diff --git a/security/lib-security/src/main/java/ru/surfstudio/android/security/app/AppDebuggableChecker.kt b/None\nindex 0000000..0000000 100644\n--- a/security/lib-security/src/main/java/ru/surfstudio/android/security/app/AppDebuggableChecker.kt\n+++ b/None\n-/*\n- Copyright (c) 2018-present, SurfStudio LLC. Margarita Volodina, Oleg Zhilo.\n-\n- Licensed under the Apache License, Version 2.0 (the \"License\");\n- you may not use this file except in compliance with the License.\n- You may obtain a copy of the License at\n-\n- http://www.apache.org/licenses/LICENSE-2.0\n-\n- Unless required by applicable law or agreed to in writing, software\n- distributed under the License is distributed on an \"AS IS\" BASIS,\n- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- See the License for the specific language governing permissions and\n- limitations under the License.\n- */\n-package ru.surfstudio.android.security.app\n-\n-import android.content.Context\n-import android.content.pm.ApplicationInfo\n-import android.os.Handler\n-\n-object AppDebuggableChecker {\n- fun check(context: Context, checkDebuggable: Boolean) {\n- if (context.applicationInfo.flags and ApplicationInfo.FLAG_DEBUGGABLE != 0 && checkDebuggable) {\n- Handler().postDelayed({\n- throw RuntimeException().apply {\n- stackTrace = arrayOfNulls(0)\n- }\n- }, 1000)\n- }\n- }\n-}\n\\ No newline at end of file\n\n\ndiff --git a/None b/security/lib-security/src/main/java/ru/surfstudio/android/security/app/ReleaseAppChecker.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/security/lib-security/src/main/java/ru/surfstudio/android/security/app/ReleaseAppChecker.kt\n+/*\n+ Copyright (c) 2019-present, SurfStudio LLC. Margarita Volodina.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.security.app\n+\n+import android.content.Context\n+import android.content.pm.ApplicationInfo\n+import android.os.Handler\n+import ru.surfstudio.android.filestorage.utils.AppDirectoriesProvider\n+import java.io.File\n+\n+private const val CRASH_DELAY_MS = 1000L\n+private const val CRASHLYTICS_LOGS_DIR = \".Fabric/com.crashlytics.sdk.android.crashlytics-core\"\n+\n+/**\n+ * Object with different checks for release application.\n+ */\n+object ReleaseAppChecker {\n+\n+ /**\n+ * Function for checking release application\n+ */\n+ fun checkReleaseApp(context: Context) {\n+ arrayOf(\n+ hasDebuggableFlags(context),\n+ !ReleaseSignatureChecker.isReleaseSignatureValid(context)\n+ ).forEach {\n+ // crash app for any failed check\n+ if (it) {\n+ crash()\n+ }\n+ }\n+ }\n+\n+ /**\n+ * Function for removing Crashlitycs logs\n+ */\n+ fun clearCrashlyticsLogs(context: Context) {\n+ File(AppDirectoriesProvider.provideBackupStorageDir(context), CRASHLYTICS_LOGS_DIR).deleteRecursively()\n+ }\n+\n+ private fun hasDebuggableFlags(context: Context): Boolean =\n+ context.applicationInfo.flags and ApplicationInfo.FLAG_DEBUGGABLE != 0\n+\n+ private fun crash() {\n+ Handler().postDelayed({\n+ throw RuntimeException().apply {\n+ stackTrace = arrayOfNulls(0)\n+ }\n+ }, CRASH_DELAY_MS)\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/security/lib-security/src/main/java/ru/surfstudio/android/security/app/ReleaseSignatureChecker.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/security/lib-security/src/main/java/ru/surfstudio/android/security/app/ReleaseSignatureChecker.kt\n+/*\n+ Copyright (c) 2019-present, SurfStudio LLC. Margarita Volodina.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+package ru.surfstudio.android.security.app\n+\n+import android.annotation.SuppressLint\n+import android.content.Context\n+import android.content.pm.PackageManager\n+import android.content.pm.Signature\n+import ru.surfstudio.android.security.crypto.security.SecurityUtils\n+import ru.surfstudio.android.utilktx.util.SdkUtils\n+\n+private const val SIGNATURE_HASH_ALGORITHM = \"SHA1\"\n+\n+/**\n+ * Release signature hash.\n+ *\n+ * todo replace with a valid value\n+ *\n+ * WARNING: Release signature hash may be different after uploading app to Google Play\n+ * when using Google Play App Signing mechanism.\n+ *\n+ * Actual release signature hash could be found at Google developer console\n+ */\n+private const val GOOGLE_PLAY_SIGNATURE_HASH = \"\"\n+\n+/**\n+ * Object for checking release signature.\n+ */\n+object ReleaseSignatureChecker {\n+\n+ /**\n+ * Function for checking if release signature of application is valid\n+ */\n+ @Suppress(\"DEPRECATION\")\n+ @SuppressLint(\"NewApi\")\n+ fun isReleaseSignatureValid(context: Context): Boolean {\n+ if (SdkUtils.isAtLeastPie()) {\n+ val signingInfo = context.packageManager.getPackageInfo(\n+ context.packageName,\n+ PackageManager.GET_SIGNING_CERTIFICATES\n+ ).signingInfo\n+ if (signingInfo.hasMultipleSigners()) {\n+ signingInfo.apkContentsSigners.forEach {\n+ if (checkSignature(it, GOOGLE_PLAY_SIGNATURE_HASH)) {\n+ return true\n+ }\n+ }\n+ } else {\n+ // Send one with signingCertificateHistory\n+ signingInfo.signingCertificateHistory.forEach {\n+ if (checkSignature(it, GOOGLE_PLAY_SIGNATURE_HASH)) {\n+ return true\n+ }\n+ }\n+ }\n+ } else {\n+ val packageInfo = context.packageManager.getPackageInfo(\n+ context.packageName,\n+ PackageManager.GET_SIGNATURES\n+ )\n+ packageInfo.signatures.forEach {\n+ if (checkSignature(it, GOOGLE_PLAY_SIGNATURE_HASH)) {\n+ return true\n+ }\n+ }\n+ }\n+ return false\n+ }\n+\n+ private fun checkSignature(signature: Signature, signatureHash: String): Boolean =\n+ getSHA1(signature.toByteArray()) == signatureHash\n+\n+ private fun getSHA1(signature: ByteArray): String =\n+ with(SecurityUtils) {\n+ bytesToHex(messageDigest(signature, SIGNATURE_HASH_ALGORITHM))\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/security/lib-security/src/main/java/ru/surfstudio/android/security/crypto/security/SecurityUtils.kt b/security/lib-security/src/main/java/ru/surfstudio/android/security/crypto/security/SecurityUtils.kt\nindex 0000000..0000000 100644\n--- a/security/lib-security/src/main/java/ru/surfstudio/android/security/crypto/security/SecurityUtils.kt\n+++ b/security/lib-security/src/main/java/ru/surfstudio/android/security/crypto/security/SecurityUtils.kt\n/*\n- Copyright (c) 2018-present, SurfStudio LLC. Margarita Volodina, Oleg Zhilo.\n+ Copyright (c) 2019-present, SurfStudio LLC. Margarita Volodina, Oleg Zhilo.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n*/\npackage ru.surfstudio.android.security.crypto.security\n+import android.util.Base64\n+import ru.surfstudio.android.utilktx.ktx.text.EMPTY_STRING\n+import java.security.KeyFactory\n+import java.security.MessageDigest\nimport java.security.SecureRandom\n+import java.security.spec.X509EncodedKeySpec\n+import javax.crypto.Cipher\n+\n+private val HEX_ARRAY =\n+ charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\nobject SecurityUtils {\ninternal const val DEFAULT_CIPHER_TRANSFORMATION = \"AES/CBC/PKCS7Padding\"\ninternal const val DEFAULT_KEY_ALGORITHM = \"PBKDF2WithHmacSHA1\"\n+ private const val DEFAULT_MESSAGE_DIGEST_ALGORITHM_TYPE = \"SHA-256\"\n+ private const val DEFAULT_PUBLIC_KEY_ALGORITHM = \"RSA\"\nprivate const val DEFAULT_SALT_SIZE = 16\n- fun generateSalt(saltSize: Int = DEFAULT_SALT_SIZE): ByteArray {\n- val salt = ByteArray(saltSize)\n- SecureRandom().nextBytes(salt)\n- return salt\n+ /**\n+ * Function for generation of a random byte array\n+ */\n+ fun getRandomBytes(size: Int): ByteArray {\n+ val bytes = ByteArray(size)\n+ SecureRandom().nextBytes(bytes)\n+ return bytes\n+ }\n+\n+ /**\n+ * Function for generation of a salt for encryption\n+ */\n+ fun generateSalt(saltSize: Int = DEFAULT_SALT_SIZE): ByteArray =\n+ getRandomBytes(saltSize)\n+\n+ //region messageDigest\n+ /**\n+ * Function for a string data encryption with a given algorithm\n+ */\n+ fun messageDigest(\n+ data: String,\n+ algorithmType: String = DEFAULT_MESSAGE_DIGEST_ALGORITHM_TYPE\n+ ): ByteArray =\n+ messageDigest(data.toByteArray(), algorithmType)\n+\n+ /**\n+ * Function for a byte array encryption with a given algorithm\n+ */\n+ fun messageDigest(\n+ data: ByteArray,\n+ algorithmType: String = DEFAULT_MESSAGE_DIGEST_ALGORITHM_TYPE\n+ ): ByteArray =\n+ MessageDigest.getInstance(algorithmType).digest(data)\n+ //endregion\n+\n+ //region Base64\n+ /**\n+ * Function for a byte array encryption into Base64 format\n+ */\n+ fun encodeBase64(data: ByteArray): ByteArray = Base64.encode(data, Base64.NO_WRAP)\n+\n+ /**\n+ * Function for a string data encryption into Base64 format\n+ */\n+ fun encodeBase64(data: String): ByteArray = encodeBase64(data.toByteArray())\n+\n+ /**\n+ * Function for a string data encryption into Base64 format which returns a string data\n+ */\n+ fun encodeBase64ToString(data: String): String = String(encodeBase64(data.toByteArray()))\n+\n+ /**\n+ * Function for a byte array decryption from Base64 format\n+ */\n+ fun decodeBase64(data: ByteArray): ByteArray = Base64.decode(data, Base64.NO_WRAP)\n+\n+ /**\n+ * Function for a string data decryption from Base64 format\n+ */\n+ fun decodeBase64(data: String): ByteArray = decodeBase64(data.toByteArray())\n+\n+ /**\n+ * Function for a string data decryption from Base64 format which returns a string data\n+ */\n+ fun decodeBase64ToString(data: String): String = String(decodeBase64(data.toByteArray()))\n+ //endregion\n+\n+ /**\n+ * Function for a string data encryption with a given algorithm which returns a string data\n+ */\n+ fun hash(\n+ data: String,\n+ algorithmType: String = DEFAULT_MESSAGE_DIGEST_ALGORITHM_TYPE\n+ ): String =\n+ messageDigest(data, algorithmType)\n+ .fold(EMPTY_STRING, { str, it -> str + \"%02x\".format(it) })\n+\n+ /**\n+ * Function for a byte array conversion to hex-format\n+ */\n+ fun bytesToHex(bytes: ByteArray): String {\n+ val hexChars = CharArray(bytes.size * 2)\n+ bytes.indices.forEach {\n+ val current = bytes[it].toInt() and 0xFF\n+ hexChars[it * 2] = HEX_ARRAY[current.ushr(4)]\n+ hexChars[it * 2 + 1] = HEX_ARRAY[current and 0x0F]\n+ }\n+ return String(hexChars)\n+ }\n+\n+ /**\n+ * Function which returns decrypted byte array data by given public key\n+ *\n+ * @param publicKeyStr public key, which was read from a .pem file\n+ * @param encryptedData encrypted by private key data\n+ * @param publicKeyAlgorithm algorithm which was used for public key generation\n+ */\n+ fun getDecryptedBytes(\n+ publicKeyStr: String,\n+ encryptedData: ByteArray,\n+ publicKeyAlgorithm: String = DEFAULT_PUBLIC_KEY_ALGORITHM\n+ ): ByteArray {\n+ val keySpec = X509EncodedKeySpec(decodeBase64(publicKeyStr))\n+ val publicKey = KeyFactory.getInstance(publicKeyAlgorithm).generatePublic(keySpec)\n+\n+ with(Cipher.getInstance(publicKeyAlgorithm)) {\n+ init(Cipher.DECRYPT_MODE, publicKey)\n+ return doFinal(encryptedData)\n+ }\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/security/sample/src/main/java/ru/surfstudio/android/security/sample/app/CustomApp.kt b/security/sample/src/main/java/ru/surfstudio/android/security/sample/app/CustomApp.kt\nindex 0000000..0000000 100644\n--- a/security/sample/src/main/java/ru/surfstudio/android/security/sample/app/CustomApp.kt\n+++ b/security/sample/src/main/java/ru/surfstudio/android/security/sample/app/CustomApp.kt\n@@ -3,7 +3,7 @@ package ru.surfstudio.android.security.sample.app\nimport androidx.multidex.MultiDexApplication\nimport ru.surfstudio.android.activity.holder.ActiveActivityHolder\nimport ru.surfstudio.android.sample.dagger.app.dagger.DefaultAppModule\n-import ru.surfstudio.android.security.app.AppDebuggableChecker\n+import ru.surfstudio.android.security.app.ReleaseAppChecker\nimport ru.surfstudio.android.security.sample.BuildConfig\nimport ru.surfstudio.android.security.sample.app.dagger.CustomAppComponent\nimport ru.surfstudio.android.security.sample.app.dagger.DaggerCustomAppComponent\n@@ -20,7 +20,9 @@ class CustomApp : MultiDexApplication() {\noverride fun onCreate() {\nsuper.onCreate()\n- AppDebuggableChecker.check(this, BuildConfig.CHECK_DEBUGGABLE)\n+ if (BuildConfig.CHECK_DEBUGGABLE) {\n+ ReleaseAppChecker.checkReleaseApp(this)\n+ }\ninitInjector()\nregisterSessionManager()\n}\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\n@@ -98,6 +98,6 @@ open class ScreenNavigator(\n}\nprotected open fun openFragment(route: FragmentRoute) {\n- fragmentNavigator.add(route, true, TRANSIT_FRAGMENT_OPEN)\n+ fragmentNavigator.show(route, TRANSIT_FRAGMENT_OPEN)\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/BaseAsyncDiffer.kt b/None\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/BaseAsyncDiffer.kt\n+++ b/None\n-package ru.surfstudio.android.easyadapter.async_diff\n-\n-import android.os.Handler\n-import androidx.recyclerview.widget.DiffUtil\n-import java.util.concurrent.Executors\n-\n-/**\n- * Base [AsyncDiffer].\n- *\n- */\n-internal abstract class BaseAsyncDiffer(\n- protected val diffResultApplier: DiffResultApplier,\n- private val diffCallbackCreator: DiffCallbackCreator\n-) : AsyncDiffer {\n-\n- private val handler = Handler()\n- private val diffExecutor = Executors.newFixedThreadPool(DIFF_EXECUTOR_POOL_SIZE)\n-\n- override fun calculateDiff(diffCalculationBundle: DiffCalculationBundle) {\n- calculateDiffInternal(diffCalculationBundle)\n- }\n-\n- protected open fun calculateDiffInternal(diffCalculationBundle: DiffCalculationBundle) {\n- startDiffCalculation(diffCalculationBundle)\n- }\n-\n- protected open fun applyDiffResult(diffResultBundle: DiffResultBundle) {\n- diffResultApplier.apply(diffResultBundle)\n- }\n-\n- protected fun startDiffCalculation(diffCalculationBundle: DiffCalculationBundle) {\n- val oldItemInfo = diffCalculationBundle.oldItemInfo\n- val newItemInfo = diffCalculationBundle.newItemInfo\n-\n- diffExecutor.execute {\n- val diffResult = DiffUtil.calculateDiff(\n- diffCallbackCreator.createDiffCallback(\n- oldItemInfo,\n- newItemInfo\n- )\n- )\n- postDiffResult(DiffResultBundle(diffResult, diffCalculationBundle))\n- }\n- }\n-\n- private fun postDiffResult(diffResultBundle: DiffResultBundle) {\n- handler.post {\n- applyDiffResult(diffResultBundle)\n- }\n- }\n-\n- private companion object {\n-\n- const val DIFF_EXECUTOR_POOL_SIZE = 2\n- }\n-}\n\\ No newline at end of file\n\n\ndiff --git a/None b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\n+package ru.surfstudio.android.easyadapter.diff\n+\n+import ru.surfstudio.android.easyadapter.diff.base.Differ\n+import ru.surfstudio.android.easyadapter.diff.base.BaseDiffer\n+import ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\n+import ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\n+import androidx.recyclerview.widget.DiffUtil.DiffResult\n+\n+/**\n+ * Default [Differ] which calculates [DiffResult] in the main thread.\n+ */\n+internal class DefaultDiffer(\n+ diffResultApplier: DiffResultApplier,\n+ diffCallbackCreator: DiffCallbackCreator\n+) : BaseDiffer(diffResultApplier, diffCallbackCreator)\n\\ No newline at end of file\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/ApplyLatestAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/ApplyLatestAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.async\n+import ru.surfstudio.android.easyadapter.diff.async.base.AsyncDiffer\n+import ru.surfstudio.android.easyadapter.diff.async.base.BaseAsyncDiffer\n+import ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\n+import ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\nimport java.util.*\n/**\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/AsyncDiffStrategy.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/AsyncDiffStrategy.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.async\nimport androidx.recyclerview.widget.RecyclerView.Adapter\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/QueueAllAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/QueueAllAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.async\n+import ru.surfstudio.android.easyadapter.diff.async.base.AsyncDiffer\n+import ru.surfstudio.android.easyadapter.diff.async.base.BaseAsyncDiffer\n+import ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\n+import ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\nimport java.util.*\n/**\n\n\ndiff --git a/None b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt\n+package ru.surfstudio.android.easyadapter.diff.async.base\n+\n+import ru.surfstudio.android.easyadapter.diff.base.Differ\n+import androidx.recyclerview.widget.DiffUtil.DiffResult\n+\n+/**\n+ * [Differ] which capable to calculate [DiffResult] in a worker thread.\n+ */\n+internal interface AsyncDiffer : Differ\n\\ No newline at end of file\n\n\ndiff --git a/None b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\n+package ru.surfstudio.android.easyadapter.diff.async.base\n+\n+import ru.surfstudio.android.easyadapter.diff.base.BaseDiffer\n+import ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\n+import ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n+import java.util.concurrent.Executors\n+\n+/**\n+ * Base [AsyncDiffer].\n+ */\n+internal abstract class BaseAsyncDiffer(\n+ diffResultApplier: DiffResultApplier,\n+ diffCallbackCreator: DiffCallbackCreator\n+) : BaseDiffer(diffResultApplier, diffCallbackCreator), AsyncDiffer {\n+\n+ private val diffExecutor = Executors.newFixedThreadPool(DIFF_EXECUTOR_POOL_SIZE)\n+\n+ override fun startDiffCalculation(diffCalculationBundle: DiffCalculationBundle) {\n+ diffExecutor.execute {\n+ computeDiff(diffCalculationBundle)\n+ }\n+ }\n+\n+ private companion object {\n+\n+ const val DIFF_EXECUTOR_POOL_SIZE = 2\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/None b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\n+package ru.surfstudio.android.easyadapter.diff.base\n+\n+import android.os.Handler\n+import androidx.recyclerview.widget.DiffUtil\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\n+\n+/**\n+ * Base [Differ].\n+ */\n+internal abstract class BaseDiffer(\n+ protected val diffResultApplier: DiffResultApplier,\n+ private val diffCallbackCreator: DiffCallbackCreator\n+) : Differ {\n+\n+ private val handler = Handler()\n+\n+ override fun calculateDiff(diffCalculationBundle: DiffCalculationBundle) {\n+ calculateDiffInternal(diffCalculationBundle)\n+ }\n+\n+ protected open fun calculateDiffInternal(diffCalculationBundle: DiffCalculationBundle) {\n+ startDiffCalculation(diffCalculationBundle)\n+ }\n+\n+ protected open fun applyDiffResult(diffResultBundle: DiffResultBundle) {\n+ diffResultApplier.apply(diffResultBundle)\n+ }\n+\n+ protected open fun startDiffCalculation(diffCalculationBundle: DiffCalculationBundle) {\n+ computeDiff(diffCalculationBundle)\n+ }\n+\n+ protected fun computeDiff(diffCalculationBundle: DiffCalculationBundle) {\n+ val diffResult = DiffUtil.calculateDiff(\n+ diffCallbackCreator.createDiffCallback(\n+ diffCalculationBundle.oldItemInfo,\n+ diffCalculationBundle.newItemInfo\n+ )\n+ )\n+ postDiffResult(DiffResultBundle(diffResult, diffCalculationBundle))\n+ }\n+\n+ private fun postDiffResult(diffResultBundle: DiffResultBundle) {\n+ handler.post {\n+ applyDiffResult(diffResultBundle)\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffCallbackCreator.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffCallbackCreator.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.DiffUtil.Callback\nimport ru.surfstudio.android.easyadapter.ItemInfo\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffResultApplier.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffResultApplier.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.RecyclerView.Adapter\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\n/**\n* Interface of entity capable to apply calculated [DiffResult] to [Adapter].\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/AsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/AsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n/**\n- * Interface of entity capable to calculate [DiffResult] in a worker thread.\n+ * Interface of entity capable to calculate [DiffResult].\n*/\n-internal interface AsyncDiffer {\n+internal interface Differ {\n/**\n* Initiate a diff calculation process.\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffCalculationBundle.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffCalculationBundle.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.base.data\nimport ru.surfstudio.android.easyadapter.ItemInfo\nimport ru.surfstudio.android.easyadapter.ItemList\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffResultBundle.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/async_diff/DiffResultBundle.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt\n-package ru.surfstudio.android.easyadapter.async_diff\n+package ru.surfstudio.android.easyadapter.diff.base.data\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\nimport ru.surfstudio.android.easyadapter.ItemInfo\n@@ -11,7 +11,7 @@ import ru.surfstudio.android.easyadapter.ItemList\n* @property calculationBundle [DiffCalculationBundle] with information used for diff calculation.\n*/\ninternal data class DiffResultBundle(\n- val diffResult: DiffResult,\n+ val diffResult: DiffResult?,\nval calculationBundle: DiffCalculationBundle\n) {\n\n\ndiff --git a/easyadapter/sample/src/main/java/ru/surfstudio/android/easyadapter/sample/ui/screen/async_diff/AsyncDiffActivityView.kt b/easyadapter/sample/src/main/java/ru/surfstudio/android/easyadapter/sample/ui/screen/async_diff/AsyncDiffActivityView.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/sample/src/main/java/ru/surfstudio/android/easyadapter/sample/ui/screen/async_diff/AsyncDiffActivityView.kt\n+++ b/easyadapter/sample/src/main/java/ru/surfstudio/android/easyadapter/sample/ui/screen/async_diff/AsyncDiffActivityView.kt\n@@ -10,7 +10,7 @@ import ru.surfstudio.android.core.mvp.configurator.BaseActivityViewConfigurator\nimport ru.surfstudio.android.core.mvp.presenter.CorePresenter\nimport ru.surfstudio.android.easyadapter.EasyAdapter\nimport ru.surfstudio.android.easyadapter.ItemList\n-import ru.surfstudio.android.easyadapter.async_diff.AsyncDiffStrategy\n+import ru.surfstudio.android.easyadapter.diff.async.AsyncDiffStrategy\nimport ru.surfstudio.android.easyadapter.sample.R\nimport javax.inject.Inject\n\n",
    "diff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/ItemInfo.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/ItemInfo.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/ItemInfo.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/ItemInfo.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter\n/**\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff\nimport ru.surfstudio.android.easyadapter.diff.base.Differ\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/ApplyLatestAsyncDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.async\nimport ru.surfstudio.android.easyadapter.diff.async.base.AsyncDiffer\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/AsyncDiffStrategy.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.async\nimport androidx.recyclerview.widget.RecyclerView.Adapter\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/QueueAllAsyncDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.async\nimport ru.surfstudio.android.easyadapter.diff.async.base.AsyncDiffer\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/AsyncDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.async.base\nimport ru.surfstudio.android.easyadapter.diff.base.Differ\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.async.base\nimport ru.surfstudio.android.easyadapter.diff.base.BaseDiffer\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base\nimport android.os.Handler\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffCallbackCreator.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.DiffUtil.Callback\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/DiffResultApplier.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.RecyclerView.Adapter\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/Differ.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffCalculationBundle.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base.data\nimport ru.surfstudio.android.easyadapter.ItemInfo\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/data/DiffResultBundle.kt\n+/*\n+ Copyright (c) 2018-present, SurfStudio LLC, Maxim Tuev.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\npackage ru.surfstudio.android.easyadapter.diff.base.data\nimport androidx.recyclerview.widget.DiffUtil.DiffResult\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/navigation/ScreenNavigator.kt\n@@ -26,7 +26,7 @@ open class ScreenNavigator(\n/**\n* Open screen with [Route]\n*/\n- fun open(route: Route) {\n+ open fun open(route: Route) {\nwhen (route) {\nis SupportOnActivityResultRoute<*> -> openForResult(route)\nis ActivityRoute -> openActivity(route)\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/dsl/EventTransformerList.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/dsl/EventTransformerList.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/dsl/EventTransformerList.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/dsl/EventTransformerList.kt\n@@ -42,7 +42,7 @@ open class EventTransformerList<E : Event>(\n*/\ninline infix fun <reified T : Event> Observable<T>.react(\nnoinline mapper: (T) -> Unit\n- ) = ReactTransformer<T, E>(mapper).apply(this)\n+ ) = compose(ReactTransformer<T, E>(mapper))\n/**\n* Reaction on event of type [T].\n@@ -109,7 +109,7 @@ open class EventTransformerList<E : Event>(\ninfix fun <T : Event> Observable<T>.eventMap(\nmapper: (T) -> Observable<out E>\n): Observable<out E> {\n- return EventMapTransformer(mapper).apply(this)\n+ return compose(EventMapTransformer(mapper))\n}\n/**\n@@ -151,7 +151,7 @@ open class EventTransformerList<E : Event>(\nfun <T : Event> Observable<T>.streamMap(\nmapper: (Observable<T>) -> Observable<out E>\n): Observable<out E> {\n- return StreamMapTransformer(mapper).apply(this)\n+ return compose(StreamMapTransformer(mapper))\n}\n/**\n@@ -191,7 +191,7 @@ open class EventTransformerList<E : Event>(\ninfix fun <T : Event, C : CompositionEvent<T>> Observable<C>.decompose(\nmw: RxMiddleware<T>\n): Observable<C> {\n- return CompositionTransformer<T, C>(mw).apply(this) as Observable<C>\n+ return compose(CompositionTransformer<T, C>(mw))\n}\n/**\n\n",
    "diff --git a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\nindex 0000000..0000000 100644\n--- a/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/changed_components/GitCommandRunner.kt\n@@ -6,6 +6,7 @@ import java.io.File\nconst val GIT_DIFF_COMMAND = \"git diff --name-only\"\nconst val GIT_FULL_DIFF_COMMAND = \"git diff\"\n+const val GIT_WITHOUT_SPACE_DIFF_COMMAND = \"git diff -w --ignore-all-space\"\nconst val GIT_CHECKOUT_COMMAND = \"git checkout\"\nconst val GIT_STASH_COMMAND = \"git stash\"\nconst val GIT_GET_CURRENT_REVISION_COMMAND = \"git rev-parse --short HEAD\"\n@@ -56,6 +57,20 @@ class GitCommandRunner(\nreturn runCommandWithResult(command, File(directory))\n}\n+ fun getDiffWithoutSpace(\n+ currentRevision: String,\n+ previousRevision: String,\n+ filePath: String,\n+ opts: String = \"-U0\"\n+ ): String? {\n+ val command = if (previousRevision.isEmpty()) {\n+ \"$GIT_WITHOUT_SPACE_DIFF_COMMAND $opts $currentRevision $filePath\"\n+ } else {\n+ \"$GIT_WITHOUT_SPACE_DIFF_COMMAND $opts $previousRevision $currentRevision $filePath\"\n+ }\n+ return runCommandWithResult(command, File(directory))\n+ }\n+\nfun checkoutRevision(revision: String) {\nrunCommandWithResult(GIT_STASH_COMMAND, File(directory))\nval command = \"$GIT_CHECKOUT_COMMAND $revision\"\n\n\ndiff --git a/None b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/WriteToFileReleaseNotesDiff.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/buildSrc/src/main/kotlin/ru/surfstudio/android/build/tasks/generate_release_notes_diff/WriteToFileReleaseNotesDiff.kt\n+package ru.surfstudio.android.build.tasks.generate_release_notes_diff\n+\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.tasks.TaskAction\n+import ru.surfstudio.android.build.Components\n+import ru.surfstudio.android.build.GradleProperties\n+import ru.surfstudio.android.build.ReleaseNotes\n+import ru.surfstudio.android.build.exceptions.ComponentNotFoundException\n+import ru.surfstudio.android.build.model.Component\n+import ru.surfstudio.android.build.tasks.changed_components.GitCommandRunner\n+import ru.surfstudio.android.build.utils.EMPTY_STRING\n+import java.io.File\n+\n+/**\n+ * Task to see the differences between two revisions of RELEASE_NOTES.md in each module of a project\n+ */\n+open class WriteToFileReleaseNotesDiff : DefaultTask() {\n+\n+ companion object {\n+ const val releaseNotesChangesFileUrl = \"buildSrc/build/tmp/releaseNotesChanges.txt\"\n+ }\n+\n+ private lateinit var componentName: String\n+ private lateinit var revisionToCompare: String\n+ private lateinit var currentRevision: String\n+ private var releaseNotesChanges = \"\"\n+\n+ private val gitRunner: GitCommandRunner = GitCommandRunner()\n+\n+ @TaskAction\n+ fun generate() {\n+ extractInputArguments()\n+ if (componentName.isNotEmpty()) {\n+ val component = findComponent()\n+ generateComponentDiff(component)\n+ } else {\n+ Components.value.forEach(::generateComponentDiff)\n+ }\n+ writeChangesToFile()\n+ }\n+\n+ private fun findComponent(): Component =\n+ Components.value.find { it.name == componentName }\n+ ?: throw ComponentNotFoundException(componentName)\n+\n+ private fun generateComponentDiff(component: Component) {\n+ val rawDiff = extractRawDiff(component)\n+ val diffs = parseRawDiff(rawDiff)\n+ if (diffs.isNotEmpty()) addReleaseNoteChange(component.name)\n+ writeDiff(diffs)\n+ if (diffs.isNotEmpty()) println()\n+ }\n+\n+ private fun addReleaseNoteChange(chane: String) {\n+ releaseNotesChanges += \"$chane\\n\"\n+ }\n+\n+ private fun writeChangesToFile() {\n+ val file = File(releaseNotesChangesFileUrl)\n+ with(file) {\n+ if (exists()) {\n+ delete()\n+ }\n+ createNewFile()\n+ appendText(releaseNotesChanges)\n+ }\n+ }\n+\n+ private fun writeDiff(diffs: List<GitDiff>) {\n+ var prev: GitDiff? = null\n+ diffs.forEach { diff ->\n+ writeLine(diff, prev)\n+ prev = diff\n+ }\n+ }\n+\n+ private fun writeLine(diff: GitDiff, prev: GitDiff?) {\n+ val paddingSpaces = getSpaces(diff.lineNumber)\n+ val lineToPrint = when {\n+ prev == null -> return\n+ diff.type == GitDiff.Type.SEPARATE -> \"...\"\n+ else -> \"${diff.lineNumber}$paddingSpaces${diff.line}\"\n+ }\n+ addReleaseNoteChange(lineToPrint)\n+ }\n+\n+ private fun parseRawDiff(diff: String): List<GitDiff> = SimpleGitDiffParser().parse(diff)\n+ .filter {\n+ val lineWithoutPlusAndMinus = it.line.trim()\n+ .replace(\"+\", EMPTY_STRING)\n+ .replace(\"-\", EMPTY_STRING)\n+ lineWithoutPlusAndMinus != EMPTY_STRING\n+ }\n+\n+ private fun extractRawDiff(component: Component): String {\n+ val filePath = ReleaseNotes.getReleaseNotesFilePath(component)\n+ return gitRunner.getDiffWithoutSpace(currentRevision, revisionToCompare, filePath) ?: \"\"\n+ }\n+\n+ /**\n+ * Simple padding method which adds spaces according to line length\n+ */\n+ private fun getSpaces(currentLine: Int): String {\n+ val space = \" \"\n+ val spacesCount = when {\n+ currentLine / 10 == 0 -> 3\n+ currentLine / 100 == 0 -> 2\n+ else -> 1\n+ }\n+ return space.repeat(spacesCount)\n+ }\n+\n+ private fun extractInputArguments() {\n+ componentName = if (!project.hasProperty(GradleProperties.COMPONENT)) {\n+ EMPTY_STRING\n+ } else {\n+ project.findProperty(GradleProperties.COMPONENT) as String\n+ }\n+\n+ revisionToCompare = if (!project.hasProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE)) {\n+ EMPTY_STRING\n+ } else {\n+ project.findProperty(GradleProperties.COMPONENTS_CHANGED_REVISION_TO_COMPARE) as String\n+ }\n+\n+ currentRevision = if (project.hasProperty(GradleProperties.CURRENT_REVISION)) {\n+ project.findProperty(GradleProperties.CURRENT_REVISION) as String\n+ } else {\n+ gitRunner.getCurrentRevisionShort()\n+ }\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/None b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/ImmediateMainScheduler.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/ImmediateMainScheduler.kt\n+package ru.surfstudio.android.rx.extension.scheduler\n+\n+import android.os.Looper\n+import io.reactivex.Scheduler\n+import io.reactivex.android.schedulers.AndroidSchedulers\n+import io.reactivex.disposables.Disposable\n+import io.reactivex.schedulers.Schedulers\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * [Scheduler] that does the work immediately, when in main thread,\n+ * or switches thread to main and pushes work to the end of the MessageQueue when in other thread.\n+ */\n+object ImmediateMainScheduler : Scheduler() {\n+\n+ private val immediateScheduler = Schedulers.trampoline()\n+ private val mainThreadScheduler = AndroidSchedulers.mainThread()\n+\n+ override fun createWorker(): Worker {\n+ return ImmediateMainWorker(immediateScheduler.createWorker(), mainThreadScheduler.createWorker())\n+ }\n+\n+ class ImmediateMainWorker(\n+ private val immediateWorker: Worker,\n+ private val mainWorker: Worker\n+ ) : Worker() {\n+\n+ override fun isDisposed(): Boolean {\n+ return immediateWorker.isDisposed && mainWorker.isDisposed\n+ }\n+\n+ override fun schedule(run: Runnable, delay: Long, unit: TimeUnit): Disposable {\n+ return if (isMainThread()) {\n+ immediateWorker.schedule(run, delay, unit)\n+ } else {\n+ mainWorker.schedule(run, delay, unit)\n+ }\n+ }\n+\n+ override fun dispose() {\n+ mainWorker.dispose()\n+ immediateWorker.dispose()\n+ }\n+\n+ private fun isMainThread() = Thread.currentThread() == Looper.getMainLooper().thread\n+ }\n+}\n\\ No newline at end of file\n\n",
    "diff --git a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt\nindex 0000000..0000000 100644\n--- a/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt\n+++ b/core-mvp-binding/lib-core-mvp-binding/src/main/java/ru/surfstudio/android/core/mvp/binding/rx/request/state/RequestState.kt\n@@ -32,6 +32,10 @@ open class RequestState<T>(\nfun observeData(): Observable<T> = relay.share()\n.flatMap { skipIfNull(it.data) }\n+ fun observeOptionalData(): Observable<Optional<T>> = relay.share()\n+ .map { if (it.data == null) Optional.empty() else Optional.of(it.data) }\n+ .distinctUntilChanged()\n+\nfun observeLoading(): Observable<Loading> = relay.share()\n.flatMap { skipIfNull(it.load) }\n.distinctUntilChanged()\n@@ -42,12 +46,12 @@ open class RequestState<T>(\nfun observeError(): Observable<Throwable> = relay.share()\n.flatMap { skipIfNull(it.error) }\n- fun observeOptionalError() = relay.share()\n+ fun observeOptionalError(): Observable<Optional<Throwable>> = relay.share()\n.map { if (it.error == null) Optional.empty() else Optional.of(it.error) }\n.distinctUntilChanged()\n- fun observeHasError() = relay.share()\n- .map { it.error == null }\n+ fun observeHasError(): Observable<Boolean> = relay.share()\n+ .map { it.error != null }\n.distinctUntilChanged()\nval data: T?\n\n",
    "diff --git a/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/ImmediateMainScheduler.kt b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt\nindex 0000000..0000000 100644\n--- a/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/ImmediateMainScheduler.kt\n+++ b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt\n@@ -8,19 +8,22 @@ import io.reactivex.schedulers.Schedulers\nimport java.util.concurrent.TimeUnit\n/**\n- * [Scheduler] that does the work immediately, when in main thread,\n+ * [Scheduler] that executes work immediately when in main thread,\n* or switches thread to main and pushes work to the end of the MessageQueue when in other thread.\n*/\n-object ImmediateMainScheduler : Scheduler() {\n+object MainThreadImmediateScheduler : Scheduler() {\nprivate val immediateScheduler = Schedulers.trampoline()\nprivate val mainThreadScheduler = AndroidSchedulers.mainThread()\noverride fun createWorker(): Worker {\n- return ImmediateMainWorker(immediateScheduler.createWorker(), mainThreadScheduler.createWorker())\n+ return MainThreadImmediateWorker(\n+ immediateScheduler.createWorker(),\n+ mainThreadScheduler.createWorker()\n+ )\n}\n- class ImmediateMainWorker(\n+ class MainThreadImmediateWorker(\nprivate val immediateWorker: Worker,\nprivate val mainWorker: Worker\n) : Worker() {\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\n@@ -62,5 +62,23 @@ abstract class BaseMiddleware<T : Event>(\n}\n}\n- override fun provideTransformationList(eventStream: Observable<T>): EventTransformerList<T> = EventTransformerList(eventStream)\n+ override fun provideTransformationList(eventStream: Observable<T>): EventTransformerList<T> =\n+ EventTransformerList(eventStream).apply {\n+ add(createReactorTriggerTransformation(eventStream))\n+ }\n+\n+ /**\n+ * Creates transformation which does nothing, but consumes all events from eventStream.\n+ *\n+ * It serves to handles rare unpleasant case:\n+ * if [Middleware] doesn't contain any transformations, [Reactor.react] method won't be triggered,\n+ * event if stream contains events from UI.\n+ *\n+ *\n+ * As a workout, we can add transformation,\n+ * which'll consume all input events but wont produce any output,\n+ * and this transformation will work like a trigger to [Reactor.react] method.\n+ */\n+ private fun createReactorTriggerTransformation(eventStream: Observable<T>) =\n+ eventStream.filter { it !is T }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt\nindex 0000000..0000000 100644\n--- a/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt\n+++ b/rx-extension/lib-rx-extension/src/main/java/ru/surfstudio/android/rx/extension/scheduler/MainThreadImmediateScheduler.kt\n@@ -23,7 +23,7 @@ object MainThreadImmediateScheduler : Scheduler() {\n)\n}\n- class MainThreadImmediateWorker(\n+ private class MainThreadImmediateWorker(\nprivate val immediateWorker: Worker,\nprivate val mainWorker: Worker\n) : Worker() {\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/middleware/BaseMiddleware.kt\n@@ -70,14 +70,13 @@ abstract class BaseMiddleware<T : Event>(\n/**\n* Creates transformation which does nothing, but consumes all events from eventStream.\n*\n- * It serves to handles rare unpleasant case:\n+ * It serves to handle specific case:\n* if [Middleware] doesn't contain any transformations, [Reactor.react] method won't be triggered,\n- * event if stream contains events from UI.\n- *\n+ * even if stream contains events from UI, which should be reacted directly.\n*\n* As a workout, we can add transformation,\n- * which'll consume all input events but wont produce any output,\n- * and this transformation will work like a trigger to [Reactor.react] method.\n+ * which will consume all input events but wont produce any output.\n+ * This transformation will work like a trigger to [Reactor.react] method.\n*/\nprivate fun createReactorTriggerTransformation(eventStream: Observable<T>) =\neventStream.filter { it !is T }\n\n",
    "diff --git a/core-ui/lib-core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt b/core-ui/lib-core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\nindex 0000000..0000000 100644\n--- a/core-ui/lib-core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\n+++ b/core-ui/lib-core-ui/src/main/java/ru/surfstudio/android/core/ui/permission/screens/settings_rational/DefaultSettingsRationalActivity.kt\n@@ -24,7 +24,7 @@ class DefaultSettingsRationalActivity : AppCompatActivity() {\n?: getString(R.string.settings_rational_go_to_settings)\nprivate val settingsNegativeButtonStr: String\n- get() = intent.getStringExtra(Route.EXTRA_FIRST)\n+ get() = intent.getStringExtra(Route.EXTRA_THIRD)\n?: getString(R.string.settings_rational_cancel)\noverride fun onCreate(savedInstanceState: Bundle?) {\n\n",
    "diff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainScreenConfigurator.kt\n@@ -8,6 +8,7 @@ import ru.surfstudio.android.core.mvi.impls.event.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.impls.event.hub.dependency.ScreenEventHubDependency\nimport ru.surfstudio.android.core.mvi.impls.ui.binder.ScreenBinder\nimport ru.surfstudio.android.core.mvi.impls.ui.binder.ScreenBinderDependency\n+import ru.surfstudio.android.core.mvi.impls.ui.dialog.EventHubDialogComponent\nimport ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\n@@ -22,7 +23,8 @@ class MainScreenConfigurator(intent: Intent) : DefaultActivityScreenConfigurator\n@Component(dependencies = [DefaultActivityComponent::class],\nmodules = [DefaultActivityScreenModule::class, MainScreenModule::class, ReactScreenModule::class])\ninternal interface MainScreenComponent\n- : BindableScreenComponent<MainActivityView>\n+ : BindableScreenComponent<MainActivityView>,\n+ EventHubDialogComponent<MainEvent>\n@Module\ninternal class MainScreenModule {\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/CustomAlertDialogRoute.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/StandardReactDialogRoute.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/CustomAlertDialogRoute.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/StandardReactDialogRoute.kt\n@@ -21,7 +21,7 @@ const val EMPTY_RES = -1\n*\n* To emit events from this dialog, you need to inherit parent component from [EventHubDialogComponent]\n*/\n-class CustomAlertDialogRoute<E : Event>(\n+class StandardReactDialogRoute<E : Event>(\n@StringRes var titleRes: Int = EMPTY_RES,\n@StringRes var messageRes: Int = EMPTY_RES,\n@StringRes var positiveBtnTextRes: Int = R.string.positive_btn,\n@@ -51,9 +51,9 @@ class CustomAlertDialogRoute<E : Event>(\nargs?.getInt(Route.EXTRA_TWELVE) ?: EMPTY_RES\n)\n- override fun getFragmentClass(): Class<out DialogFragment> = CustomAlertDialogView::class.java\n+ override fun getFragmentClass(): Class<out DialogFragment> = StandardReactDialogView::class.java\n- override fun getTag(): String = \"CustomAlertDialogView\"\n+ override fun getTag(): String = \"StandardReactDialogView\"\noverride fun prepareBundle(): Bundle = Bundle().apply {\nputInt(Route.EXTRA_FIRST, titleRes)\n\n\ndiff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/CustomAlertDialogView.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/StandardReactDialogView.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/CustomAlertDialogView.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/ui/dialog/standard/StandardReactDialogView.kt\n@@ -20,12 +20,12 @@ import ru.surfstudio.android.mvp.dialog.simple.CoreSimpleDialogFragment\n*\n* To emit events from this dialog, you need to inherit parent component from [EventHubDialogComponent]\n*/\n-class CustomAlertDialogView<E : Event> : CoreSimpleDialogFragment() {\n+class StandardReactDialogView<E : Event> : CoreSimpleDialogFragment() {\n- override fun getName(): String = \"CustomAlertDialogView\"\n+ override fun getName(): String = \"StandardReactDialogView\"\nprivate lateinit var hub: ScreenEventHub<E>\n- private lateinit var route: CustomAlertDialogRoute<E>\n+ private lateinit var route: StandardReactDialogRoute<E>\nprivate var positiveButtonEvent: E? = null\nprivate var negativeButtonEvent: E? = null\n@@ -42,7 +42,7 @@ class CustomAlertDialogView<E : Event> : CoreSimpleDialogFragment() {\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nhub = getScreenComponent(EventHubDialogComponent::class.java).screenHub() as ScreenEventHub<E>\n- route = CustomAlertDialogRoute(arguments!!)\n+ route = StandardReactDialogRoute(arguments!!)\nisCancelable = route.isCancelable\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/main/MainMiddleware.kt\npackage ru.surfstudio.android.core.mvi.sample.ui.screen.main\nimport io.reactivex.Observable\n-import ru.surfstudio.android.core.mvi.impls.ui.dialog.standard.CustomAlertDialogRoute\n+import ru.surfstudio.android.core.mvi.impls.ui.dialog.standard.StandardReactDialogRoute\nimport ru.surfstudio.android.core.mvi.impls.ui.middleware.BaseMiddleware\nimport ru.surfstudio.android.core.mvi.impls.ui.middleware.BaseMiddlewareDependency\nimport ru.surfstudio.android.core.mvi.impls.ui.middleware.navigation.composition.NavigationMiddleware\n@@ -46,7 +46,7 @@ class MainMiddleware @Inject constructor(\nreturn if (hasResultData) {\nmessageController.show(result.data).skip()\n} else {\n- Navigation().open(CustomAlertDialogRoute<MainEvent>(\n+ Navigation().open(StandardReactDialogRoute<MainEvent>(\ntitle = \"No result\",\nmessage = \"Try again?\",\npositiveButtonEvent = Navigation().open(InputFormActivityRoute()))\n\n",
    "diff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/ScreenEventHub.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/ScreenEventHub.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/ScreenEventHub.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/ScreenEventHub.kt\n@@ -11,6 +11,7 @@ import ru.surfstudio.android.core.mvi.impls.event.hub.new_intent.NewIntentEventH\nimport ru.surfstudio.android.core.mvi.event.Event\nimport ru.surfstudio.android.core.mvi.event.hub.RxEventHub\nimport ru.surfstudio.android.core.mvi.event.lifecycle.LifecycleEventHub\n+import ru.surfstudio.android.core.mvi.impls.event.hub.logging.EventLogger\nimport ru.surfstudio.android.core.ui.state.ActivityScreenState\nimport ru.surfstudio.android.core.ui.state.FragmentScreenState\nimport ru.surfstudio.android.core.ui.state.LifecycleStage\n@@ -41,7 +42,9 @@ class ScreenEventHub<T : Event>(\noverride val screenState: ScreenState = dependency.screenState\n- private val screenName: String = extractScreenName(screenState)\n+ private val logger: EventLogger = dependency.logger\n+\n+ private val screenName: String = if (logger.shouldLog) extractScreenName(screenState) else \"\"\nprivate fun extractScreenName(screenState: ScreenState): String {\nreturn when (screenState) {\n@@ -65,12 +68,12 @@ class ScreenEventHub<T : Event>(\nprivate val bus = PublishRelay.create<T>()\noverride fun accept(t: T?) {\n+ logger.log(t, screenName)\nemit(t ?: return)\n}\noverride fun emit(event: T) {\n- //Log events\n- Logger.d(\"Event / $screenName / $event\")\n+\nbus.accept(event)\n}\n\n\ndiff --git a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/dependency/ScreenEventHubDependency.kt b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/dependency/ScreenEventHubDependency.kt\nindex 0000000..0000000 100644\n--- a/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/dependency/ScreenEventHubDependency.kt\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/dependency/ScreenEventHubDependency.kt\npackage ru.surfstudio.android.core.mvi.impls.event.hub.dependency\n+import ru.surfstudio.android.core.mvi.impls.event.hub.logging.EventLogger\nimport ru.surfstudio.android.core.ui.event.ScreenEventDelegateManager\nimport ru.surfstudio.android.core.ui.state.ScreenState\n@@ -8,5 +9,6 @@ import ru.surfstudio.android.core.ui.state.ScreenState\n*/\nclass ScreenEventHubDependency(\nval screenState: ScreenState,\n- val screenEventDelegate: ScreenEventDelegateManager\n+ val screenEventDelegate: ScreenEventDelegateManager,\n+ val logger: EventLogger\n)\n\\ No newline at end of file\n\n\ndiff --git a/None b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/logging/EventLogger.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/mvi/lib-mvi-impls/src/main/java/ru/surfstudio/android/core/mvi/impls/event/hub/logging/EventLogger.kt\n+package ru.surfstudio.android.core.mvi.impls.event.hub.logging\n+\n+import ru.surfstudio.android.core.mvi.event.Event\n+import ru.surfstudio.android.logger.Logger\n+\n+/**\n+ * Simple logger, that logs events consumed by EventHub\n+ */\n+open class EventLogger {\n+\n+ open val shouldLog: Boolean = true\n+\n+ /**\n+ * Log an event\n+ */\n+ open fun log(event: Event?, screenName: String) {\n+ if (shouldLog)\n+ Logger.d(\"Event / $screenName / $event\")\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/di/EventHubModule.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/di/EventHubModule.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/di/EventHubModule.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/base/di/EventHubModule.kt\n@@ -3,6 +3,7 @@ package ru.surfstudio.android.core.mvi.sample.ui.base.di\nimport dagger.Module\nimport dagger.Provides\nimport ru.surfstudio.android.core.mvi.impls.event.hub.dependency.ScreenEventHubDependency\n+import ru.surfstudio.android.core.mvi.impls.event.hub.logging.EventLogger\nimport ru.surfstudio.android.core.mvi.impls.ui.binder.ScreenBinderDependency\nimport ru.surfstudio.android.core.mvi.impls.ui.freezer.EmptySubscriptionFreezer\nimport ru.surfstudio.android.core.mvi.impls.ui.freezer.LifecycleSubscriptionFreezer\n@@ -61,6 +62,12 @@ class EventHubModule {\nfun provideBaseEventHubDependency(\nscreenState: ScreenState,\nscreenEventDelegateManager: ScreenEventDelegateManager\n- ): ScreenEventHubDependency = ScreenEventHubDependency(screenState, screenEventDelegateManager)\n+ ): ScreenEventHubDependency {\n+ return ScreenEventHubDependency(\n+ screenState,\n+ screenEventDelegateManager,\n+ EventLogger()\n+ )\n+ }\n}\n\\ No newline at end of file\n\n",
    "diff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/DefaultDiffer.kt\n*/\npackage ru.surfstudio.android.easyadapter.diff\n-import ru.surfstudio.android.easyadapter.diff.base.Differ\n+import androidx.recyclerview.widget.DiffUtil.DiffResult\nimport ru.surfstudio.android.easyadapter.diff.base.BaseDiffer\nimport ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\nimport ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\n-import androidx.recyclerview.widget.DiffUtil.DiffResult\n+import ru.surfstudio.android.easyadapter.diff.base.Differ\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\n/**\n* Default [Differ] which calculates [DiffResult] in the main thread.\n@@ -27,4 +28,9 @@ import androidx.recyclerview.widget.DiffUtil.DiffResult\ninternal class DefaultDiffer(\ndiffResultApplier: DiffResultApplier,\ndiffCallbackCreator: DiffCallbackCreator\n-) : BaseDiffer(diffResultApplier, diffCallbackCreator)\n\\ No newline at end of file\n+) : BaseDiffer(diffResultApplier, diffCallbackCreator) {\n+\n+ override fun dispatchDiffResult(diffResultBundle: DiffResultBundle) {\n+ applyDiffResult(diffResultBundle)\n+ }\n+}\n\\ No newline at end of file\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/async/base/BaseAsyncDiffer.kt\n*/\npackage ru.surfstudio.android.easyadapter.diff.async.base\n+import android.os.Handler\nimport ru.surfstudio.android.easyadapter.diff.base.BaseDiffer\nimport ru.surfstudio.android.easyadapter.diff.base.DiffCallbackCreator\nimport ru.surfstudio.android.easyadapter.diff.base.DiffResultApplier\nimport ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\n+import ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\nimport java.util.concurrent.Executors\n/**\n@@ -29,6 +31,8 @@ internal abstract class BaseAsyncDiffer(\ndiffCallbackCreator: DiffCallbackCreator\n) : BaseDiffer(diffResultApplier, diffCallbackCreator), AsyncDiffer {\n+ private val handler = Handler()\n+\nprivate val diffExecutor = Executors.newFixedThreadPool(DIFF_EXECUTOR_POOL_SIZE)\noverride fun startDiffCalculation(diffCalculationBundle: DiffCalculationBundle) {\n@@ -37,6 +41,10 @@ internal abstract class BaseAsyncDiffer(\n}\n}\n+ override fun dispatchDiffResult(diffResultBundle: DiffResultBundle) {\n+ handler.post { applyDiffResult(diffResultBundle) }\n+ }\n+\nprivate companion object {\nconst val DIFF_EXECUTOR_POOL_SIZE = 2\n\n\ndiff --git a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\nindex 0000000..0000000 100644\n--- a/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\n+++ b/easyadapter/lib-easyadapter/src/main/java/ru/surfstudio/android/easyadapter/diff/base/BaseDiffer.kt\n*/\npackage ru.surfstudio.android.easyadapter.diff.base\n-import android.os.Handler\nimport androidx.recyclerview.widget.DiffUtil\nimport ru.surfstudio.android.easyadapter.diff.base.data.DiffCalculationBundle\nimport ru.surfstudio.android.easyadapter.diff.base.data.DiffResultBundle\n@@ -28,24 +27,27 @@ internal abstract class BaseDiffer(\nprivate val diffCallbackCreator: DiffCallbackCreator\n) : Differ {\n- private val handler = Handler()\n-\noverride fun calculateDiff(diffCalculationBundle: DiffCalculationBundle) {\ncalculateDiffInternal(diffCalculationBundle)\n}\n+ /**\n+ * Dispatches diff result to the main thread.\n+ */\n+ protected abstract fun dispatchDiffResult(diffResultBundle: DiffResultBundle)\n+\nprotected open fun calculateDiffInternal(diffCalculationBundle: DiffCalculationBundle) {\nstartDiffCalculation(diffCalculationBundle)\n}\n- protected open fun applyDiffResult(diffResultBundle: DiffResultBundle) {\n- diffResultApplier.apply(diffResultBundle)\n- }\n-\nprotected open fun startDiffCalculation(diffCalculationBundle: DiffCalculationBundle) {\ncomputeDiff(diffCalculationBundle)\n}\n+ protected open fun applyDiffResult(diffResultBundle: DiffResultBundle) {\n+ diffResultApplier.apply(diffResultBundle)\n+ }\n+\nprotected fun computeDiff(diffCalculationBundle: DiffCalculationBundle) {\nval diffResult = DiffUtil.calculateDiff(\ndiffCallbackCreator.createDiffCallback(\n@@ -53,12 +55,6 @@ internal abstract class BaseDiffer(\ndiffCalculationBundle.newItemInfo\n)\n)\n- postDiffResult(DiffResultBundle(diffResult, diffCalculationBundle))\n- }\n-\n- private fun postDiffResult(diffResultBundle: DiffResultBundle) {\n- handler.post {\n- applyDiffResult(diffResultBundle)\n- }\n+ dispatchDiffResult(DiffResultBundle(diffResult, diffCalculationBundle))\n}\n}\n\\ No newline at end of file\n\n",
    "diff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n@@ -7,9 +7,12 @@ import ru.surfstudio.android.core.mvi.event.hub.owner.SingleHubOwner\nimport ru.surfstudio.android.core.mvi.impls.event.hub.ScreenEventHub\nimport ru.surfstudio.android.core.mvi.sample.R\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.controller.StepperButtonController\n+import ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.controller.StepperData\n+import ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.State\nimport ru.surfstudio.android.core.mvp.binding.rx.ui.BaseRxActivityView\nimport ru.surfstudio.android.easyadapter.EasyAdapter\nimport ru.surfstudio.android.easyadapter.ItemList\n+import ru.surfstudio.android.logger.Logger\nimport javax.inject.Inject\n/**\n@@ -22,7 +25,7 @@ class SimpleListActivityView : BaseRxActivityView(), SingleHubOwner<SimpleListEv\noverride lateinit var hub: ScreenEventHub<SimpleListEvent>\n@Inject\n- lateinit var sh: SimpleListStateHolder\n+ lateinit var sh: State<SimpleListModel>\nval adapter = EasyAdapter()\nval controller = StepperButtonController { SimpleListEvent.StepperClicked(it).emit() }\n@@ -35,14 +38,19 @@ class SimpleListActivityView : BaseRxActivityView(), SingleHubOwner<SimpleListEv\noverride fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?, viewRecreated: Boolean) {\ninitViews()\n- sh.items bindTo ::createItemList\n+ sh bindTo ::render\n}\nprivate fun initViews() {\nsimple_list_rv.adapter = adapter\n}\n- private fun createItemList(list: List<Int>) {\n+ private fun render(model: SimpleListModel) {\n+ Logger.d(\"render state $model\")\n+ createItemList(model.items)\n+ }\n+\n+ private fun createItemList(list: List<StepperData>) {\nadapter.setItems(ItemList.create(list, controller))\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListEvent.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListEvent.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListEvent.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListEvent.kt\n@@ -2,6 +2,7 @@ package ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list\nimport ru.surfstudio.android.core.mvi.event.Event\nimport ru.surfstudio.android.core.mvi.event.lifecycle.LifecycleEvent\n+import ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.controller.StepperData\nimport ru.surfstudio.android.core.ui.state.LifecycleStage\n/**\n@@ -10,6 +11,6 @@ import ru.surfstudio.android.core.ui.state.LifecycleStage\nsealed class SimpleListEvent : Event {\ndata class Lifecycle(override var stage: LifecycleStage) : SimpleListEvent(), LifecycleEvent\n- data class StepperClicked(val position: Int) : SimpleListEvent()\n- data class ListLoaded(val list: List<Int>) : SimpleListEvent()\n+ data class StepperClicked(val id: Int) : SimpleListEvent()\n+ data class ListLoaded(val list: List<StepperData>) : SimpleListEvent()\n}\n\\ No newline at end of file\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListMiddleware.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListMiddleware.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListMiddleware.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListMiddleware.kt\n@@ -6,6 +6,7 @@ import ru.surfstudio.android.core.mvi.impls.ui.middleware.BaseMiddlewareDependen\nimport ru.surfstudio.android.dagger.scope.PerScreen\nimport javax.inject.Inject\nimport ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.SimpleListEvent.*\n+import ru.surfstudio.android.core.mvi.sample.ui.screen.simple_list.controller.StepperData\nimport ru.surfstudio.android.core.ui.state.LifecycleStage\nimport ru.surfstudio.android.rx.extension.toObservable\n@@ -25,7 +26,13 @@ class SimpleListMiddleware @Inject constructor(\nfun reactOnLifecycle(event: Lifecycle): Observable<out SimpleListEvent> =\nwhen (event.stage) {\nLifecycleStage.CREATED ->\n- ListLoaded(listOf(1, 2, 3)).toObservable()\n+ ListLoaded(\n+ listOf(\n+ StepperData(0),\n+ StepperData(1),\n+ StepperData(2)\n+ )\n+ ).toObservable()\nelse -> skip()\n}\n}\n\\ No newline at end of file\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n@@ -10,6 +10,7 @@ import ru.surfstudio.android.core.mvi.impls.event.hub.dependency.ScreenEventHubD\nimport ru.surfstudio.android.core.mvi.impls.ui.binder.ScreenBinder\nimport ru.surfstudio.android.core.mvi.impls.ui.binder.ScreenBinderDependency\nimport ru.surfstudio.android.core.mvi.sample.ui.base.di.ReactScreenModule\n+import ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.State\nimport ru.surfstudio.android.core.mvp.configurator.BindableScreenComponent\nimport ru.surfstudio.android.core.mvp.configurator.ScreenComponent\nimport ru.surfstudio.android.dagger.scope.PerScreen\n@@ -36,6 +37,10 @@ class SimpleListScreenConfigurator(intent: Intent) : DefaultActivityScreenConfig\n): ScreenEventHub<SimpleListEvent> =\nScreenEventHub(screenEventHubDependency, SimpleListEvent::Lifecycle)\n+ @Provides\n+ @PerScreen\n+ fun provideState(): State<SimpleListModel> = State(SimpleListModel())\n+\n@PerScreen\n@Provides\nfun provideBinder(\n@@ -43,7 +48,7 @@ class SimpleListScreenConfigurator(intent: Intent) : DefaultActivityScreenConfig\neventHub: ScreenEventHub<SimpleListEvent>,\nmiddleware: SimpleListMiddleware,\nreactor: SimpleListReactor,\n- stateHolder: SimpleListStateHolder\n+ stateHolder: State<SimpleListModel>\n): Any = ScreenBinder(screenBinderDependency)\n.apply { bind(eventHub, middleware, stateHolder, reactor) }\n}\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/controller/StepperButtonController.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/controller/StepperButtonController.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/controller/StepperButtonController.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/controller/StepperButtonController.kt\n@@ -12,19 +12,19 @@ import ru.surfstudio.android.easyadapter.holder.BindableViewHolder\n*/\nclass StepperButtonController(\nprivate val onBtnClick: (position: Int) -> Unit\n-) : BindableItemController<Int, StepperButtonController.Holder>() {\n+) : BindableItemController<StepperData, StepperButtonController.Holder>() {\n- override fun getItemId(data: Int): String = data.toString()\n+ override fun getItemId(data: StepperData): String = data.id.toString()\noverride fun createViewHolder(parent: ViewGroup): Holder = Holder(parent)\n- inner class Holder(parent: ViewGroup) : BindableViewHolder<Int>(parent, R.layout.element_stepper_btn) {\n+ inner class Holder(parent: ViewGroup) : BindableViewHolder<StepperData>(parent, R.layout.element_stepper_btn) {\nval button = itemView as Button\n- override fun bind(data: Int) {\n- button.setOnClickListener { onBtnClick(adapterPosition) }\n- button.text = \"Taps: $data\"\n+ override fun bind(data: StepperData) {\n+ button.setOnClickListener { onBtnClick(data.id) }\n+ button.text = \"Clicks: ${data.clicks}\"\n}\n}\n\n",
    "diff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListActivityView.kt\n@@ -12,7 +12,6 @@ import ru.surfstudio.android.core.mvp.binding.rx.relation.mvp.State\nimport ru.surfstudio.android.core.mvp.binding.rx.ui.BaseRxActivityView\nimport ru.surfstudio.android.easyadapter.EasyAdapter\nimport ru.surfstudio.android.easyadapter.ItemList\n-import ru.surfstudio.android.logger.Logger\nimport javax.inject.Inject\n/**\n@@ -46,7 +45,6 @@ class SimpleListActivityView : BaseRxActivityView(), SingleHubOwner<SimpleListEv\n}\nprivate fun render(model: SimpleListModel) {\n- Logger.d(\"render state $model\")\ncreateItemList(model.items)\n}\n\n\ndiff --git a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\nindex 0000000..0000000 100644\n--- a/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n+++ b/mvi/sample/src/main/java/ru/surfstudio/android/core/mvi/sample/ui/screen/simple_list/SimpleListScreenConfigurator.kt\n@@ -47,7 +47,7 @@ class SimpleListScreenConfigurator(intent: Intent) : DefaultActivityScreenConfig\nscreenBinderDependency: ScreenBinderDependency,\neventHub: ScreenEventHub<SimpleListEvent>,\nmiddleware: SimpleListMiddleware,\n- reactor: SimpleListReactor,\n+ reactor: SimpleListReducer,\nstateHolder: State<SimpleListModel>\n): Any = ScreenBinder(screenBinderDependency)\n.apply { bind(eventHub, middleware, stateHolder, reactor) }\n\n"
]