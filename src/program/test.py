from core import data_generation_chain
from dotenv import load_dotenv
import os

def main():
    load_dotenv()
    print(os.getenv("OPENAI_API_KEY"))
    result = data_generation_chain.generate_high_level_context("diff --git a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\nindex 0000000..0000000 100644\n--- a/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/AppComponent.kt\n@@ -8,6 +8,7 @@ import ru.surfstudio.android.core.app.ActiveActivityHolder\nimport ru.surfstudio.android.core.app.StringsProvider\nimport ru.surfstudio.android.core.ui.navigation.activity.navigator.GlobalNavigator\nimport ru.surfstudio.android.dagger.scope.PerApplication\n+import ru.surfstudio.android.notification.PushHandler\nimport ru.surfstudio.android.notification.interactor.push.storage.FcmStorage\nimport ru.surfstudio.android.rx.extension.scheduler.SchedulersProvider\nimport ru.surfstudio.android.shared.pref.NO_BACKUP_SHARED_PREF\n@@ -20,6 +21,7 @@ import ru.surfstudio.standard.app_injector.network.OkHttpModule\nimport ru.surfstudio.standard.app_injector.network.cache.CacheModule\nimport ru.surfstudio.standard.app_injector.ui.notification.FcmModule\nimport ru.surfstudio.standard.app_injector.ui.notification.MessagingService\n+import ru.surfstudio.standard.app_injector.ui.notification.NotificationModule\nimport ru.surfstudio.standard.i_initialization.InitializeAppInteractor\nimport ru.surfstudio.standard.i_session.SessionChangedInteractor\nimport javax.inject.Named\n@@ -35,7 +37,8 @@ import javax.inject.Named\nNetworkModule::class,\nOkHttpModule::class,\nCacheModule::class,\n- FcmModule::class])\n+ FcmModule::class,\n+ NotificationModule::class])\ninterface AppComponent {\nfun initializeAppInteractor(): InitializeAppInteractor\nfun context(): Context\n@@ -46,6 +49,7 @@ interface AppComponent {\nfun stringsProvider(): StringsProvider\nfun globalNavigator(): GlobalNavigator\nfun fcmStorage(): FcmStorage\n+ fun pushHandler(): PushHandler\nfun inject(to: MessagingService)\n@Named(NO_BACKUP_SHARED_PREF) fun sharedPreferences(): SharedPreferences\n\n\ndiff --git a/None b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/FirebaseServiceComponent.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/FirebaseServiceComponent.kt\n+package ru.surfstudio.standard.app_injector.ui.notification\n+\n+\n+import dagger.Component\n+import ru.surfstudio.android.notification.interactor.push.storage.FcmStorage\n+import ru.surfstudio.standard.app_injector.AppComponent\n+import javax.inject.Scope\n+\n+@PerService\n+@Component(dependencies = [AppComponent::class])\n+interface FirebaseServiceComponent {\n+\n+ fun fcmStorage(): FcmStorage\n+\n+ fun inject(s: MessagingService)\n+}\n+\n+@Scope\n+@Retention(AnnotationRetention.RUNTIME)\n+annotation class PerService\n\\ No newline at end of file\n\n\ndiff --git a/None b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/NotificationModule.kt\nindex 0000000..0000000 100644\n--- a/None\n+++ b/template/app-injector/src/main/java/ru/surfstudio/standard/app_injector/ui/notification/NotificationModule.kt\n+package ru.surfstudio.standard.app_injector.ui.notification\n+\n+import dagger.Module\n+import dagger.Provides\n+import ru.surfstudio.android.core.app.ActiveActivityHolder\n+import ru.surfstudio.android.dagger.scope.PerApplication\n+import ru.surfstudio.android.notification.PushHandler\n+import ru.surfstudio.android.notification.impl.DefaultPushHandler\n+import ru.surfstudio.android.notification.interactor.push.PushInteractor\n+import ru.surfstudio.android.notification.ui.notification.AbstractPushHandleStrategyFactory\n+\n+@Module\n+class NotificationModule {\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushInteractor() = PushInteractor()\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushHandleStrategyFactory(): AbstractPushHandleStrategyFactory =\n+ PushHandleStrategyFactory\n+\n+ @Provides\n+ @PerApplication\n+ fun providePushHandler(\n+ activeActivityHolder: ActiveActivityHolder,\n+ pushHandleStrategyFactory: AbstractPushHandleStrategyFactory,\n+ pushInteractor: PushInteractor\n+ ): PushHandler =\n+ DefaultPushHandler(\n+ activeActivityHolder,\n+ pushHandleStrategyFactory,\n+ pushInteractor\n+ )\n+\n+}\n\\ No newline at end of file\n\n")

    print(result)


if __name__ == "__main__":
    main()
