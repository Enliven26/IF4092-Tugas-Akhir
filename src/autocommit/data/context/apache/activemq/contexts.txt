Ticket ID: AMQ-9547
Issue Summary: KahaDB PageFile can call setLength() on the recovery file which always throws an exception
Issue Type: Bug
Priority: Major

Description:
There are 3 places in PageFile (part of KahaDB) that call setLength() in RecoverableRandomAccessFile. This method was changed in AMQ-5578 so that it always throws an exception when called. This method should just be removed entirely since it always throws an error and in the places where it is used we need to either stop calling it if we can or throw an exception if the length is unexpected. 

Currently when KahaDB tries to redo recovery updates, if the file length is encountered as 0 it will call this method which leads to throwing an exception. This causes the store to detect the error and rebuild the index. We should be able to just continue without calling this method and recover.

--- RETRIEVED DOCUMENT SPLIT END ---

Ticket ID: AMQ-9473
Issue Summary: Client SSL Socket configuration fails while settings parameters
Issue Type: Bug
Priority: Major

Description:
Client connection creation fails when setting socket parameters.

Exception was thrown, when I tried to set enabledProtocols parameter using url:

ssl://127.0.0.1:12345?socket.enabledProtocols=TLSv1.3

Exception is also thrown, when using tcpNoDelay parameter. It is thrown probably with most of the parameters related to sockets.

Here is the exception thrown:

{code:java}
java.lang.reflect.InaccessibleObjectException: Unable to make public void sun.security.ssl.SSLSocketImpl.setEnabledProtocols(java.lang.String[]) accessible: module java.base does not "exports sun.security.ssl" to unnamed module @48f2bd5b
13:22:43.976 [main] ERROR org.apache.activemq.util.IntrospectionSupport - Could not set property enabledProtocols on SSLSocket[hostname=127.0.0.1, port=12345, Session(...)]
            at java.lang.reflect.AccessibleObject.throwInaccessibleObjectException(AccessibleObject.java:391) ~[?:?]
            at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:367) ~[?:?]
            at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:315) ~[?:?]
            at java.lang.reflect.Method.checkCanSetAccessible(Method.java:203) ~[?:?]
            at java.lang.reflect.Method.setAccessible(Method.java:197) ~[?:?]
            at org.apache.activemq.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:184) [test/:6.0.1]
            at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:155) [test/:6.0.1]
            at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:140) [test/:6.0.1]
            at org.apache.activemq.transport.tcp.TcpTransport.initialiseSocket(TcpTransport.java:449) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.tcp.SslTransport.initialiseSocket(SslTransport.java:137) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:542) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:488) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:172) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.InactivityMonitor.start(InactivityMonitor.java:52) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:399) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:349) [activemq-client-6.0.1.jar:6.0.1]
            at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:245) [activemq-client-6.0.1.jar:6.0.1]
            at test.ActiveMQClientSSLSocketParameter.main(ActiveMQClientSSLSocketParameter.java:25) [test/:?]
{code}


Here is example to reproduce issue:
{code:java}
package test;

import java.io.IOException;
import java.net.ServerSocket;
import org.apache.activemq.ActiveMQSslConnectionFactory;

public class ActiveMQClientSSLSocketParameter {

    public static void main(String[] args) throws Exception{
        // Dummy server
        ServerSocket server = new ServerSocket(12345);
        new Thread(() -> {
            try {
                var client = server.accept();
                client.close();
            }catch(Exception e) {
                e.printStackTrace();
            }
        }).start();

        var factory = new ActiveMQSslConnectionFactory("ssl://127.0.0.1:12345?socket.enabledProtocols=TLSv1.3");
        // or socket.enabledCipherSuites=TLS_AES_256_GCM_SHA384

        try(var connection = factory.createConnection()){
            //NOP
        } finally {
            try {
                server.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }
}
{code}

Fix seems to be trivial, because same kind of issue is already corrected with server side (SSLServerSocket). See line https://github.com/apache/activemq/blob/3636a497ede5b95cf8257c2f359a3bc8a02fb325/activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java#L172

Snippet from IntrospectionSupport:
{code}
 public static boolean setProperty(Object target, String name, Object value) {
        try {
            Class<?> clazz = target.getClass();
            if (target instanceof SSLServerSocket) {
                // overcome illegal access issues with internal implementation class
                clazz = SSLServerSocket.class;
            }
            // ...
{code}

Fix for this issue would be:
{code}
 public static boolean setProperty(Object target, String name, Object value) {
        try {
            Class<?> clazz = target.getClass();
            if (target instanceof SSLServerSocket) {
                // overcome illegal access issues with internal implementation class
                clazz = SSLServerSocket.class;
            } else if (target instanceof javax.net.ssl.SSLSocket) {
                // overcome illegal access issues with internal implementation class
                clazz = javax.net.ssl.SSLSocket.class;
            }
           // ...
{code}
 
There is also similar code (https://github.com/apache/activemq/blob/3636a497ede5b95cf8257c2f359a3bc8a02fb325/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java#L87),  which probably should be corrected the same manner.

--- RETRIEVED DOCUMENT SPLIT END ---

Ticket ID: AMQ-7424
Issue Summary: NPE under very high database load
Issue Type: Bug
Priority: Major

Description:
Under abnormally heavy database loads we get a lot of transactions timeouts in our application as one would expect. Our application uses XA with Postgres and ActiveMQ. The problem is that after the abnormality goes away the system does not recover. 

During these failures we get an NPE that causes ActiveMQ to lose a database connection and the connection is never returned to the connection pool (Hikari). After the abnormality is removed and the database is responsive again the system never recovers as the connection pool is out-of-resources. 

Through debugging, we believe the following causes the connection leak in ActiveMQs handing:
{noformat}Caused by: javax.jms.JMSException: java.lang.NullPointerException
 at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1403) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1436) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:538) ~[activemq-client-5.15.11.jar:5.15.11]
 ... 134 more
 Caused by: java.lang.NullPointerException
 at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitRemove(JDBCPersistenceAdapter.java:795) ~[activemq-jdbc-store-5.15.11.jar:5.15.11]
 at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore.rollback(JdbcMemoryTransactionStore.java:171) ~[activemq-jdbc-store-5.15.11.jar:5.15.11]
 at org.apache.activemq.transaction.XATransaction.rollback(XATransaction.java:146) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.TransactionBroker.rollbackTransaction(TransactionBroker.java:257) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.BrokerFilter.rollbackTransaction(BrokerFilter.java:149) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.BrokerFilter.rollbackTransaction(BrokerFilter.java:149) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.TransportConnection.processRollbackTransaction(TransportConnection.java:553) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:104) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:200) ~[activemq-broker-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233) ~[activemq-client-5.15.11.jar:5.15.11]
 at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ~[activemq-client-5.15.11.jar:5.15.11]
 ... 1 more{noformat}
By overloading the method {{commitRemoved(...)}} in {{JDBCPersistenceAdapter}} and converting the {{NullPointerException}} above to an {{IOException}}, the connection handling code behaves as expected. We see no connection leak, and the system recovers correctly after the load abnormality has passed.

There is a very large number of things going wrong when these NPEs occur and its near impossible for us (not being experts at ActiveMQ) to see what the underlying cause for these exceptions are. However, for us, the most important is that we recover.

--- RETRIEVED DOCUMENT SPLIT END ---

Ticket ID: AMQ-7480
Issue Summary: NPE after XA transaction timeout
Issue Type: Bug
Priority: Major

Description:
Under abnormal conditions some of our JMS listeners use longer than expected time. The listeners are using XA transactions. If a XA transaction timer is triggered then even though the listener successfully processed the message we get an NPE and JDBC connection leak in the broker. 

The offending stack is:
{noformat}2020-05-06 14:01:51,697 [eListenerContainer-1] WARN .x.XAResourceTransaction - XA resource 'xamq': rollback for XID '3139322E3136382E322E3134302E746D313538383739383839393936303030303036:3139322E3136382E322E3134302E746D36' raised -7: the XA resource has become unavailable
javax.transaction.xa.XAException: java.lang.NullPointerException
 at org.apache.activemq.TransactionContext.toXAException(TransactionContext.java:803) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:552) ~[activemq-client-5.15.12.jar:5.15.12]
 at com.atomikos.datasource.xa.XAResourceTransaction.rollback(XAResourceTransaction.java:460) [transactions-jta-4.0.6.jar:?]
 at com.atomikos.icatch.imp.RollbackMessage.send(RollbackMessage.java:47) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.RollbackMessage.send(RollbackMessage.java:20) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.PropagationMessage.submit(PropagationMessage.java:67) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.Propagator$PropagatorThread.run(Propagator.java:63) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.Propagator.submitPropagationMessage(Propagator.java:42) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.CoordinatorStateHandler.rollbackFromWithinCallback(CoordinatorStateHandler.java:468) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.ActiveStateHandler$4.doRollback(ActiveStateHandler.java:189) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.CoordinatorStateHandler.rollbackWithAfterCompletionNotification(CoordinatorStateHandler.java:563) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.ActiveStateHandler.prepare(ActiveStateHandler.java:184) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.CoordinatorImp.prepare(CoordinatorImp.java:523) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.CoordinatorImp.terminate(CoordinatorImp.java:687) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.imp.CompositeTransactionImp.commit(CompositeTransactionImp.java:282) [transactions-4.0.6.jar:?]
 at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:172) [transactions-jta-4.0.6.jar:?]
 at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:414) [transactions-jta-4.0.6.jar:?]
 at com.atomikos.icatch.jta.UserTransactionImp.commit(UserTransactionImp.java:86) [transactions-jta-4.0.6.jar:?]
 at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1035) [spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743) [spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711) [spring-tx-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:251) [spring-jms-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1189) [spring-jms-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1179) [spring-jms-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1076) [spring-jms-5.2.4.RELEASE.jar:5.2.4.RELEASE]
 at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: javax.jms.JMSException: java.lang.NullPointerException
 at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1403) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1436) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:538) ~[activemq-client-5.15.12.jar:5.15.12]
 ... 24 more
Caused by: java.lang.NullPointerException
 at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore.rollback(JdbcMemoryTransactionStore.java:181) ~[activemq-jdbc-store-5.15.12.jar:5.15.12]
 at org.apache.activemq.transaction.XATransaction.rollback(XATransaction.java:146) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.TransactionBroker.rollbackTransaction(TransactionBroker.java:257) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.BrokerFilter.rollbackTransaction(BrokerFilter.java:149) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.BrokerFilter.rollbackTransaction(BrokerFilter.java:149) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.TransportConnection.processRollbackTransaction(TransportConnection.java:553) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:104) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:200) ~[activemq-broker-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233) ~[activemq-client-5.15.12.jar:5.15.12]
 at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ~[activemq-client-5.15.12.jar:5.15.12]
 at java.lang.Thread.run(Thread.java:834) ~[?:?]{noformat}
It is believed that this might be related to, or have same underlying root condition as [#AMQ-7424]

--- RETRIEVED DOCUMENT SPLIT END ---

Ticket ID: AMQ-7068
Issue Summary: Advisory messages are empty when received with a AMQP subscription
Issue Type: New Feature
Priority: Minor

Description:
We are currently moving from OpenWire to AMQP with .NET Library amqpnetlite ([https://github.com/Azure/amqpnetlite)] to communicate. So far most things work fine, but we actively used and need the advisory messages in order to recognize if other clients disconnect for example.

Accessing the advisory messages through the topic is not the problem, but the body is null for the ActiveMQ.Advisory.Connection topic. There are some properties set, but no body set and I'm not able to find any important information, like the RemoveInfo. I attached a few screenshots from debugger.

To be honest, I don't know if this is the desired behavior, but I think if there are messages on the advisory topic they should be useful.

I know that a byte representation wouldn't be that useful, but you could present the information in json or xml format, like in Stomp? (https://issues.apache.org/jira/browse/AMQ-2098)

--- RETRIEVED DOCUMENT SPLIT END ---

Ticket ID: AMQ-6894
Issue Summary: Excessive number of connections by failover transport with priorityBackup
Issue Type: Bug
Priority: Major

Description:
My clients connect to AMQ with this connection string:

(tcp://amq1:61616,tcp://amq2:61616)?randomize=false&priorityBackup=true

 It works - for some time. But sooner or later my AMQ server becomes unresponsive because the host it runs on runs out of resources (threads).

Suddenly AMQ Server log explodes with the messages like:

{code}
2018-01-26 09:26:16,909 | WARN  | Failed to register MBean org.apache.activemq :type=Broker,brokerName=activemq-vm-primary,connector=clientConnectors,connect

orName=default,connectionViewType=clientId,connectionName=ID_ca8f70e115d0-3708

7-1516883370639-0_22 | org.apache.activemq.broker.jmx.ManagedTransportConnecti

on | ActiveMQ Transport: tcp:///172.10.7.56:55548@61616

2018-01-26 09:26:21,375 | WARN  | Ignoring ack received before dispatch; result of failover with an outstanding ack. Acked messages will be replayed if present on this broker. Ignored ack: MessageAck \{commandId = 157, responseRequired = false, ackType = 2, consumerId = ID:ca8f70e115d0-37087-1516883370639-1:22:10:1, firstMessageId = ID:a95345a9c0df-33771-1516883685728-1:17:5:1:23, lastMessageId = ID:a95345a9c0df-33771-1516883685728-1:17:5:1:23, destination = queue://MY_QUEUE_OUT, transactionId = null, messageCount = 1, poisonCause = null} | org.apache.activemq.broker.region.PrefetchSubscription | ActiveMQ Transport: tcp:///172.16.6.56:55464@61616

2018-01-26 09:26:39,211 | WARN  | Transport Connection to: tcp://172.10.6.56:55860 failed: java.net.SocketException: Connection reset | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker

2018-01-26 09:26:47,175 | WARN  | Transport Connection to: tcp://172.10.6.56:57012 failed: java.net.SocketException: Broken pipe (Write failed) | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker
{code}

After short period of time AMQ server comes out of resources with "java.lang.OutOfMemoryError: unable to create new native thread" error. The AMQ service process in this case has a huge number of threads (some thousands)

 

The client side log contains a lot of reconnection attempts messages like:

{code}
2018-01-26 00:10:31,387 WARN    [\{{bundle.name,org.apache.activemq.activemq-osgi}{bundle.version,5.14.1}\{bundle.id,181}}]     [null]  org.apache.activemq.transport.failover.FailoverTransport      Failed to connect to [tcp://activemq-vm-primary:61616, tcp://activemq-vm-secondary:61616] after: 810 attempt(s) continuing to retry.
{code}

It seems that client creates a huge number of connections by failover retry and after some time kills the server.

Issue looks very similar to described in https://issues.apache.org/jira/browse/AMQ-6603, however server isn't configured with access control settings.

I found the description of similar problem into [http://activemq.2283324.n4.nabble.com/ActiveMQ-5-2-OutOfMemoryError-unable-to-create-new-native-thread-td2366585.html],  but without concrete suggestion.

 

Part of server log is attached